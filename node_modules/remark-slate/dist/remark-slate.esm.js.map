{"version":3,"file":"remark-slate.esm.js","sources":["../src/deserialize.ts","../src/serialize.ts","../src/plugin.ts"],"sourcesContent":["export interface NodeTypes {\n  paragraph: string;\n  block_quote: string;\n  code_block: string;\n  link: string;\n  image: string;\n  ul_list: string;\n  ol_list: string;\n  listItem: string;\n  heading: {\n    1: string;\n    2: string;\n    3: string;\n    4: string;\n    5: string;\n    6: string;\n  };\n  emphasis_mark: string;\n  strong_mark: string;\n  delete_mark: string;\n  inline_code_mark: string;\n  thematic_break: string;\n}\n\ntype RecursivePartial<T> = {\n  [P in keyof T]?: RecursivePartial<T[P]>;\n};\n\nexport interface OptionType {\n  nodeTypes?: RecursivePartial<NodeTypes>;\n  linkDestinationKey?: string;\n  imageSourceKey?: string;\n  imageCaptionKey?: string;\n}\n\nexport interface MdastNode {\n  type?: string;\n  ordered?: boolean;\n  value?: string;\n  text?: string;\n  children?: Array<MdastNode>;\n  depth?: 1 | 2 | 3 | 4 | 5 | 6;\n  url?: string;\n  alt?: string;\n  lang?: string;\n  // mdast metadata\n  position?: any;\n  spread?: any;\n  checked?: any;\n  indent?: any;\n}\n\nexport const defaultNodeTypes: NodeTypes = {\n  paragraph: 'paragraph',\n  block_quote: 'block_quote',\n  code_block: 'code_block',\n  link: 'link',\n  ul_list: 'ul_list',\n  ol_list: 'ol_list',\n  listItem: 'list_item',\n  heading: {\n    1: 'heading_one',\n    2: 'heading_two',\n    3: 'heading_three',\n    4: 'heading_four',\n    5: 'heading_five',\n    6: 'heading_six',\n  },\n  emphasis_mark: 'italic',\n  strong_mark: 'bold',\n  delete_mark: 'strikeThrough',\n  inline_code_mark: 'code',\n  thematic_break: 'thematic_break',\n  image: 'image',\n};\n\nexport default function deserialize(node: MdastNode, opts?: OptionType) {\n  const types = {\n    ...defaultNodeTypes,\n    ...opts?.nodeTypes,\n    heading: {\n      ...defaultNodeTypes.heading,\n      ...opts?.nodeTypes?.heading,\n    },\n  };\n\n  const linkDestinationKey = opts?.linkDestinationKey ?? 'link';\n  const imageSourceKey = opts?.imageSourceKey ?? 'link';\n  const imageCaptionKey = opts?.imageCaptionKey ?? 'caption';\n\n  let children = [{ text: '' }];\n\n  if (\n    node.children &&\n    Array.isArray(node.children) &&\n    node.children.length > 0\n  ) {\n    // @ts-ignore\n    children = node.children.map((c: MdastNode) =>\n      deserialize(\n        {\n          ...c,\n          ordered: node.ordered || false,\n        },\n        opts\n      )\n    );\n  }\n\n  switch (node.type) {\n    case 'heading':\n      return { type: types.heading[node.depth || 1], children };\n    case 'list':\n      return { type: node.ordered ? types.ol_list : types.ul_list, children };\n    case 'listItem':\n      return { type: types.listItem, children };\n    case 'paragraph':\n      return { type: types.paragraph, children };\n    case 'link':\n      return { type: types.link, [linkDestinationKey]: node.url, children };\n    case 'image':\n      return {\n        type: types.image,\n        children: [{ text: '' }],\n        [imageSourceKey]: node.url,\n        [imageCaptionKey]: node.alt,\n      };\n    case 'blockquote':\n      return { type: types.block_quote, children };\n    case 'code':\n      return {\n        type: types.code_block,\n        language: node.lang,\n        children: [{ text: node.value }],\n      };\n\n    case 'html':\n      if (node.value?.includes('<br>')) {\n        return {\n          break: true,\n          type: types.paragraph,\n          children: [{ text: node.value?.replace(/<br>/g, '') || '' }],\n        };\n      }\n      return { type: 'paragraph', children: [{ text: node.value || '' }] };\n\n    case 'emphasis':\n      return {\n        [types.emphasis_mark]: true,\n        ...forceLeafNode(children),\n        ...persistLeafFormats(children),\n      };\n    case 'strong':\n      return {\n        [types.strong_mark]: true,\n        ...forceLeafNode(children),\n        ...persistLeafFormats(children),\n      };\n    case 'delete':\n      return {\n        [types.delete_mark]: true,\n        ...forceLeafNode(children),\n        ...persistLeafFormats(children),\n      };\n    case 'inlineCode':\n      return {\n        [types.inline_code_mark]: true,\n        text: node.value,\n        ...persistLeafFormats(children),\n      };\n    case 'thematicBreak':\n      return {\n        type: types.thematic_break,\n        children: [{ text: '' }],\n      };\n\n    case 'text':\n    default:\n      return { text: node.value || '' };\n  }\n}\n\nconst forceLeafNode = (children: Array<{ text?: string }>) => ({\n  text: children.map((k) => k?.text).join(''),\n});\n\n// This function is will take any unknown keys, and bring them up a level\n// allowing leaf nodes to have many different formats at once\n// for example, bold and italic on the same node\nfunction persistLeafFormats(children: Array<MdastNode>) {\n  return children.reduce((acc, node) => {\n    Object.keys(node).forEach(function (key) {\n      if (key === 'children' || key === 'type' || key === 'text') return;\n\n      // @ts-ignore\n      acc[key] = node[key];\n    });\n\n    return acc;\n  }, {});\n}\n","import escapeHtml from 'escape-html';\n\nimport { defaultNodeTypes, NodeTypes } from './deserialize';\n\nexport interface LeafType {\n  text: string;\n  strikeThrough?: boolean;\n  bold?: boolean;\n  italic?: boolean;\n  code?: boolean;\n  parentType?: string;\n}\n\nexport interface BlockType {\n  type: string;\n  parentType?: string;\n  link?: string;\n  caption?: string;\n  language?: string;\n  break?: boolean;\n  children: Array<BlockType | LeafType>;\n}\n\ninterface Options {\n  nodeTypes: NodeTypes;\n  listDepth?: number;\n  ignoreParagraphNewline?: boolean;\n}\n\nconst isLeafNode = (node: BlockType | LeafType): node is LeafType => {\n  return typeof (node as LeafType).text === 'string';\n};\n\nconst VOID_ELEMENTS: Array<keyof NodeTypes> = ['thematic_break'];\n\nconst BREAK_TAG = '<br>';\n\nexport default function serialize(\n  chunk: BlockType | LeafType,\n  opts: Options = { nodeTypes: defaultNodeTypes }\n) {\n  const {\n    nodeTypes: userNodeTypes = defaultNodeTypes,\n    ignoreParagraphNewline = false,\n    listDepth = 0,\n  } = opts;\n\n  let text = (chunk as LeafType).text || '';\n  let type = (chunk as BlockType).type || '';\n\n  const nodeTypes: NodeTypes = {\n    ...defaultNodeTypes,\n    ...userNodeTypes,\n    heading: {\n      ...defaultNodeTypes.heading,\n      ...userNodeTypes.heading,\n    },\n  };\n\n  const LIST_TYPES = [nodeTypes.ul_list, nodeTypes.ol_list];\n\n  let children = text;\n\n  if (!isLeafNode(chunk)) {\n    children = chunk.children\n      .map((c: BlockType | LeafType) => {\n        const isList = !isLeafNode(c)\n          ? LIST_TYPES.includes(c.type || '')\n          : false;\n\n        const selfIsList = LIST_TYPES.includes(chunk.type || '');\n\n        // Links can have the following shape\n        // In which case we don't want to surround\n        // with break tags\n        // {\n        //  type: 'paragraph',\n        //  children: [\n        //    { text: '' },\n        //    { type: 'link', children: [{ text: foo.com }]}\n        //    { text: '' }\n        //  ]\n        // }\n        let childrenHasLink = false;\n\n        if (!isLeafNode(chunk) && Array.isArray(chunk.children)) {\n          childrenHasLink = chunk.children.some(\n            (f) => !isLeafNode(f) && f.type === nodeTypes.link\n          );\n        }\n\n        return serialize(\n          { ...c, parentType: type },\n          {\n            nodeTypes,\n            // WOAH.\n            // what we're doing here is pretty tricky, it relates to the block below where\n            // we check for ignoreParagraphNewline and set type to paragraph.\n            // We want to strip out empty paragraphs sometimes, but other times we don't.\n            // If we're the descendant of a list, we know we don't want a bunch\n            // of whitespace. If we're parallel to a link we also don't want\n            // to respect neighboring paragraphs\n            ignoreParagraphNewline:\n              (ignoreParagraphNewline ||\n                isList ||\n                selfIsList ||\n                childrenHasLink) &&\n              // if we have c.break, never ignore empty paragraph new line\n              !(c as BlockType).break,\n\n            // track depth of nested lists so we can add proper spacing\n            listDepth: LIST_TYPES.includes((c as BlockType).type || '')\n              ? listDepth + 1\n              : listDepth,\n          }\n        );\n      })\n      .join('');\n  }\n\n  // This is pretty fragile code, check the long comment where we iterate over children\n  if (\n    !ignoreParagraphNewline &&\n    (text === '' || text === '\\n') &&\n    chunk.parentType === nodeTypes.paragraph\n  ) {\n    type = nodeTypes.paragraph;\n    children = BREAK_TAG;\n  }\n\n  if (children === '' && !VOID_ELEMENTS.find((k) => nodeTypes[k] === type))\n    return;\n\n  // Never allow decorating break tags with rich text formatting,\n  // this can malform generated markdown\n  // Also ensure we're only ever applying text formatting to leaf node\n  // level chunks, otherwise we can end up in a situation where\n  // we try applying formatting like to a node like this:\n  // \"Text foo bar **baz**\" resulting in \"**Text foo bar **baz****\"\n  // which is invalid markup and can mess everything up\n  if (children !== BREAK_TAG && isLeafNode(chunk)) {\n    if (chunk.strikeThrough && chunk.bold && chunk.italic) {\n      children = retainWhitespaceAndFormat(children, '~~***');\n    } else if (chunk.bold && chunk.italic) {\n      children = retainWhitespaceAndFormat(children, '***');\n    } else {\n      if (chunk.bold) {\n        children = retainWhitespaceAndFormat(children, '**');\n      }\n\n      if (chunk.italic) {\n        children = retainWhitespaceAndFormat(children, '_');\n      }\n\n      if (chunk.strikeThrough) {\n        children = retainWhitespaceAndFormat(children, '~~');\n      }\n\n      if (chunk.code) {\n        children = retainWhitespaceAndFormat(children, '`');\n      }\n    }\n  }\n\n  switch (type) {\n    case nodeTypes.heading[1]:\n      return `# ${children}\\n`;\n    case nodeTypes.heading[2]:\n      return `## ${children}\\n`;\n    case nodeTypes.heading[3]:\n      return `### ${children}\\n`;\n    case nodeTypes.heading[4]:\n      return `#### ${children}\\n`;\n    case nodeTypes.heading[5]:\n      return `##### ${children}\\n`;\n    case nodeTypes.heading[6]:\n      return `###### ${children}\\n`;\n\n    case nodeTypes.block_quote:\n      // For some reason, marked is parsing blockquotes w/ one new line\n      // as contiued blockquotes, so adding two new lines ensures that doesn't\n      // happen\n      return `> ${children}\\n\\n`;\n\n    case nodeTypes.code_block:\n      return `\\`\\`\\`${\n        (chunk as BlockType).language || ''\n      }\\n${children}\\n\\`\\`\\`\\n`;\n\n    case nodeTypes.link:\n      return `[${children}](${(chunk as BlockType).link || ''})`;\n    case nodeTypes.image:\n      return `![${(chunk as BlockType).caption}](${\n        (chunk as BlockType).link || ''\n      })`;\n\n    case nodeTypes.ul_list:\n    case nodeTypes.ol_list:\n      return `\\n${children}\\n`;\n\n    case nodeTypes.listItem:\n      const isOL = chunk && chunk.parentType === nodeTypes.ol_list;\n\n      let spacer = '';\n      for (let k = 0; listDepth > k; k++) {\n        if (isOL) {\n          // https://github.com/remarkjs/remark-react/issues/65\n          spacer += '   ';\n        } else {\n          spacer += '  ';\n        }\n      }\n      return `${spacer}${isOL ? '1.' : '-'} ${children}`;\n\n    case nodeTypes.paragraph:\n      return `${children}\\n`;\n\n    case nodeTypes.thematic_break:\n      return `---\\n`;\n\n    default:\n      return escapeHtml(children);\n  }\n}\n\n// This function handles the case of a string like this: \"   foo   \"\n// Where it would be invalid markdown to generate this: \"**   foo   **\"\n// We instead, want to trim the whitespace out, apply formatting, and then\n// bring the whitespace back. So our returned string looks like this: \"   **foo**   \"\nfunction retainWhitespaceAndFormat(string: string, format: string) {\n  // we keep this for a comparison later\n  const frozenString = string.trim();\n\n  // children will be mutated\n  let children = frozenString;\n\n  // We reverse the right side formatting, to properly handle bold/italic and strikeThrough\n  // formats, so we can create ~~***FooBar***~~\n  const fullFormat = `${format}${children}${reverseStr(format)}`;\n\n  // This conditions accounts for no whitespace in our string\n  // if we don't have any, we can return early.\n  if (children.length === string.length) {\n    return fullFormat;\n  }\n\n  // if we do have whitespace, let's add our formatting around our trimmed string\n  // We reverse the right side formatting, to properly handle bold/italic and strikeThrough\n  // formats, so we can create ~~***FooBar***~~\n  const formattedString = format + children + reverseStr(format);\n\n  // and replace the non-whitespace content of the string\n  return string.replace(frozenString, formattedString);\n}\n\nconst reverseStr = (string: string) => string.split('').reverse().join('');\n","import transform, { OptionType, MdastNode } from './deserialize';\n\nexport default function plugin(opts?: OptionType) {\n  const compiler = (node: { children: Array<MdastNode> }) => {\n    return node.children.map((c) => transform(c, opts));\n  };\n\n  // @ts-ignore\n  this.Compiler = compiler;\n}\n"],"names":["defaultNodeTypes","paragraph","block_quote","code_block","link","ul_list","ol_list","listItem","heading","emphasis_mark","strong_mark","delete_mark","inline_code_mark","thematic_break","image","deserialize","node","opts","types","nodeTypes","linkDestinationKey","imageSourceKey","imageCaptionKey","children","text","Array","isArray","length","map","c","ordered","type","depth","url","alt","language","lang","value","includes","replace","forceLeafNode","persistLeafFormats","k","join","reduce","acc","Object","keys","forEach","key","isLeafNode","VOID_ELEMENTS","BREAK_TAG","serialize","chunk","userNodeTypes","ignoreParagraphNewline","listDepth","LIST_TYPES","isList","selfIsList","childrenHasLink","some","f","parentType","find","strikeThrough","bold","italic","retainWhitespaceAndFormat","code","caption","isOL","spacer","escapeHtml","string","format","frozenString","trim","fullFormat","reverseStr","formattedString","split","reverse","plugin","compiler","transform","Compiler"],"mappings":"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"}