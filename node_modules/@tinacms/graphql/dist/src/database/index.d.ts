/**
Copyright 2021 Forestry.io Holdings, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
import type { BinaryFilter, IndexDefinition, Store, TernaryFilter } from '@tinacms/datalayer';
import type { DocumentNode } from 'graphql';
import type { TinaSchema } from '../schema';
import type { TinaCloudSchemaBase } from '../types';
import type { Bridge } from './bridge';
declare type IndexStatusEvent = {
    status: 'inprogress' | 'complete' | 'failed';
    error?: Error;
};
declare type IndexStatusCallback = (event: IndexStatusEvent) => Promise<void>;
declare type CreateDatabase = {
    bridge: Bridge;
    store: Store;
    indexStatusCallback?: IndexStatusCallback;
};
export declare const createDatabase: (config: CreateDatabase) => Promise<Database>;
/** Options for {@link Database.query} **/
export declare type QueryOptions = {
    fileExtension?: string;
    collection: string;
    filterChain?: (BinaryFilter | TernaryFilter)[];
    sort?: string;
    first?: number;
    last?: number;
    after?: string;
    before?: string;
};
export declare class Database {
    config: CreateDatabase;
    bridge: Bridge;
    store: Store;
    indexStatusCallback: IndexStatusCallback | undefined;
    private tinaSchema;
    private collectionIndexDefinitions;
    private _lookup;
    constructor(config: CreateDatabase);
    private collectionForPath;
    private partitionPathsByCollection;
    get: <T extends object>(filepath: string) => Promise<T>;
    addPendingDocument: (filepath: string, data: {
        [key: string]: unknown;
    }) => Promise<void>;
    put: (filepath: string, data: {
        [key: string]: unknown;
    }, collection?: string) => Promise<boolean>;
    stringifyFile: (filepath: string, data: {
        [key: string]: unknown;
    }) => Promise<{
        stringifiedFile: string;
        payload: {
            [key: string]: unknown;
        };
        keepTemplateKey: boolean;
    }>;
    /**
     * Clears the internal cache of the tinaSchema and the lookup file. This allows the state to be reset
     */
    clearCache(): void;
    flush: (filepath: string) => Promise<string>;
    getLookup: (returnType: string) => Promise<LookupMapType>;
    getGraphQLSchema: () => Promise<DocumentNode>;
    getGraphQLSchemaFromBridge: () => Promise<DocumentNode>;
    getTinaSchema: () => Promise<TinaCloudSchemaBase>;
    getSchema: () => Promise<TinaSchema>;
    getIndexDefinitions: () => Promise<Record<string, Record<string, IndexDefinition>>>;
    documentExists: (fullpath: unknown) => Promise<boolean>;
    query: (queryOptions: QueryOptions, hydrator: any) => Promise<{
        edges: {
            node: any;
            cursor: string;
        }[];
        pageInfo: {
            hasPreviousPage: boolean;
            hasNextPage: boolean;
            startCursor: string;
            endCursor: string;
        };
    }>;
    putConfigFiles: ({ graphQLSchema, tinaSchema, }: {
        graphQLSchema: DocumentNode;
        tinaSchema: TinaSchema;
    }) => Promise<void>;
    private indexStatusCallbackWrapper;
    indexContent: ({ graphQLSchema, tinaSchema, }: {
        graphQLSchema: DocumentNode;
        tinaSchema: TinaSchema;
    }) => Promise<void>;
    deleteContentByPaths: (documentPaths: string[]) => Promise<void>;
    indexContentByPaths: (documentPaths: string[]) => Promise<void>;
    delete: (filepath: string) => Promise<void>;
    _indexAllContent: () => Promise<void>;
    addToLookupMap: (lookup: LookupMapType) => Promise<void>;
}
export declare type LookupMapType = GlobalDocumentLookup | CollectionDocumentLookup | MultiCollectionDocumentLookup | MultiCollectionDocumentListLookup | CollectionDocumentListLookup | UnionDataLookup | NodeDocument;
declare type NodeDocument = {
    type: string;
    resolveType: 'nodeDocument';
};
declare type GlobalDocumentLookup = {
    type: string;
    resolveType: 'globalDocument';
    collection: string;
};
declare type CollectionDocumentLookup = {
    type: string;
    resolveType: 'collectionDocument';
    collection: string;
};
declare type MultiCollectionDocumentLookup = {
    type: string;
    resolveType: 'multiCollectionDocument';
    createDocument: 'create';
    updateDocument: 'update';
};
declare type MultiCollectionDocumentListLookup = {
    type: string;
    resolveType: 'multiCollectionDocumentList';
    collections: string[];
};
export declare type CollectionDocumentListLookup = {
    type: string;
    resolveType: 'collectionDocumentList';
    collection: string;
};
declare type UnionDataLookup = {
    type: string;
    resolveType: 'unionData';
    collection?: string;
    typeMap: {
        [templateName: string]: string;
    };
};
export {};
