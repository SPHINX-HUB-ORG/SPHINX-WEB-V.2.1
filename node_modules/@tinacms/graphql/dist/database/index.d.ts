/**
Copyright 2021 Forestry.io Holdings, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
import type { DocumentNode } from 'graphql';
import type { TinaSchema } from '../schema';
import type { TinaCloudSchemaBase } from '../types';
import type { Store } from './store';
import type { Bridge } from './bridge';
declare type CreateDatabase = {
    bridge: Bridge;
    store: Store;
};
export declare const createDatabase: (config: CreateDatabase) => Promise<Database>;
export declare class Database {
    config: CreateDatabase;
    bridge: Bridge;
    store: Store;
    private tinaSchema;
    private _lookup;
    private _graphql;
    private _tinaSchema;
    constructor(config: CreateDatabase);
    get: <T extends object>(filepath: string) => Promise<T>;
    addPendingDocument: (filepath: string, data: {
        [key: string]: unknown;
    }) => Promise<void>;
    put: (filepath: string, data: {
        [key: string]: unknown;
    }) => Promise<boolean>;
    stringifyFile: (filepath: string, data: {
        [key: string]: unknown;
    }) => Promise<{
        stringifiedFile: string;
        payload: {
            [key: string]: unknown;
        };
    }>;
    flush: (filepath: string) => Promise<string>;
    getLookup: (returnType: string) => Promise<LookupMapType>;
    getGraphQLSchema: () => Promise<DocumentNode>;
    getGraphQLSchemaFromBridge: () => Promise<DocumentNode>;
    getTinaSchema: () => Promise<TinaCloudSchemaBase>;
    getSchema: () => Promise<TinaSchema>;
    documentExists: (fullpath: unknown) => Promise<boolean>;
    query: (queryStrings: string[], hydrator: any) => Promise<object[]>;
    indexData: ({ graphQLSchema, tinaSchema, }: {
        graphQLSchema: DocumentNode;
        tinaSchema: TinaSchema;
    }) => Promise<void>;
    addToLookupMap: (lookup: LookupMapType) => Promise<void>;
}
export declare type LookupMapType = GlobalDocumentLookup | CollectionDocumentLookup | MultiCollectionDocumentLookup | MultiCollectionDocumentListLookup | CollectionDocumentListLookup | UnionDataLookup | NodeDocument;
declare type NodeDocument = {
    type: string;
    resolveType: 'nodeDocument';
};
declare type GlobalDocumentLookup = {
    type: string;
    resolveType: 'globalDocument';
    collection: string;
};
declare type CollectionDocumentLookup = {
    type: string;
    resolveType: 'collectionDocument';
    collection: string;
};
declare type MultiCollectionDocumentLookup = {
    type: string;
    resolveType: 'multiCollectionDocument';
    createDocument: 'create';
    updateDocument: 'update';
};
declare type MultiCollectionDocumentListLookup = {
    type: string;
    resolveType: 'multiCollectionDocumentList';
    collections: string[];
};
export declare type CollectionDocumentListLookup = {
    type: string;
    resolveType: 'collectionDocumentList';
    collection: string;
};
declare type UnionDataLookup = {
    type: string;
    resolveType: 'unionData';
    typeMap: {
        [templateName: string]: string;
    };
};
export {};
