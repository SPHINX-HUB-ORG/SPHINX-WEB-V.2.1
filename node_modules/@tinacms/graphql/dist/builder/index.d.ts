/**
Copyright 2021 Forestry.io Holdings, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
import { Database } from '../database';
import type { ObjectTypeDefinitionNode, InlineFragmentNode } from 'graphql';
import type { TinaCloudCollectionEnriched, Template } from '../types';
import { TinaSchema } from '../schema';
export declare const createBuilder: ({ database, tinaSchema, }: {
    database: Database;
    tinaSchema: TinaSchema;
}) => Promise<Builder>;
/**
 * The builder class is responsible for creating GraphQL AST definitions
 * for a given portion of the Tina schema. In some cases that will also mean
 * storing a reference to how we can resolve that type when we come across it.
 */
export declare class Builder {
    config: {
        database: Database;
        tinaSchema: TinaSchema;
    };
    tinaSchema: TinaSchema;
    database: Database;
    constructor(config: {
        database: Database;
        tinaSchema: TinaSchema;
    });
    /**
     * ```graphql
     * # ex.
     * {
     *   getCollection(collection: $collection) {
     *     name
     *     documents {...}
     *   }
     * }
     * ```
     *
     * @param collections
     */
    buildCollectionDefinition: (collections: TinaCloudCollectionEnriched[]) => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * ```graphql
     * # ex.
     * {
     *   getCollections {
     *     name
     *     documents {...}
     *   }
     * }
     * ```
     *
     * @param collections
     */
    buildMultiCollectionDefinition: (collections: TinaCloudCollectionEnriched[]) => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * ```graphql
     * # ex.
     * {
     *   node(id: $id) {
     *     id
     *     data {...}
     *   }
     * }
     * ```
     */
    multiNodeDocument: () => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * ```graphql
     * # ex.
     * {
     *   getDocument(collection: $collection, relativePath: $relativePath) {
     *     id
     *     data {...}
     *   }
     * }
     * ```
     *
     * @param collections
     */
    multiCollectionDocument: (collections: TinaCloudCollectionEnriched[]) => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * ```graphql
     * {
     *    getDocumentFields()
     * }
     * ```
     */
    multiCollectionDocumentFields: () => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * ```graphql
     * # ex.
     * {
     *   addPendingDocument(collection: $collection, relativePath: $relativePath, params: $params) {
     *     id
     *     data {...}
     *   }
     * }
     * ```
     *
     * @param collections
     */
    addMultiCollectionDocumentMutation: () => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * ```graphql
     * # ex.
     * {
     *   createDocument(relativePath: $relativePath, params: $params) {
     *     id
     *     data {...}
     *   }
     * }
     * ```
     *
     * @param collections
     */
    buildCreateCollectionDocumentMutation: (collections: TinaCloudCollectionEnriched[]) => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * ```graphql
     * # ex.
     * {
     *   updateDocument(relativePath: $relativePath, params: $params) {
     *     id
     *     data {...}
     *   }
     * }
     * ```
     *
     * @param collections
     */
    buildUpdateCollectionDocumentMutation: (collections: TinaCloudCollectionEnriched[]) => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * ```graphql
     * # ex.
     * {
     *   getDocumentList(first: 10) {
     *     edges {
     *       node {
     *         id
     *       }
     *     }
     *   }
     * }
     * ```
     *
     * @param collections
     */
    multiCollectionDocumentList: (collections: TinaCloudCollectionEnriched[]) => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * ```graphql
     * # ex.
     * {
     *   getPostDocument(relativePath: $relativePath) {
     *     id
     *     data {...}
     *   }
     * }
     * ```
     *
     * @param collection
     */
    collectionDocument: (collection: TinaCloudCollectionEnriched) => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * Turns a collection into a fragment that gets updated on build. This fragment does not resolve references
     * ```graphql
     * # ex.
     * fragment AuthorsParts on Authors {
     *   name
     *   avatar
     *   ...
     * }
     * ```
     *
     * @public
     * @param collection a Tina Cloud collection
     */
    collectionFragment: (collection: TinaCloudCollectionEnriched) => Promise<import("graphql").FragmentDefinitionNode>;
    private _buildFieldNodeForFragments;
    buildTemplateFragments(template: Template<true>): Promise<InlineFragmentNode>;
    /**
     * ```graphql
     * # ex.
     * mutation {
     *   updatePostDocument(relativePath: $relativePath, params: $params) {
     *     id
     *     data {...}
     *   }
     * }
     * ```
     *
     * @param collection
     */
    updateCollectionDocumentMutation: (collection: TinaCloudCollectionEnriched) => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * ```graphql
     * # ex.
     * mutation {
     *   createPostDocument(relativePath: $relativePath, params: $params) {
     *     id
     *     data {...}
     *   }
     * }
     * ```
     *
     * @param collection
     */
    createCollectionDocumentMutation: (collection: TinaCloudCollectionEnriched) => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * ```graphql
     * # ex.
     * {
     *   getPostList(first: 10) {
     *     edges {
     *       node {
     *         id
     *       }
     *     }
     *   }
     * }
     * ```
     *
     * @param collection
     */
    collectionDocumentList: (collection: TinaCloudCollectionEnriched) => Promise<import("graphql").FieldDefinitionNode>;
    /**
     * GraphQL type definitions which remain unchanged regardless
     * of the supplied Tina schema. Ex. "node" interface
     */
    buildStaticDefinitions: () => (import("graphql").ScalarTypeDefinitionNode | ObjectTypeDefinitionNode | import("graphql").InterfaceTypeDefinitionNode[])[];
    private _buildCollectionDocumentType;
    private _filterCollectionDocumentType;
    private _buildTemplateFilter;
    private _updateCollectionDocumentMutationType;
    private _buildTemplateMutation;
    private _buildMultiCollectionDocumentDefinition;
    private _buildMultiCollectionDocumentListDefinition;
    private _buildFieldFilter;
    private _buildFieldMutation;
    private _buildReferenceMutation;
    private _buildObjectOrUnionData;
    private _connectionFilterBuilder;
    private _connectionFieldBuilder;
    private _buildDataField;
    private _buildTemplateData;
}
