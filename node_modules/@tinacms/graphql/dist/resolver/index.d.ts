/**
Copyright 2021 Forestry.io Holdings, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
import { TinaSchema } from '../schema';
import { Database, CollectionDocumentListLookup } from '../database';
import type { Collectable, TinaCloudCollection } from '../types';
interface ResolverConfig {
    database: Database;
    tinaSchema: TinaSchema;
}
export declare const createResolver: (args: ResolverConfig) => Resolver;
/**
 * The resolver provides functions for all possible types of lookup
 * values and retrieves them from the database
 */
export declare class Resolver {
    init: ResolverConfig;
    database: Database;
    tinaSchema: TinaSchema;
    constructor(init: ResolverConfig);
    resolveCollection: (collectionName: string) => Promise<{
        fields: string | import("../types").TinaFieldInner<true>[];
        templates?: undefined;
        references?: import("../types").ReferenceTypeWithNamespace[];
        namespace: string[];
        label?: string;
        name: string;
        path: string;
        format?: "json" | "md" | "markdown" | "mdx";
        match?: string;
        documents: string[];
    } | {
        templates: (string | {
            label: string;
            name: string;
            fields: import("../types").TinaFieldInner<true>[];
            ui?: object;
            namespace: string[];
        })[];
        fields?: undefined;
        references?: import("../types").ReferenceTypeWithNamespace[];
        namespace: string[];
        label?: string;
        name: string;
        path: string;
        format?: "json" | "md" | "markdown" | "mdx";
        match?: string;
        documents: string[];
    }>;
    getDocument: (fullPath: unknown) => Promise<{
        __typename: string;
        id: string;
        sys: {
            basename: string;
            filename: string;
            extension: string;
            path: string;
            relativePath: string;
            breadcrumbs: string[];
            collection: TinaCloudCollection<true>;
            template: string | number;
        };
        data: {
            _collection: string;
            _template: string;
        };
        values: {
            _collection: string;
            _template: string;
        };
        dataJSON: {
            _collection: string;
            _template: string;
        };
        form: {
            label: string;
            name: string;
            fields: unknown[];
        };
    }>;
    getDocumentFields: () => Promise<{}>;
    buildObjectMutations: (fieldValue: any, field: Collectable) => {
        [key: string]: unknown;
    } | {
        [key: string]: unknown;
    }[];
    createResolveDocument: ({ collection, realPath, args, isAddPendingDocument, }: {
        collection: TinaCloudCollection<true>;
        realPath: string;
        args: unknown;
        isAddPendingDocument: boolean;
    }) => Promise<{
        __typename: string;
        id: string;
        sys: {
            basename: string;
            filename: string;
            extension: string;
            path: string;
            relativePath: string;
            breadcrumbs: string[];
            collection: TinaCloudCollection<true>;
            template: string | number;
        };
        data: {
            _collection: string;
            _template: string;
        };
        values: {
            _collection: string;
            _template: string;
        };
        dataJSON: {
            _collection: string;
            _template: string;
        };
        form: {
            label: string;
            name: string;
            fields: unknown[];
        };
    }>;
    updateResolveDocument: ({ collection, realPath, args, isAddPendingDocument, isCollectionSpecific, }: {
        collection: TinaCloudCollection<true>;
        realPath: string;
        args: unknown;
        isAddPendingDocument: boolean;
        isCollectionSpecific: boolean;
    }) => Promise<{
        __typename: string;
        id: string;
        sys: {
            basename: string;
            filename: string;
            extension: string;
            path: string;
            relativePath: string;
            breadcrumbs: string[];
            collection: TinaCloudCollection<true>;
            template: string | number;
        };
        data: {
            _collection: string;
            _template: string;
        };
        values: {
            _collection: string;
            _template: string;
        };
        dataJSON: {
            _collection: string;
            _template: string;
        };
        form: {
            label: string;
            name: string;
            fields: unknown[];
        };
    }>;
    resolveDocument: ({ args, collection: collectionName, isMutation, isCreation, isAddPendingDocument, isCollectionSpecific, }: {
        args: unknown;
        collection?: string;
        isMutation: boolean;
        isCreation?: boolean;
        isAddPendingDocument?: boolean;
        isCollectionSpecific?: boolean;
    }) => Promise<{
        __typename: string;
        id: string;
        sys: {
            basename: string;
            filename: string;
            extension: string;
            path: string;
            relativePath: string;
            breadcrumbs: string[];
            collection: TinaCloudCollection<true>;
            template: string | number;
        };
        data: {
            _collection: string;
            _template: string;
        };
        values: {
            _collection: string;
            _template: string;
        };
        dataJSON: {
            _collection: string;
            _template: string;
        };
        form: {
            label: string;
            name: string;
            fields: unknown[];
        };
    }>;
    resolveCollectionConnections: ({ ids }: {
        ids: string[];
    }) => Promise<{
        totalCount: number;
        edges: {
            node: {
                __typename: string;
                id: string;
                sys: {
                    basename: string;
                    filename: string;
                    extension: string;
                    path: string;
                    relativePath: string;
                    breadcrumbs: string[];
                    collection: TinaCloudCollection<true>;
                    template: string | number;
                };
                data: {
                    _collection: string;
                    _template: string;
                };
                values: {
                    _collection: string;
                    _template: string;
                };
                dataJSON: {
                    _collection: string;
                    _template: string;
                };
                form: {
                    label: string;
                    name: string;
                    fields: unknown[];
                };
            };
        }[];
    }>;
    getDocumentsForCollection: (collectionName: string) => Promise<string[]>;
    resolveCollectionConnection: ({ args, lookup, }: {
        args: Record<string, Record<string, object>>;
        lookup: CollectionDocumentListLookup;
    }) => Promise<{
        totalCount: any;
        edges: any;
    }>;
    private buildFieldMutations;
    private resolveFieldData;
    /**
     * A mutation looks nearly identical between updateDocument:
     * ```graphql
     * updateDocument(collection: $collection,relativePath: $path, params: {
     *   post: {
     *     title: "Hello, World"
     *   }
     * })`
     * ```
     * and `updatePostDocument`:
     * ```graphql
     * updatePostDocument(relativePath: $path, params: {
     *   title: "Hello, World"
     * })
     * ```
     * The problem here is that we don't know whether the payload came from `updateDocument`
     * or `updatePostDocument` (we could, but for now it's easier not to pipe those details through),
     * But we do know that when given a `args.collection` value, we can assume that
     * this was a `updateDocument` request, and thus - should grab the data
     * from the corresponding field name in the key
     */
    private buildParams;
    private resolveField;
}
export {};
