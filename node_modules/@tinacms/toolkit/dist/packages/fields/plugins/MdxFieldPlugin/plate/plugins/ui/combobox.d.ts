/**



*/
import React from 'react';
import type { MdxTemplate } from '../../types';
declare type TemplateType = MdxTemplate;
export declare type Dispatch = React.Dispatch<Action>;
export declare type State = {
    initialTemplates: TemplateType[];
    activeIndex: number;
    activeTemplates: TemplateType[];
    value: string;
    status: 'pending' | 'selected' | 'cancelled';
};
declare type Action = {
    type: 'selectItem';
    value: number;
} | {
    type: 'selectCurrentItem';
} | {
    type: 'updateValue';
    value: string;
} | {
    type: 'move';
    value: 'up' | 'down';
};
/**
 * This could (should?) be replaced by something like downshift, but in some
 * ways it's not like a traditional combobox because so much of what's needed
 * here should _not_ steal focus from the editor. Some of the combobox libraries
 * I've tried really shine when it comes to accessibility out-of-the-box which is
 * sort of the opposite of what we want here. I'm not sure of the best way to make
 * this accessible, but I have a feeling the plate combobox is the way to go.
 * At first glance, there's very little documentation for using it, though it
 * does seem to support bringing out own UI (it uses downshift).
 */
export declare function SearchAutocomplete(props: {
    value: string;
    onValue: (value: {
        name: string;
        inline?: boolean;
    }) => void;
    onCancel: () => void;
}): JSX.Element;
export {};
