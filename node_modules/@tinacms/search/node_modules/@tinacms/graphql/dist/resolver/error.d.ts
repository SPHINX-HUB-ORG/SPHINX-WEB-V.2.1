/**

*/
import { ASTNode, GraphQLError, Source, SourceLocation } from 'graphql';
export declare class TinaGraphQLError extends Error implements GraphQLError {
    extensions: Record<string, any>;
    readonly name: string;
    readonly locations: ReadonlyArray<SourceLocation> | undefined;
    readonly path: ReadonlyArray<string | number> | undefined;
    readonly source: Source | undefined;
    readonly positions: ReadonlyArray<number> | undefined;
    readonly nodes: ReadonlyArray<ASTNode> | undefined;
    originalError: Error | null | undefined;
    [key: string]: any;
    constructor(message: string, extensions?: Record<string, any>);
}
export declare type TypeFetchErrorArgs = {
    stack?: string;
    file?: string;
    includeAuditMessage?: boolean;
    originalError: Error;
    collection?: string;
};
export declare class TinaFetchError extends Error {
    stack?: string;
    collection?: string;
    file?: string;
    originalError: Error;
    constructor(message: string, args: TypeFetchErrorArgs);
}
export declare class TinaQueryError extends TinaFetchError {
    stack?: string;
    collection?: string;
    file?: string;
    originalError: Error;
    constructor(args: TypeFetchErrorArgs);
}
export declare class TinaParseDocumentError extends TinaFetchError {
    stack?: string;
    collection?: string;
    file?: string;
    originalError: Error;
    constructor(args: TypeFetchErrorArgs);
    toString(): string;
}
export declare const handleFetchErrorError: (e: unknown, verbose: any) => never;
