import type { Schema, Collection, Template as TinaTemplate } from '@tinacms/schema-tools';
import { buildDotTinaFiles } from './build';
export { resolve } from './resolve';
export { transformDocumentIntoPayload } from './resolver';
export * from './resolver/error';
export { createDatabase } from './database';
export { TinaLevelClient } from './level/tinaLevel';
export type { QueryOptions, Database, OnDeleteCallback, OnPutCallback, CreateDatabase, } from './database';
import type { Config } from '@tinacms/schema-tools';
export { getChangedFiles, getSha } from './git';
export { sequential, assertShape } from './util';
export { loadAndParseWithAliases, stringifyFile, parseFile, scanAllContent, scanContentByPaths, transformDocument, } from './database/util';
export { createSchema } from './schema/createSchema';
export { buildDotTinaFiles };
export declare type DummyType = unknown;
export declare const buildSchema: (config: Config, flags?: string[]) => Promise<{
    graphQLSchema: {
        kind: "Document";
        definitions: import("graphql").TypeDefinitionNode[];
    };
    tinaSchema: import("@tinacms/schema-tools").TinaSchema;
    lookup: Record<string, import("./database").LookupMapType>;
    fragDoc: string;
    queryDoc: string;
}>;
export declare type TinaSchema = Schema;
export type { TinaTemplate, Schema, Collection };
export { FilesystemBridge, AuditFileSystemBridge, } from './database/bridge/filesystem';
export { IsomorphicBridge } from './database/bridge/isomorphic';
export type { Bridge } from './database/bridge';
