/**

*/
import * as yup from 'yup';
import { Collection, CollectionTemplateable, normalizePath, TinaSchema } from '@tinacms/schema-tools';
import { Bridge } from './bridge';
export { normalizePath };
export declare const stringifyFile: (content: object, format: FormatType | string, keepTemplateKey: boolean, markdownParseConfig?: {
    frontmatterFormat?: 'toml' | 'yaml' | 'json';
    frontmatterDelimiters?: [string, string] | string;
}) => string;
export declare const parseFile: <T extends object>(content: string, format: FormatType | string, yupSchema: (args: typeof yup) => yup.ObjectSchema<any>, markdownParseConfig?: {
    frontmatterFormat?: 'toml' | 'yaml' | 'json';
    frontmatterDelimiters?: [string, string] | string;
}) => T;
export declare type FormatType = 'json' | 'md' | 'mdx' | 'markdown';
export declare const atob: (b64Encoded: string) => string;
export declare const btoa: (string: string) => string;
export declare const scanAllContent: (tinaSchema: TinaSchema, bridge: Bridge, callback: (collection: Collection<true>, contentPaths: string[]) => Promise<void>) => Promise<string[]>;
export declare const scanContentByPaths: (tinaSchema: TinaSchema, documentPaths: string[], callback: (collection: Collection<true> | undefined, documentPaths: string[]) => Promise<void>) => Promise<void>;
export declare const partitionPathsByCollection: (tinaSchema: TinaSchema, documentPaths: string[]) => Promise<{
    pathsByCollection: Record<string, string[]>;
    nonCollectionPaths: string[];
    collections: Record<string, Collection<true>>;
}>;
/** TODO help needed with name of this function **/
export declare const transformDocument: <T extends object>(filepath: string, contentObject: any, tinaSchema: TinaSchema) => T;
export declare function hasOwnProperty<X extends {}, Y extends PropertyKey>(obj: X, prop: Y): obj is X & Record<Y, unknown>;
export declare const getTemplateForFile: (templateInfo: CollectionTemplateable, data: {
    [key: string]: unknown;
}) => import("@tinacms/schema-tools").Template<true>;
/** TODO help needed with name of this function **/
export declare const loadAndParseWithAliases: (bridge: Bridge, filepath: string, collection?: Collection<true>, templateInfo?: CollectionTemplateable) => Promise<object>;
