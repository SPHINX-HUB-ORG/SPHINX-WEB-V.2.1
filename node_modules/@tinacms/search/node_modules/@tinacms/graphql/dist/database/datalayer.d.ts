/**

*/
import { BatchOp, Level } from './level';
import { Collection } from '@tinacms/schema-tools';
export declare enum OP {
    EQ = "eq",
    GT = "gt",
    LT = "lt",
    GTE = "gte",
    LTE = "lte",
    STARTS_WITH = "startsWith",
    IN = "in"
}
export declare type BinaryFilter = {
    pathExpression: string;
    rightOperand: FilterOperand;
    operator: OP.EQ | OP.GT | OP.LT | OP.GTE | OP.LTE | OP.STARTS_WITH | OP.IN;
    type: string;
    pad?: PadDefinition;
    list: boolean;
};
export declare type TernaryFilter = {
    pathExpression: string;
    leftOperand: FilterOperand;
    rightOperand: FilterOperand;
    leftOperator: OP.GTE | OP.GT;
    rightOperator: OP.LT | OP.LTE;
    type: string;
    pad?: PadDefinition;
    list: boolean;
};
export declare type IndexDefinition = {
    fields: {
        name: string;
        type?: string;
        pad?: PadDefinition;
        list: boolean;
    }[];
};
export declare type PadDefinition = {
    fillString: string;
    maxLength: number;
};
export declare type FilterOperand = string | number | boolean | string[] | number[];
export declare type FilterCondition = {
    filterExpression: Record<string, FilterOperand>;
    filterPath: string;
};
declare type StringEscaper = <T extends string | string[]>(input: T) => T;
export declare const DEFAULT_COLLECTION_SORT_KEY = "__filepath__";
export declare const DEFAULT_NUMERIC_LPAD = 4;
export declare const coerceFilterChainOperands: (filterChain: (BinaryFilter | TernaryFilter)[], escapeString?: StringEscaper) => (BinaryFilter | TernaryFilter)[];
export declare const makeFilter: ({ filterChain, }: {
    filterChain?: (BinaryFilter | TernaryFilter)[];
}) => (values: Record<string, object | FilterOperand>) => boolean;
export declare const makeFilterChain: ({ conditions, }: {
    conditions: FilterCondition[];
}) => (BinaryFilter | TernaryFilter)[];
export declare const makeFilterSuffixes: (filterChain: (BinaryFilter | TernaryFilter)[], index: IndexDefinition) => {
    left?: string;
    right?: string;
} | undefined;
export declare const FOLDER_ROOT = "~";
declare type FolderTree = Record<string, Set<string>>;
export declare class FolderTreeBuilder {
    _tree: FolderTree;
    constructor();
    get tree(): FolderTree;
    update(documentPath: string, collectionPath: string): any;
}
export declare const makeFolderOpsForCollection: <T extends object>(folderTree: FolderTree, collection: Collection<true>, indexDefinitions: IndexDefinition[], opType: 'put' | 'del', level: Level, escapeStr?: StringEscaper) => BatchOp[];
export declare const makeIndexOpsForDocument: <T extends object>(filepath: string, collection: string | undefined, indexDefinitions: Record<string, IndexDefinition>, data: T, opType: 'put' | 'del', level: Level, escapeStr?: StringEscaper) => BatchOp[];
export declare const makeStringEscaper: (regex: RegExp, replacement: string) => StringEscaper;
export declare const stringEscaper: StringEscaper;
export {};
