/**
Copyright 2021 Forestry.io Holdings, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
import { z } from 'zod';
export declare const TinaCloudSchemaZod: z.ZodEffects<z.ZodObject<{
    collections: z.ZodArray<z.ZodEffects<z.ZodObject<z.extendShape<{
        label: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        format: z.ZodOptional<z.ZodEnum<["json", "md", "markdown", "mdx"]>>;
    }, {
        fields: z.ZodEffects<z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodType<import("..").TinaFieldInner<false>, z.ZodTypeDef, import("..").TinaFieldInner<false>>, "many">>, import("..").TinaFieldInner<false>[], import("..").TinaFieldInner<false>[]>, import("..").TinaFieldInner<false>[], import("..").TinaFieldInner<false>[]>;
        templates: z.ZodEffects<z.ZodOptional<z.ZodArray<z.ZodEffects<z.ZodObject<{
            label: z.ZodString;
            name: z.ZodString;
            fields: z.ZodArray<z.ZodType<import("..").TinaFieldInner<false>, z.ZodTypeDef, import("..").TinaFieldInner<false>>, "many">;
        }, "strip", z.ZodTypeAny, {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }, {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }>, {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }, {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }>, "many">>, {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }[], {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }[]>;
    }>, "strip", z.ZodTypeAny, {
        name?: string;
        fields?: import("..").TinaFieldInner<false>[];
        templates?: {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }[];
        format?: "json" | "md" | "markdown" | "mdx";
        label?: string;
    }, {
        name?: string;
        fields?: import("..").TinaFieldInner<false>[];
        templates?: {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }[];
        format?: "json" | "md" | "markdown" | "mdx";
        label?: string;
    }>, {
        name?: string;
        fields?: import("..").TinaFieldInner<false>[];
        templates?: {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }[];
        format?: "json" | "md" | "markdown" | "mdx";
        label?: string;
    }, {
        name?: string;
        fields?: import("..").TinaFieldInner<false>[];
        templates?: {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }[];
        format?: "json" | "md" | "markdown" | "mdx";
        label?: string;
    }>, "many">;
    config: z.ZodOptional<z.ZodObject<{
        media: z.ZodOptional<z.ZodObject<{
            tina: z.ZodOptional<z.ZodObject<{
                publicFolder: z.ZodString;
                mediaRoot: z.ZodString;
            }, "strict", z.ZodTypeAny, {
                publicFolder?: string;
                mediaRoot?: string;
            }, {
                publicFolder?: string;
                mediaRoot?: string;
            }>>;
            loadCustomStore: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodUnknown>>;
        }, "strip", z.ZodTypeAny, {
            tina?: {
                publicFolder?: string;
                mediaRoot?: string;
            };
            loadCustomStore?: (...args: unknown[]) => unknown;
        }, {
            tina?: {
                publicFolder?: string;
                mediaRoot?: string;
            };
            loadCustomStore?: (...args: unknown[]) => unknown;
        }>>;
    }, "strip", z.ZodTypeAny, {
        media?: {
            tina?: {
                publicFolder?: string;
                mediaRoot?: string;
            };
            loadCustomStore?: (...args: unknown[]) => unknown;
        };
    }, {
        media?: {
            tina?: {
                publicFolder?: string;
                mediaRoot?: string;
            };
            loadCustomStore?: (...args: unknown[]) => unknown;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    collections?: {
        name?: string;
        fields?: import("..").TinaFieldInner<false>[];
        templates?: {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }[];
        format?: "json" | "md" | "markdown" | "mdx";
        label?: string;
    }[];
    config?: {
        media?: {
            tina?: {
                publicFolder?: string;
                mediaRoot?: string;
            };
            loadCustomStore?: (...args: unknown[]) => unknown;
        };
    };
}, {
    collections?: {
        name?: string;
        fields?: import("..").TinaFieldInner<false>[];
        templates?: {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }[];
        format?: "json" | "md" | "markdown" | "mdx";
        label?: string;
    }[];
    config?: {
        media?: {
            tina?: {
                publicFolder?: string;
                mediaRoot?: string;
            };
            loadCustomStore?: (...args: unknown[]) => unknown;
        };
    };
}>, {
    collections?: {
        name?: string;
        fields?: import("..").TinaFieldInner<false>[];
        templates?: {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }[];
        format?: "json" | "md" | "markdown" | "mdx";
        label?: string;
    }[];
    config?: {
        media?: {
            tina?: {
                publicFolder?: string;
                mediaRoot?: string;
            };
            loadCustomStore?: (...args: unknown[]) => unknown;
        };
    };
}, {
    collections?: {
        name?: string;
        fields?: import("..").TinaFieldInner<false>[];
        templates?: {
            name?: string;
            fields?: import("..").TinaFieldInner<false>[];
            label?: string;
        }[];
        format?: "json" | "md" | "markdown" | "mdx";
        label?: string;
    }[];
    config?: {
        media?: {
            tina?: {
                publicFolder?: string;
                mediaRoot?: string;
            };
            loadCustomStore?: (...args: unknown[]) => unknown;
        };
    };
}>;
