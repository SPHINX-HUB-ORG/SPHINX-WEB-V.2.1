var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/start-server/server.ts
var server_exports = {};
__export(server_exports, {
  default: () => server_default
});
var import_cors, import_http, import_express, import_altair_express_middleware, import_body_parser, gqlServer, server_default;
var init_server = __esm({
  "pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/start-server/server.ts"() {
    import_cors = __toModule(require("cors"));
    import_http = __toModule(require("http"));
    import_express = __toModule(require("express"));
    import_altair_express_middleware = __toModule(require("altair-express-middleware"));
    import_body_parser = __toModule(require("body-parser"));
    gqlServer = async (database) => {
      const gqlPackage = require("@tinacms/graphql");
      const app = (0, import_express.default)();
      const server = import_http.default.createServer(app);
      app.use((0, import_cors.default)());
      app.use(import_body_parser.default.json());
      app.use("/altair", (0, import_altair_express_middleware.altairExpress)({
        endpointURL: "/graphql",
        initialQuery: `# Welcome to Tina!
      # We've got a simple query set up for you to get started
      # but there's plenty more for you to explore on your own!
      query MyQuery {
        getCollections {
          documents {
            id
            sys {
              filename
              extension
            }
          }
        }
      }`
      }));
      app.post("/graphql", async (req, res) => {
        const { query, variables } = req.body;
        const result = await gqlPackage.resolve({
          database,
          query,
          variables
        });
        return res.json(result);
      });
      return server;
    };
    server_default = gqlServer;
  }
});

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/index.ts
__export(exports, {
  defineSchema: () => defineSchema,
  init: () => init
});
var commander = __toModule(require("commander"));

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/package.json
var name = "@tinacms/cli";
var version = "0.59.0";

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/utils/theme.ts
var import_chalk = __toModule(require("chalk"));
var successText = import_chalk.default.bold.green;
var dangerText = import_chalk.default.bold.red;
var neutralText = import_chalk.default.bold.cyan;
var labelText = import_chalk.default.bold;
var cmdText = import_chalk.default.inverse;
var logText = import_chalk.default.italic.gray;
var warnText = import_chalk.default.yellowBright.bgBlack;
var CONFIRMATION_TEXT = import_chalk.default.dim("enter to confirm");

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/middleware.ts
var chain = async (cmds, options) => {
  const ctx = {};
  const next = async (middlewareIndex) => {
    if (middlewareIndex >= cmds.length) {
      process.exit(0);
    }
    try {
      await cmds[middlewareIndex](ctx, () => next(middlewareIndex + 1), options || {});
    } catch (err) {
      console.error(`  ${dangerText(err)}`);
      process.exit(1);
    }
  };
  if (cmds.length > 0) {
    await next(0);
  }
};

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/query-gen/attachSchema.ts
var import_graphql = __toModule(require("@tinacms/graphql"));
var import_datalayer = __toModule(require("@tinacms/datalayer"));

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/logger/index.ts
var import_log4js = __toModule(require("log4js"));
var logger = import_log4js.default.getLogger();
import_log4js.default.configure({
  appenders: {
    out: { type: "stdout", layout: { type: "messagePassThrough" } }
  },
  categories: { default: { appenders: ["out"], level: "info" } }
});
logger.level = "info";

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/query-gen/attachSchema.ts
async function attachSchema(ctx, next, options) {
  logger.info(logText("Building schema..."));
  const rootPath2 = process.cwd();
  const bridge = new import_datalayer.FilesystemBridge(rootPath2);
  const store = new import_datalayer.FilesystemStore({ rootPath: rootPath2 });
  const database = await (0, import_graphql.createDatabase)({ store, bridge });
  const schema = await (0, import_graphql.buildSchema)(rootPath2, database);
  ctx.schema = schema;
  next();
}

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/codegen/index.ts
var import_graphql5 = __toModule(require("graphql"));
var import_core = __toModule(require("@graphql-codegen/core"));
var import_typescript = __toModule(require("@graphql-codegen/typescript"));
var import_typescript_operations = __toModule(require("@graphql-codegen/typescript-operations"));

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/codegen/plugin.ts
var AddGeneratedClientFunc = (_schema, _documents, _config, _info) => {
  return `
// TinaSDK generated code
import { staticRequest } from 'tinacms'
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {}
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    })
  } catch (e) {
    // swallow errors related to document creation
    console.warn('Warning: There was an error when fetching data')
    console.warn(e)
  }

  return { data, query: doc, variables: vars || {} }
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = ()=>getSdk(requester)
`;
};
var AddGeneratedClient = {
  plugin: AddGeneratedClientFunc
};

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/codegen/sdkPlugin/index.ts
var import_graphql3 = __toModule(require("graphql"));
var import_graphql4 = __toModule(require("graphql"));
var import_path = __toModule(require("path"));

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/codegen/sdkPlugin/visitor.ts
var import_visitor_plugin_common = __toModule(require("@graphql-codegen/visitor-plugin-common"));
var import_auto_bind = __toModule(require("auto-bind"));
var import_graphql2 = __toModule(require("graphql"));
var GenericSdkVisitor = class extends import_visitor_plugin_common.ClientSideBaseVisitor {
  constructor(schema, fragments, rawConfig) {
    super(schema, fragments, rawConfig, {
      usingObservableFrom: rawConfig.usingObservableFrom
    });
    this._operationsToInclude = [];
    (0, import_auto_bind.default)(this);
    if (this.config.usingObservableFrom) {
      this._additionalImports.push(this.config.usingObservableFrom);
    }
    if (this.config.documentMode !== import_visitor_plugin_common.DocumentMode.string) {
    }
  }
  buildOperation(node, documentVariableName, operationType, operationResultType, operationVariablesTypes) {
    if (node.name == null) {
      throw new Error("Plugin 'generic-sdk' cannot generate SDK for unnamed operation.\n\n" + (0, import_graphql2.print)(node));
    } else {
      this._operationsToInclude.push({
        node,
        documentVariableName,
        operationType,
        operationResultType: `{data: ${operationResultType}, variables: ${operationVariablesTypes}, query: string}`,
        operationVariablesTypes
      });
    }
    return null;
  }
  get sdkContent() {
    const usingObservable = !!this.config.usingObservableFrom;
    const allPossibleActions = this._operationsToInclude.map((o) => {
      const optionalVariables = !o.node.variableDefinitions || o.node.variableDefinitions.length === 0 || o.node.variableDefinitions.every((v) => v.type.kind !== import_graphql2.Kind.NON_NULL_TYPE || v.defaultValue);
      const returnType = usingObservable && o.operationType === "Subscription" ? "Observable" : "Promise";
      return `${o.node.name.value}(variables${optionalVariables ? "?" : ""}: ${o.operationVariablesTypes}, options?: C): ${returnType}<${o.operationResultType}> {
    return requester<${o.operationResultType}, ${o.operationVariablesTypes}>(${o.documentVariableName}, variables, options);
  }`;
    }).map((s) => (0, import_visitor_plugin_common.indentMultiline)(s, 2));
    return `export type Requester<C= {}> = <R, V>(doc: ${this.config.documentMode === import_visitor_plugin_common.DocumentMode.string ? "string" : "DocumentNode"}, vars?: V, options?: C) => ${usingObservable ? "Promise<R> & Observable<R>" : "Promise<R>"}
  export function getSdk<C>(requester: Requester<C>) {
    return {
  ${allPossibleActions.join(",\n")}
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;`;
  }
};

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/codegen/sdkPlugin/index.ts
var plugin = (schema, documents, config) => {
  const allAst = (0, import_graphql4.concatAST)(documents.reduce((prev, v) => {
    return [...prev, v.document];
  }, []));
  const allFragments = [
    ...allAst.definitions.filter((d) => d.kind === import_graphql4.Kind.FRAGMENT_DEFINITION).map((fragmentDef) => ({
      node: fragmentDef,
      name: fragmentDef.name.value,
      onType: fragmentDef.typeCondition.name.value,
      isExternal: false
    })),
    ...config.externalFragments || []
  ];
  const visitor = new GenericSdkVisitor(schema, allFragments, config);
  const visitorResult = (0, import_graphql3.visit)(allAst, { leave: visitor });
  return {
    prepend: visitor.getImports(),
    content: [
      visitor.fragments,
      ...visitorResult.definitions.filter((t) => typeof t === "string"),
      visitor.sdkContent
    ].join("\n")
  };
};

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/codegen/index.ts
var import_load = __toModule(require("@graphql-tools/load"));
var import_graphql_file_loader = __toModule(require("@graphql-tools/graphql-file-loader"));
var generateTypes = async (schema, queryPathGlob = process.cwd(), fragDocPath = process.cwd(), options = { noSDK: false }) => {
  logger.info("Generating types...");
  try {
    let docs = [];
    let fragDocs = [];
    try {
      if (!options.noSDK) {
        docs = await (0, import_load.loadDocuments)(queryPathGlob, {
          loaders: [new import_graphql_file_loader.GraphQLFileLoader()]
        });
      }
    } catch (e) {
      let showErrorMessage = true;
      const message = e.message || "";
      if (message.includes("Unable to find any GraphQL type definitions for the following pointers:")) {
        showErrorMessage = false;
      }
      if (showErrorMessage) {
        console.error(e);
      }
    }
    try {
      if (!options.noSDK) {
        fragDocs = await (0, import_load.loadDocuments)(fragDocPath, {
          loaders: [new import_graphql_file_loader.GraphQLFileLoader()]
        });
      }
    } catch (error) {
      console.error(error);
    }
    const res = await (0, import_core.codegen)({
      filename: process.cwd(),
      schema: (0, import_graphql5.parse)((0, import_graphql5.printSchema)(schema)),
      documents: [...docs, ...fragDocs],
      config: {},
      plugins: [
        { typescript: {} },
        { typescriptOperations: {} },
        {
          typescriptSdk: {
            gqlImport: "tinacms#gql",
            documentNodeImport: "tinacms#DocumentNode"
          }
        },
        { AddGeneratedClient: {} }
      ],
      pluginMap: {
        typescript: {
          plugin: import_typescript.plugin
        },
        typescriptOperations: {
          plugin: import_typescript_operations.plugin
        },
        typescriptSdk: {
          plugin
        },
        AddGeneratedClient
      }
    });
    return res;
  } catch (e) {
    console.error(e);
  }
};

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/query-gen/genTypes.ts
var import_graphql6 = __toModule(require("graphql"));
var import_fs_extra = __toModule(require("fs-extra"));
async function genTypes({ schema }, next, options) {
  const typesPath = process.cwd() + "/.tina/__generated__/types.ts";
  const fragPath = process.cwd() + "/.tina/__generated__/*.{graphql,gql}";
  const queryPathGlob = process.cwd() + "/.tina/queries/**/*.{graphql,gql}";
  const typescriptTypes = await generateTypes(schema, queryPathGlob, fragPath, options);
  await import_fs_extra.default.outputFile(typesPath, `//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
${typescriptTypes}
`);
  logger.info(`Typescript types => ${logText(typesPath)}`);
  const schemaString = await (0, import_graphql6.printSchema)(schema);
  const schemaPath = process.cwd() + "/.tina/__generated__/schema.gql";
  await import_fs_extra.default.outputFile(schemaPath, `# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
${schemaString}
schema {
  query: Query
  mutation: Mutation
}
  `);
  logger.info(`GraphQL types ====> ${logText(schemaPath)}`);
  next();
}

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/start-server/index.ts
var import_child_process = __toModule(require("child_process"));
var import_path3 = __toModule(require("path"));
var import_graphql7 = __toModule(require("@tinacms/graphql"));
var import_datalayer2 = __toModule(require("@tinacms/datalayer"));

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/compile/index.ts
var import_fast_glob = __toModule(require("fast-glob"));
var import_normalize_path = __toModule(require("normalize-path"));
var import_path2 = __toModule(require("path"));
var import_fs_extra2 = __toModule(require("fs-extra"));
var ts = __toModule(require("typescript"));

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/compile/defaultSchema.ts
var defaultSchema = `
import { defineSchema } from "@tinacms/cli";

export default defineSchema({
  collections: [
    {
      label: "Blog Posts",
      name: "posts",
      path: "content/posts",
      fields: [
        {
          type: "string",
          label: "Title",
          name: "title",
        },
        {
          type: "string",
          label: "Blog Post Body",
          name: "body",
          isBody: true,
          ui: {
            component: "textarea"
          },
        },
      ],
    },
  ],
});
`;

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/compile/index.ts
var tinaPath = import_path2.default.join(process.cwd(), ".tina");
var tinaGeneratedPath = import_path2.default.join(tinaPath, "__generated__");
var tinaTempPath = import_path2.default.join(tinaGeneratedPath, "temp");
var tinaConfigPath = import_path2.default.join(tinaGeneratedPath, "config");
var resetGeneratedFolder = async () => {
  try {
    await import_fs_extra2.default.rmdir(tinaGeneratedPath, {
      recursive: true
    });
  } catch (e) {
    console.log(e);
  }
  await import_fs_extra2.default.mkdir(tinaGeneratedPath);
  await import_fs_extra2.default.outputFile(import_path2.default.join(tinaGeneratedPath, ".gitignore"), "db");
};
var compile = async (_ctx, _next) => {
  logger.info(logText("Compiling..."));
  if (!import_fs_extra2.default.existsSync(tinaPath) || !import_fs_extra2.default.existsSync(import_path2.default.join(tinaPath, "schema.ts"))) {
    logger.info(dangerText(`
      .tina/schema.ts not found, Creating one for you...
      See Documentation: https://tina.io/docs/tina-cloud/cli/#getting-started"
      `));
    const file = import_path2.default.join(tinaPath, "schema.ts");
    await import_fs_extra2.default.ensureFile(file);
    await import_fs_extra2.default.writeFile(file, defaultSchema);
  }
  await transpile2(tinaPath, tinaTempPath);
  Object.keys(require.cache).map((key) => {
    if (key.startsWith(tinaTempPath)) {
      delete require.cache[require.resolve(key)];
    }
  });
  const schemaFunc = require(import_path2.default.join(tinaTempPath, "schema.js"));
  const schemaObject = schemaFunc.default;
  await import_fs_extra2.default.outputFile(import_path2.default.join(tinaConfigPath, "schema.json"), JSON.stringify(schemaObject, null, 2));
  await import_fs_extra2.default.remove(tinaTempPath);
};
var transpile2 = async (projectDir, tempDir) => {
  logger.info(logText("Transpiling..."));
  const posixProjectDir = (0, import_normalize_path.default)(projectDir);
  const posixTempDir = (0, import_normalize_path.default)(tempDir);
  return Promise.all(import_fast_glob.default.sync(import_path2.default.join(projectDir, "**", "*.ts").replace(/\\/g, "/"), {
    ignore: [
      import_path2.default.join(projectDir, "__generated__", "**", "*.ts").replace(/\\/g, "/")
    ]
  }).map(async function(file) {
    const fullPath = import_path2.default.resolve(file);
    const contents = await import_fs_extra2.default.readFileSync(fullPath).toString();
    const newContent = ts.transpile(contents);
    const newPath = file.replace(posixProjectDir, posixTempDir).replace(".ts", ".js");
    await import_fs_extra2.default.outputFile(newPath, newContent);
    return true;
  }));
};
var defineSchema = (config) => {
  return config;
};

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/start-server/index.ts
var import_chokidar = __toModule(require("chokidar"));
var gqlPackageFile = require.resolve("@tinacms/graphql");
async function startServer(_ctx, _next, { port = 4001, command, noWatch, experimentalData, noSDK }) {
  const rootPath2 = process.cwd();
  if (!process.env.CI && !noWatch) {
    await resetGeneratedFolder();
  }
  const bridge = new import_datalayer2.FilesystemBridge(rootPath2);
  const store = experimentalData ? new import_datalayer2.LevelStore(rootPath2) : new import_datalayer2.FilesystemStore({ rootPath: rootPath2 });
  const shouldBuild = bridge.supportsBuilding();
  const database = await (0, import_graphql7.createDatabase)({ store, bridge });
  const startSubprocess = () => {
    if (typeof command === "string") {
      const commands = command.split(" ");
      const firstCommand = commands[0];
      const args = commands.slice(1) || [];
      const ps = import_child_process.default.spawn(firstCommand, args, {
        stdio: "inherit",
        shell: true
      });
      ps.on("error", (code) => {
        logger.error(dangerText(`An error has occurred in the Next.js child process. Error message below`));
        logger.error(`name: ${code.name}
message: ${code.message}

stack: ${code.stack || "No stack was provided"}`);
      });
      ps.on("close", (code) => {
        logger.info(`child process exited with code ${code}`);
        process.exit(code);
      });
    }
  };
  let ready = false;
  if (!noWatch && !process.env.CI) {
    import_chokidar.default.watch([`${rootPath2}/**/*.{ts,gql,graphql}`], {
      ignored: `${import_path3.default.resolve(rootPath2)}/.tina/__generated__/**/*`
    }).on("ready", async () => {
      console.log("Generating Tina config");
      try {
        if (shouldBuild) {
          await build(noSDK);
        }
        ready = true;
        startSubprocess();
      } catch (e) {
        logger.info(dangerText(`${e.message}`));
        console.log(e);
        process.exit(0);
      }
    }).on("all", async () => {
      if (ready) {
        logger.info("Tina change detected, regenerating config");
        try {
          if (shouldBuild) {
            await build(noSDK);
          }
        } catch (e) {
          logger.info(dangerText("Compilation failed with errors. Server has not been restarted.") + ` see error below 
 ${e.message}`);
        }
      }
    });
  }
  const build = async (noSDK2) => {
    if (!process.env.CI && !noWatch) {
      await resetGeneratedFolder();
    }
    const bridge2 = new import_datalayer2.FilesystemBridge(rootPath2);
    const store2 = experimentalData ? new import_datalayer2.LevelStore(rootPath2) : new import_datalayer2.FilesystemStore({ rootPath: rootPath2 });
    const database2 = await (0, import_graphql7.createDatabase)({ store: store2, bridge: bridge2 });
    await compile(null, null);
    const schema = await (0, import_graphql7.buildSchema)(rootPath2, database2);
    await genTypes({ schema }, () => {
    }, { noSDK: noSDK2 });
  };
  const state = {
    server: null,
    sockets: []
  };
  let isReady = false;
  const start = async () => {
    const s = (init_server(), server_exports);
    state.server = await s.default(database);
    state.server.listen(port, () => {
      logger.info(`Started Filesystem GraphQL server on port: ${port}`);
      logger.info(`Visit the playground at http://localhost:${port}/altair/`);
    });
    state.server.on("error", function(e) {
      if (e.code === "EADDRINUSE") {
        logger.error(dangerText(`Port 4001 already in use`));
        process.exit();
      }
      throw e;
    });
    state.server.on("connection", (socket) => {
      state.sockets.push(socket);
    });
  };
  const restart = async () => {
    logger.info("Detected change to gql package, restarting...");
    delete require.cache[gqlPackageFile];
    state.sockets.forEach((socket) => {
      if (socket.destroyed === false) {
        socket.destroy();
      }
    });
    state.sockets = [];
    state.server.close(() => {
      logger.info("Server closed");
      start();
    });
  };
  if (!noWatch && !process.env.CI) {
    import_chokidar.default.watch([gqlPackageFile]).on("ready", async () => {
      isReady = true;
      start();
    }).on("all", async () => {
      if (isReady) {
        restart();
      }
    });
  } else {
    if (process.env.CI) {
      logger.info("Detected CI environment, omitting watch commands...");
    }
    start();
    startSubprocess();
  }
}

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/init/index.ts
var import_fs_extra3 = __toModule(require("fs-extra"));
var import_path4 = __toModule(require("path"));
var import_progress = __toModule(require("progress"));
var import_prompts = __toModule(require("prompts"));

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/init/setup-files/index.ts
var adminPage = `import { TinaAdmin } from 'tinacms';
export default TinaAdmin;
`;
var blogPost = `---
title: Vote For Pedro
---
# Welcome to the blog.

> To edit this site head over to the [\`/admin\`](/admin) route. Then click the pencil icon in the bottom lefthand corner to start editing \u{1F999}. 

# Dixi gaude Arethusa

## Oscula mihi

Lorem markdownum numerabilis armentorum platanus, cultros coniunx sibi per
silvas, nostris clausit sequemur diverso scopulosque. Fecit tum alta sed non
falcato murmura, geminas donata Amyntore, quoque Nox. Invitam inquit, modo
nocte; ut ignis faciemque manes in imagine sinistra ut mucrone non ramos
sepulcro supplex. Crescentesque populos motura, fit cumque. Verumque est; retro
sibi tristia bracchia Aetola telae caruerunt et.


## Mutato fefellimus sit demisit aut alterius sollicito

Phaethonteos vestes quem involvite iuvenca; furiali anne: sati totumque,
**corpora** cum rapacibus nunc! Nervis repetatne, miserabile doleas, deprensum
hunc, fluctus Threicio, ad urbes, magicaeque, quid. Per credensque series adicis
poteram [quidem](#)! Iam uni mensas victrix
vittas ut flumina Satyri adulter; bellum iacet domitae repercusso truncis urnis
mille rigidi sub taurum.


`;
var nextPostPage = () => `// THIS FILE HAS BEEN GENERATED WITH THE TINA CLI.
  // This is a demo file once you have tina setup feel free to delete this file
  
  import { staticRequest, gql } from "tinacms";
  import Head from "next/head";
  import { createGlobalStyle } from "styled-components";
  
  // Styles for markdown
  const GlobalStyle = createGlobalStyle\`
  h1,h2,h3,h4,h5 {
    margin-bottom: 1.5rem;
    margin-top: 1.5rem;
  }
  blockquote {
    background-color: rgb(209,250,229);
  }
  h1 {
    font-size: 45px;
  }
  h2 {
    font-size: 35px;
  }
  h3 {
    font-size: 25px;
  }
  h4 {
    font-size: 22px;
  }
  ul {
    padding-left: 0;
  }
  li {
    list-style-type: none;
  }
  a {
    font-weight: bold;
    color: rgb(59,130,246);
    text-decoration: underline;
  }
  \`;
  const defaultMarked = (markdown) => markdown;
  // Use the props returned by get static props (this can be deleted when the edit provider and tina-wrapper are moved to _app.js)
  const BlogPage = (props) => {
    return (
      <>
        <Head>
          {/* Tailwind CDN */}
          <link
            rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.7/tailwind.min.css"
            integrity="sha512-y6ZMKFUQrn+UUEVoqYe8ApScqbjuhjqzTuwUMEGMDuhS2niI8KA3vhH2LenreqJXQS+iIXVTRL2iaNfJbDNA1Q=="
            crossOrigin="anonymous"
            referrerPolicy="no-referrer"
          />
          {/* Marked CDN */}
          <script
            type="text/javascript"
            crossOrigin="anonymous"
            src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.0.0/marked.min.js"
          />
        </Head>
        <div>
          <div
            style={{
              textAlign: "center",
            }}
          >
            <h1 className="text-3xl m-8 text-center leading-8 font-extrabold tracking-tight text-gray-900 sm:text-4xl">
              {props.data.getPostsDocument.data.title}
            </h1>
            {/* Convert markdown to html in the browser only */}
            {typeof window !== "undefined" && (
              <ContentSection
                content={window.marked.parse(props.data.getPostsDocument.data.body)}
              ></ContentSection>
            )}
          </div>
          <div className="bg-green-100 text-center">
            Lost and looking for a place to start?
            <a
              href="https://tina.io/guides/tina-cloud/getting-started/overview/"
              className="text-blue-500 underline"
            >
              {" "}
              Check out this guide
            </a>{" "}
            to see how add TinaCMS to an existing Next.js site.
          </div>
        </div>
      </>
    );
  };
  
  export const getStaticProps = async ({ params }) => {
    const query = gql\`
      query BlogPostQuery($relativePath: String!) {
        getPostsDocument(relativePath: $relativePath) {
          data {
           title
            body
          }
        }
      }
    \`
    const variables = { relativePath: \`\${params.filename}.md\` }
    let data = {}
    try {
      data = await staticRequest({
        query,
        variables,
      })
    } catch {
      // swallow errors related to document creation
    }

    return {
      props: {
        query,
        variables,
        data,
        //myOtherProp: 'some-other-data',
      },
    }
  };
  
  export const getStaticPaths = async () => {
    const postsListData = (await staticRequest({
      query: gql\`
        query GetPostsList {
          getPostsList {
            edges {
              node {
                sys {
                  filename
                }
              }
            }
          }
        }
      \`,
    }));
  
    return {
      paths: postsListData.getPostsList.edges.map((post) => ({
        params: { filename: post.node.sys.filename },
      })),
      fallback: false,
    };
  };
  
  export default BlogPage;
  
  const ContentSection = ({ content }) => {
    return (
      <div className="relative py-16 bg-white overflow-hidden">
        <div className="hidden lg:block lg:absolute lg:inset-y-0 lg:h-full lg:w-full">
          <div
            className="relative h-full text-lg max-w-prose mx-auto"
            aria-hidden="true"
          >
            <svg
              className="absolute top-12 left-full transform translate-x-32"
              width={404}
              height={384}
              fill="none"
              viewBox="0 0 404 384"
            >
              <defs>
                <pattern
                  id="74b3fd99-0a6f-4271-bef2-e80eeafdf357"
                  x={0}
                  y={0}
                  width={20}
                  height={20}
                  patternUnits="userSpaceOnUse"
                >
                  <rect
                    x={0}
                    y={0}
                    width={4}
                    height={4}
                    className="text-gray-200"
                    fill="currentColor"
                  />
                </pattern>
              </defs>
              <rect
                width={404}
                height={384}
                fill="url(#74b3fd99-0a6f-4271-bef2-e80eeafdf357)"
              />
            </svg>
            <svg
              className="absolute top-1/2 right-full transform -translate-y-1/2 -translate-x-32"
              width={404}
              height={384}
              fill="none"
              viewBox="0 0 404 384"
            >
              <defs>
                <pattern
                  id="f210dbf6-a58d-4871-961e-36d5016a0f49"
                  x={0}
                  y={0}
                  width={20}
                  height={20}
                  patternUnits="userSpaceOnUse"
                >
                  <rect
                    x={0}
                    y={0}
                    width={4}
                    height={4}
                    className="text-gray-200"
                    fill="currentColor"
                  />
                </pattern>
              </defs>
              <rect
                width={404}
                height={384}
                fill="url(#f210dbf6-a58d-4871-961e-36d5016a0f49)"
              />
            </svg>
            <svg
              className="absolute bottom-12 left-full transform translate-x-32"
              width={404}
              height={384}
              fill="none"
              viewBox="0 0 404 384"
            >
              <defs>
                <pattern
                  id="d3eb07ae-5182-43e6-857d-35c643af9034"
                  x={0}
                  y={0}
                  width={20}
                  height={20}
                  patternUnits="userSpaceOnUse"
                >
                  <rect
                    x={0}
                    y={0}
                    width={4}
                    height={4}
                    className="text-gray-200"
                    fill="currentColor"
                  />
                </pattern>
              </defs>
              <rect
                width={404}
                height={384}
                fill="url(#d3eb07ae-5182-43e6-857d-35c643af9034)"
              />
            </svg>
          </div>
        </div>
        <div className="relative px-4 sm:px-6 lg:px-8">
          <div className="text-lg max-w-prose mx-auto">
            <div dangerouslySetInnerHTML={{ __html: content }}></div>
            <GlobalStyle />
          </div>
        </div>
      </div>
    );
  };
  
`;
var AppJsContent = (extraImports) => `import dynamic from 'next/dynamic'
import { TinaEditProvider } from 'tinacms/dist/edit-state'
const TinaCMS = dynamic(() => import('tinacms'), { ssr: false })
${extraImports || ""}

const App = ({ Component, pageProps }) => {
  return (
    <>
      <TinaEditProvider
        editMode={
          <TinaCMS
            clientId={process.env.NEXT_PUBLIC_TINA_CLIENT_ID}
            branch={process.env.NEXT_PUBLIC_EDIT_BRANCH}
            isLocalClient={Boolean(
              Number(process.env.NEXT_PUBLIC_USE_LOCAL_CLIENT ?? true)
            )}
            {...pageProps}
          >
            {(livePageProps) => <Component {...livePageProps} />}
          </TinaCMS>
        }
      >
        <Component {...pageProps} />
      </TinaEditProvider>
    </>
  )
}

export default App
`;

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/init/index.ts
var import_chalk2 = __toModule(require("chalk"));
function execShellCommand(cmd) {
  const exec = require("child_process").exec;
  return new Promise((resolve2, reject) => {
    exec(cmd, (error, stdout, stderr) => {
      if (error) {
        console.warn(error);
      }
      resolve2(stdout ? stdout : stderr);
    });
  });
}
async function initTina(ctx, next, options) {
  logger.info(successText("Setting up Tina..."));
  next();
}
async function installDeps(ctx, next, options) {
  const bar = new import_progress.default("Installing Tina packages. This might take a moment... :prog", 2);
  const deps = ["tinacms", "styled-components", "@tinacms/cli"];
  bar.tick({
    prog: ""
  });
  const installCMD = `yarn add ${deps.join(" ")}`;
  await execShellCommand(installCMD);
  bar.tick({
    prog: "\u2705"
  });
  logger.level = "fatal";
  next();
}
var baseDir = process.cwd();
var TinaWrapperPathDir = import_path4.default.join(baseDir, "components");
var TinaWrapperPath = import_path4.default.join(TinaWrapperPathDir, "tina-wrapper.tsx");
var blogContentPath = import_path4.default.join(baseDir, "content", "posts");
var blogPostPath = import_path4.default.join(blogContentPath, "HelloWorld.md");
async function tinaSetup(ctx, next, options) {
  const useingSrc = import_fs_extra3.default.pathExistsSync(import_path4.default.join(baseDir, "src"));
  if (!import_fs_extra3.default.pathExistsSync(blogPostPath)) {
    logger.info(logText("Adding a content folder..."));
    import_fs_extra3.default.mkdirpSync(blogContentPath);
    import_fs_extra3.default.writeFileSync(blogPostPath, blogPost);
  }
  logger.level = "info";
  const pagesPath = import_path4.default.join(baseDir, useingSrc ? "src" : "", "pages");
  const appPath = import_path4.default.join(pagesPath, "_app.js");
  const appPathTS = import_path4.default.join(pagesPath, "_app.tsx");
  const appExtension = import_fs_extra3.default.existsSync(appPath) ? ".js" : ".tsx";
  let wrapper = false;
  if (!import_fs_extra3.default.pathExistsSync(appPath) && !import_fs_extra3.default.pathExistsSync(appPathTS)) {
    logger.info(logText("Adding _app.js ... \u2705"));
    import_fs_extra3.default.writeFileSync(appPath, AppJsContent());
  } else {
    const override = await (0, import_prompts.default)({
      name: "res",
      type: "confirm",
      message: `do you want us to ${import_chalk2.default.bold(`override`)} your _app${appExtension}?`
    });
    if (override.res) {
      logger.info(logText(`Adding _app${appExtension} ... \u2705`));
      const appPathWithExtension = import_path4.default.join(pagesPath, `_app${appExtension}`);
      const fileContent = import_fs_extra3.default.pathExistsSync(appPath) ? (0, import_fs_extra3.readFileSync)(appPath) : (0, import_fs_extra3.readFileSync)(appPathTS);
      const matches = [
        ...fileContent.toString().matchAll(/^.*import.*\.css("|').*$/gm)
      ];
      const primaryMatches = matches.map((x) => x[0]);
      import_fs_extra3.default.writeFileSync(appPathWithExtension, AppJsContent(primaryMatches.join("\n")));
    } else {
      wrapper = true;
      logger.info(dangerText(`Heads up, to enable live-editing you'll need to wrap your page or site in Tina:
`, warnText(AppJsContent())));
    }
  }
  const tinaBlogPagePath = import_path4.default.join(pagesPath, "demo", "blog");
  const tinaBlogPagePathFile = import_path4.default.join(tinaBlogPagePath, "[filename].js");
  if (!import_fs_extra3.default.pathExistsSync(tinaBlogPagePathFile)) {
    import_fs_extra3.default.mkdirpSync(tinaBlogPagePath);
    import_fs_extra3.default.writeFileSync(tinaBlogPagePathFile, nextPostPage());
  }
  logger.info("Adding a content folder... \u2705");
  const packagePath = import_path4.default.join(baseDir, "package.json");
  const pack = JSON.parse((0, import_fs_extra3.readFileSync)(packagePath).toString());
  const oldScripts = pack.scripts || {};
  const newPack = JSON.stringify({
    ...pack,
    scripts: {
      ...oldScripts,
      "tina-dev": 'yarn tinacms server:start -c "next dev"',
      "tina-build": 'yarn tinacms server:start -c "next build"',
      "tina-start": 'yarn tinacms server:start -c "next start"'
    }
  }, null, 2);
  (0, import_fs_extra3.writeFileSync)(packagePath, newPack);
  const adminPath = import_path4.default.join(pagesPath, "admin", "[[...tina]].js");
  if (import_fs_extra3.default.pathExistsSync(import_path4.default.join(pagesPath, "admin"))) {
    logger.warn(`Unable to add /pages/admin/[[...tina]].js, this path already exists.
	Learn more about toggling edit-mode at https://tina.io/docs/tinacms-context/#manually-toggling-edit-mode`);
    return next();
  }
  (0, import_fs_extra3.outputFileSync)(adminPath, adminPage);
  next();
}
async function successMessage(ctx, next, options) {
  const baseDir2 = process.cwd();
  logger.info(`Tina setup ${import_chalk2.default.underline.green("done")}  \u2705
	 Start your dev server with ${successText(`yarn tina-dev`)} and go to http://localhost:3000/demo/blog/HelloWorld to ${successText("check it out the page that was created for you")}
Enjoy Tina \u{1F999} !
`);
  next();
}

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/audit/index.ts
var import_graphql10 = __toModule(require("@tinacms/graphql"));
var import_datalayer3 = __toModule(require("@tinacms/datalayer"));

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/audit/audit.ts
var import_graphql8 = __toModule(require("@tinacms/graphql"));
var import_path5 = __toModule(require("path"));
var import_graphql9 = __toModule(require("@tinacms/graphql"));
var import_chalk3 = __toModule(require("chalk"));
var auditCollection = async (args) => {
  let warning = false;
  const { collection, database, rootPath: rootPath2 } = args;
  logger.info(`Checking collection ${collection.name}`);
  const query = `query {
        getCollection(collection: "${collection.name}") {
          format
          documents {
            edges {
              node {
                ...on Document {
                  sys {
                    extension
                    path
                  }
                }
              }
            }
          }
        }
      }
      `;
  const result = await (0, import_graphql8.resolve)({
    database,
    query,
    variables: {}
  });
  const format = result.data.getCollection.format;
  const docs = result.data.getCollection.documents.edges;
  docs.forEach((x) => {
    const node = x.node;
    if (node.sys.extension.replace(".", "") !== format) {
      warning = true;
      logger.warn(import_chalk3.default.yellowBright(`WARNING: there is a file with extension \`${node.sys.extension}\` but in your schema it is defined to be \`.${format}\`

location: ${import_path5.default.join(rootPath2, node.sys.path)}`));
    }
  });
  return warning;
};
var auditDocuments = async (args) => {
  const { collection, database, rootPath: rootPath2, useDefaultValues } = args;
  const query = `query {
        getCollection(collection: "${collection.name}") {
          format
          slug
          documents {
            edges {
              node {
                ...on Document {
                  sys {
                    extension
                    path
                    relativePath
                  }
                }
              }
            }
          }
        }
      }
      `;
  const result = await (0, import_graphql8.resolve)({
    database,
    query,
    variables: {}
  });
  let error = false;
  const documents = result.data.getCollection.documents.edges;
  for (let i = 0; i < documents.length; i++) {
    const node = documents[i].node;
    const fullPath = import_path5.default.join(rootPath2, node.sys.path);
    logger.info(`Checking document: ${fullPath}`);
    const documentQuery = `query {
        getDocument(collection: "${collection.name}", relativePath: "${node.sys.relativePath}") {
          __typename
          ...on Document {
            values
          }
        }
      }`;
    const docResult = await (0, import_graphql8.resolve)({
      database,
      query: documentQuery,
      variables: {}
    });
    const topLevelDefaults = {};
    if (useDefaultValues && typeof collection.fields !== "string") {
      collection.fields.filter((x) => !x.list).forEach((x) => {
        const value = x.ui;
        if (typeof value !== "undefined") {
          topLevelDefaults[x.name] = value.defaultValue;
        }
      });
    }
    const params = transformDocumentIntoMutationRequestPayload(docResult.data.getDocument.values, {
      includeCollection: true,
      includeTemplate: typeof collection.templates !== "undefined"
    }, topLevelDefaults);
    const mutation = `mutation($collection: String!, $relativePath: String!, $params: DocumentMutation!) {
        updateDocument(
          collection: $collection,
          relativePath: $relativePath,
          params: $params
        ){__typename}
      }`;
    const mutationRes = await (0, import_graphql8.resolve)({
      database,
      query: mutation,
      variables: {
        params,
        collection: collection.name,
        relativePath: node.sys.relativePath
      },
      silenceErrors: true
    });
    if (mutationRes.errors) {
      mutationRes.errors.forEach((err) => {
        error = true;
        logger.error(import_chalk3.default.red(err.message));
      });
    }
  }
  return error;
};
var transformDocumentIntoMutationRequestPayload = (document, instructions, defaults) => {
  const { _collection, __typename, _template, ...rest } = document;
  const params = transformParams(rest);
  const paramsWithTemplate = instructions.includeTemplate ? { [_template]: params } : params;
  return instructions.includeCollection ? { [_collection]: { ...defaults, ...filterObject(paramsWithTemplate) } } : { ...defaults, ...filterObject(paramsWithTemplate) };
};
var transformParams = (data) => {
  if (["string", "number", "boolean"].includes(typeof data)) {
    return data;
  }
  if (Array.isArray(data)) {
    return data.map((item) => transformParams(item));
  }
  try {
    (0, import_graphql9.assertShape)(data, (yup) => yup.object({ _template: yup.string().required() }));
    const { _template, __typename, ...rest } = data;
    const nested = transformParams(rest);
    return { [_template]: nested };
  } catch (e) {
    if (e.message === "Failed to assertShape - _template is a required field") {
      if (!data) {
        return void 0;
        return [];
      }
      const accum = {};
      Object.entries(data).map(([keyName, value]) => {
        accum[keyName] = transformParams(value);
      });
      return accum;
    } else {
      if (!data) {
        return void 0;
        return [];
      }
      throw e;
    }
  }
};
function filterObject(obj) {
  const ret = {};
  Object.keys(obj).filter((key) => obj[key] !== void 0).forEach((key) => ret[key] = obj[key]);
  return ret;
}

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/audit/index.ts
var import_chalk4 = __toModule(require("chalk"));
var import_prompts2 = __toModule(require("prompts"));
var rootPath = process.cwd();
var audit = async (ctx, next, options) => {
  if (options.clean) {
    logger.info(`You are using the \`--clean\` option. This will modify your content as if a user is submitting a form. Before running this you should have a ${import_chalk4.default.bold("clean git tree")} so unwanted changes can be undone.

`);
    const res = await (0, import_prompts2.default)({
      name: "useClean",
      type: "confirm",
      message: `Do you want to continue?`
    });
    if (!res.useClean) {
      logger.warn(import_chalk4.default.yellowBright("\u26A0\uFE0F Audit not complete"));
      process.exit(0);
    }
  }
  if (options.useDefaultValues && !options.clean) {
    logger.warn(import_chalk4.default.yellowBright("WARNING: using the `--useDefaultValues` without the `--clean` flag has no effect. Please re-run audit and add the `--clean` flag"));
  }
  const bridge = options.clean ? new import_datalayer3.FilesystemBridge(rootPath) : new import_datalayer3.AuditFileSystemBridge(rootPath);
  const store = options.clean ? new import_datalayer3.FilesystemStore({ rootPath }) : new import_datalayer3.AuditFilesystemStore({ rootPath });
  const database = await (0, import_graphql10.createDatabase)({ store, bridge });
  const schema = await database.getSchema();
  const collections = schema.getCollections();
  let warning = false;
  let error = false;
  for (let i = 0; i < collections.length; i++) {
    const collection = collections[i];
    const returnWarning = await auditCollection({
      collection,
      database,
      rootPath,
      useDefaultValues: options.useDefaultValues
    });
    const returnError = await auditDocuments({
      collection,
      database,
      rootPath,
      useDefaultValues: options.useDefaultValues
    });
    warning = warning || returnWarning;
    error = error || returnError;
  }
  ctx.warning = warning;
  ctx.error = error;
  next();
};
var printFinalMessage = async (ctx, next, _options) => {
  if (ctx.error) {
    logger.error(import_chalk4.default.redBright(`\u203C\uFE0F Audit ${import_chalk4.default.bold("failed")} with errors`));
  } else if (ctx.warning) {
    logger.warn(import_chalk4.default.yellowBright("\u26A0\uFE0F Audit passed with warnings"));
  } else {
    logger.info(import_chalk4.default.greenBright("\u2705 Audit passed"));
  }
  next();
};

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/cmds/baseCmds.ts
var import_chalk5 = __toModule(require("chalk"));
var CMD_GEN_TYPES = "schema:types";
var CMD_START_SERVER = "server:start";
var CMD_COMPILE_MODELS = "schema:compile";
var INIT = "init";
var AUDIT = "audit";
var startServerPortOption = {
  name: "--port <port>",
  description: "Specify a port to run the server on. (default 4001)"
};
var experimentalDatalayer = {
  name: "--experimentalData",
  description: "Build the server with additional data querying capabilities"
};
var subCommand = {
  name: "-c, --command <command>",
  description: "The sub-command to run"
};
var noWatchOption = {
  name: "--noWatch",
  description: "Don't regenerate config on file changes"
};
var noSDKCodegenOption = {
  name: "--noSDK",
  description: "Don't generate the generated client SDK"
};
var cleanOption = {
  name: "--clean",
  description: "Submit gql mutation to all files to git rid of any data that is not defined in the `schema.ts`"
};
var useDefaultValuesOption = {
  name: "--useDefaultValues",
  description: "Adds default values to the graphQL mutation so that default values can be filled into existing documents (useful for adding a field with `required: true`)"
};
var baseCmds = [
  {
    command: CMD_START_SERVER,
    description: "Start Filesystem Graphql Server",
    options: [
      startServerPortOption,
      subCommand,
      experimentalDatalayer,
      noWatchOption,
      noSDKCodegenOption
    ],
    action: (options) => chain([startServer], options)
  },
  {
    command: CMD_COMPILE_MODELS,
    description: "Compile schema into static files for the server",
    options: [experimentalDatalayer],
    action: (options) => chain([compile], options)
  },
  {
    command: CMD_GEN_TYPES,
    description: "Generate a GraphQL query for your site's schema, (and optionally Typescript types)",
    options: [experimentalDatalayer, noSDKCodegenOption],
    action: (options) => chain([attachSchema, genTypes], options)
  },
  {
    command: INIT,
    options: [experimentalDatalayer],
    description: "Add Tina Cloud to an existing project",
    action: (options) => chain([
      initTina,
      installDeps,
      async (_ctx, next) => {
        await compile(_ctx, next);
        next();
      },
      attachSchema,
      genTypes,
      tinaSetup,
      successMessage
    ], options)
  },
  {
    options: [cleanOption, useDefaultValuesOption],
    command: AUDIT,
    description: "Audit your schema and the files to check for errors",
    action: (options) => chain([
      async (_ctx, next) => {
        logger.level = "error";
        next();
      },
      async (_ctx, next) => {
        await compile(_ctx, next);
        next();
      },
      attachSchema,
      genTypes,
      async (_ctx, next) => {
        logger.level = "info";
        logger.info(import_chalk5.default.hex("#eb6337").bgWhite("Welcome to tina audit \u{1F999}"));
        next();
      },
      audit,
      printFinalMessage
    ], options)
  }
];

// pnp:/Users/jeffsee/code/tinacms/packages/@tinacms/cli/src/index.ts
var program = new commander.Command(name);
var registerCommands = (commands, noHelp = false) => {
  commands.forEach((command, i) => {
    let newCmd = program.command(command.command, { noHelp }).description(command.description).action((...args) => {
      logger.info("");
      command.action(...args);
    });
    if (command.alias) {
      newCmd = newCmd.alias(command.alias);
    }
    newCmd.on("--help", function() {
      if (command.examples) {
        logger.info(`
Examples:
  ${command.examples}`);
      }
      if (command.subCommands) {
        logger.info("\nCommands:");
        const optionTag = " [options]";
        command.subCommands.forEach((subcommand, i2) => {
          const commandStr = `${subcommand.command}${(subcommand.options || []).length ? optionTag : ""}`;
          const padLength = Math.max(...command.subCommands.map((sub) => sub.command.length)) + optionTag.length;
          logger.info(`${commandStr.padEnd(padLength)} ${subcommand.description}`);
        });
      }
      logger.info("");
    });
    (command.options || []).forEach((option) => {
      newCmd.option(option.name, option.description);
    });
    if (command.subCommands) {
      registerCommands(command.subCommands, true);
    }
  });
};
async function init(args) {
  program.version(version);
  const commands = [...baseCmds];
  registerCommands(commands);
  program.usage("command [options]");
  program.on("command:*", function() {
    logger.error("Invalid command: %s\nSee --help for a list of available commands.", args.join(" "));
    process.exit(1);
  });
  program.on("--help", function() {
    logger.info(logText(`
You can get help on any command with "-h" or "--help".
e.g: "tinacms server:start --help"
    `));
  });
  if (!process.argv.slice(2).length) {
    program.help();
  }
  program.parse(args);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  defineSchema,
  init
});
