import * as React from 'react';
const __reactCreateElement__ = React.createElement;
import * as ReactDOM from 'react-dom';
export const PORTALS = {};

const getContainer = container => typeof document !== 'undefined' && document.querySelectorAll(container);

function _ref(children, {
  provider,
  value
}) {
  return __reactCreateElement__(provider, {
    value
  }, children);
}

const Portalize = ({
  container = '#portals',
  server = true,
  providers,
  children
}) => {
  const [nodes, setNodes] = React.useState(getContainer(container));
  React.useEffect(() => {
    setNodes(getContainer(container));
  }, [container]);

  if (nodes === false) {
    // this branch only renders on the server
    if (server) {
      if (providers !== void 0 && providers.length > 0) {
        children = providers.reduceRight(_ref, children);
      }

      if (children) PORTALS[container] = children;
    }
  } else if (nodes.length > 0) {
    const portals = [];

    for (let i = 0; i < nodes.length; i++) portals.push( /*#__PURE__*/ReactDOM.createPortal(children, nodes[i]));

    return /*#__PURE__*/__reactCreateElement__(React.Fragment, null, portals);
  }

  return null;
};

export default Portalize;