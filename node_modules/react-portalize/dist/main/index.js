'use strict'

exports.__esModule = true
exports.default = exports.PORTALS = void 0

var React = /*#__PURE__*/ _interopRequireWildcard(
  /*#__PURE__*/ require('react')
)

var ReactDOM = /*#__PURE__*/ _interopRequireWildcard(
  /*#__PURE__*/ require('react-dom')
)

function _getRequireWildcardCache() {
  if (typeof WeakMap !== 'function') return null
  var cache = new WeakMap()
  _getRequireWildcardCache = function () {
    return cache
  }
  return cache
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj
  }
  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {
    return {default: obj}
  }
  var cache = _getRequireWildcardCache()
  if (cache && cache.has(obj)) {
    return cache.get(obj)
  }
  var newObj = {}
  var hasPropertyDescriptor =
    Object.defineProperty && Object.getOwnPropertyDescriptor
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor
        ? Object.getOwnPropertyDescriptor(obj, key)
        : null
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc)
      } else {
        newObj[key] = obj[key]
      }
    }
  }
  newObj.default = obj
  if (cache) {
    cache.set(obj, newObj)
  }
  return newObj
}

const __reactCreateElement__ = React.createElement
const PORTALS = {}
exports.PORTALS = PORTALS

const getContainer = (container) =>
  typeof document !== 'undefined' && document.querySelectorAll(container)

function _ref(children, {provider, value}) {
  return __reactCreateElement__(
    provider,
    {
      value,
    },
    children
  )
}

const Portalize = ({
  container = '#portals',
  server = true,
  providers,
  children,
}) => {
  const [nodes, setNodes] = React.useState(getContainer(container))
  React.useEffect(() => {
    setNodes(getContainer(container))
  }, [container])

  if (nodes === false) {
    // this branch only renders on the server
    if (server) {
      if (providers !== void 0 && providers.length > 0) {
        children = providers.reduceRight(_ref, children)
      }

      if (children) PORTALS[container] = children
    }
  } else if (nodes.length > 0) {
    const portals = []

    for (let i = 0; i < nodes.length; i++)
      portals.push(/*#__PURE__*/ ReactDOM.createPortal(children, nodes[i]))

    return /*#__PURE__*/ __reactCreateElement__(React.Fragment, null, portals)
  }

  return null
}

var _default = Portalize
exports.default = _default
