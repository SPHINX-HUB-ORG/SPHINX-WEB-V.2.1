import { isInterfaceType, isNonNullType, } from 'graphql';
import { safeChangeForField } from '../../utils/graphql.js';
import { isDeprecated } from '../../utils/is-deprecated.js';
import { ChangeType, CriticalityLevel } from './change.js';
export function fieldRemoved(type, field) {
    const entity = isInterfaceType(type) ? 'interface' : 'object type';
    return {
        criticality: {
            level: CriticalityLevel.Breaking,
            reason: field.deprecationReason
                ? `Removing a deprecated field is a breaking change. Before removing it, you may want to look at the field's usage to see the impact of removing the field.`
                : `Removing a field is a breaking change. It is preferable to deprecate the field before removing it.`,
        },
        type: ChangeType.FieldRemoved,
        message: `Field '${field.name}' ${isDeprecated(field) ? '(deprecated) ' : ''}was removed from ${entity} '${type.name}'`,
        path: [type.name, field.name].join('.'),
    };
}
export function fieldAdded(type, field) {
    const entity = isInterfaceType(type) ? 'interface' : 'object type';
    return {
        criticality: {
            level: CriticalityLevel.NonBreaking,
        },
        type: ChangeType.FieldAdded,
        message: `Field '${field.name}' was added to ${entity} '${type.name}'`,
        path: [type.name, field.name].join('.'),
    };
}
export function fieldDescriptionChanged(type, oldField, newField) {
    return {
        criticality: {
            level: CriticalityLevel.NonBreaking,
        },
        type: ChangeType.FieldDescriptionChanged,
        message: `Field '${type.name}.${oldField.name}' description changed from '${oldField.description}' to '${newField.description}'`,
        path: [type.name, oldField.name].join('.'),
    };
}
export function fieldDescriptionAdded(type, field) {
    return {
        criticality: {
            level: CriticalityLevel.NonBreaking,
        },
        type: ChangeType.FieldDescriptionAdded,
        message: `Field '${type.name}.${field.name}' has description '${field.description}'`,
        path: [type.name, field.name].join('.'),
    };
}
export function fieldDescriptionRemoved(type, field) {
    return {
        criticality: {
            level: CriticalityLevel.NonBreaking,
        },
        type: ChangeType.FieldDescriptionRemoved,
        message: `Description was removed from field '${type.name}.${field.name}'`,
        path: [type.name, field.name].join('.'),
    };
}
export function fieldDeprecationAdded(type, field) {
    return {
        criticality: {
            level: CriticalityLevel.NonBreaking,
        },
        type: ChangeType.FieldDeprecationAdded,
        message: `Field '${type.name}.${field.name}' is deprecated`,
        path: [type.name, field.name].join('.'),
    };
}
export function fieldDeprecationRemoved(type, field) {
    return {
        criticality: {
            level: CriticalityLevel.Dangerous,
        },
        type: ChangeType.FieldDeprecationRemoved,
        message: `Field '${type.name}.${field.name}' is no longer deprecated`,
        path: [type.name, field.name].join('.'),
    };
}
export function fieldDeprecationReasonChanged(type, oldField, newField) {
    return {
        criticality: {
            level: CriticalityLevel.NonBreaking,
        },
        type: ChangeType.FieldDeprecationReasonChanged,
        message: `Deprecation reason on field '${type.name}.${newField.name}' has changed from '${oldField.deprecationReason}' to '${newField.deprecationReason}'`,
        path: [type.name, oldField.name].join('.'),
    };
}
export function fieldDeprecationReasonAdded(type, field) {
    return {
        criticality: {
            level: CriticalityLevel.NonBreaking,
        },
        type: ChangeType.FieldDeprecationReasonAdded,
        message: `Field '${type.name}.${field.name}' has deprecation reason '${field.deprecationReason}'`,
        path: [type.name, field.name].join('.'),
    };
}
export function fieldDeprecationReasonRemoved(type, field) {
    return {
        criticality: {
            level: CriticalityLevel.NonBreaking,
        },
        type: ChangeType.FieldDeprecationReasonRemoved,
        message: `Deprecation reason was removed from field '${type.name}.${field.name}'`,
        path: [type.name, field.name].join('.'),
    };
}
export function fieldTypeChanged(type, oldField, newField) {
    return {
        criticality: {
            level: safeChangeForField(oldField.type, newField.type)
                ? CriticalityLevel.NonBreaking
                : CriticalityLevel.Breaking,
        },
        type: ChangeType.FieldTypeChanged,
        message: `Field '${type}.${oldField.name}' changed type from '${oldField.type}' to '${newField.type}'`,
        path: [type.name, oldField.name].join('.'),
    };
}
export function fieldArgumentAdded(type, field, arg) {
    const isBreaking = isNonNullType(arg.type) && typeof arg.defaultValue === 'undefined';
    const defaultValueMsg = typeof arg.defaultValue === 'undefined' ? ' ' : ' (with default value) ';
    return {
        criticality: isBreaking
            ? {
                level: CriticalityLevel.Breaking,
                reason: `Adding a required argument to an existing field is a breaking change because it will cause existing uses of this field to error.`,
            }
            : {
                level: CriticalityLevel.Dangerous,
                reason: `Adding a new argument to an existing field may involve a change in resolve function logic that potentially may cause some side effects.`,
            },
        type: ChangeType.FieldArgumentAdded,
        message: `Argument '${arg.name}: ${arg.type}'${defaultValueMsg}added to field '${type.name}.${field.name}'`,
        path: [type.name, field.name, arg.name].join('.'),
    };
}
export function fieldArgumentRemoved(type, field, arg) {
    return {
        criticality: {
            level: CriticalityLevel.Breaking,
            reason: `Removing a field argument is a breaking change because it will cause existing queries that use this argument to error.`,
        },
        type: ChangeType.FieldArgumentRemoved,
        message: `Argument '${arg.name}: ${arg.type}' was removed from field '${type.name}.${field.name}'`,
        path: [type.name, field.name, arg.name].join('.'),
    };
}
