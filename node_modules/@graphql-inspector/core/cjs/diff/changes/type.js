"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typeDescriptionAdded = exports.typeDescriptionRemoved = exports.typeDescriptionChanged = exports.typeKindChanged = exports.typeAdded = exports.typeRemoved = void 0;
const graphql_js_1 = require("../../utils/graphql.js");
const change_js_1 = require("./change.js");
function typeRemoved(type) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Breaking,
        },
        type: change_js_1.ChangeType.TypeRemoved,
        message: `Type '${type.name}' was removed`,
        path: type.name,
    };
}
exports.typeRemoved = typeRemoved;
function typeAdded(type) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.TypeAdded,
        message: `Type '${type.name}' was added`,
        path: type.name,
    };
}
exports.typeAdded = typeAdded;
function typeKindChanged(oldType, newType) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Breaking,
            reason: `Changing the kind of a type is a breaking change because it can cause existing queries to error. For example, turning an object type to a scalar type would break queries that define a selection set for this type.`,
        },
        type: change_js_1.ChangeType.TypeKindChanged,
        message: `'${oldType.name}' kind changed from '${(0, graphql_js_1.getKind)(oldType)}' to '${(0, graphql_js_1.getKind)(newType)}'`,
        path: oldType.name,
    };
}
exports.typeKindChanged = typeKindChanged;
function typeDescriptionChanged(oldType, newType) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.TypeDescriptionChanged,
        message: `Description '${oldType.description}' on type '${oldType.name}' has changed to '${newType.description}'`,
        path: oldType.name,
    };
}
exports.typeDescriptionChanged = typeDescriptionChanged;
function typeDescriptionRemoved(type) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.TypeDescriptionRemoved,
        message: `Description '${type.description}' was removed from object type '${type.name}'`,
        path: type.name,
    };
}
exports.typeDescriptionRemoved = typeDescriptionRemoved;
function typeDescriptionAdded(type) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.TypeDescriptionAdded,
        message: `Object type '${type.name}' has description '${type.description}'`,
        path: type.name,
    };
}
exports.typeDescriptionAdded = typeDescriptionAdded;
