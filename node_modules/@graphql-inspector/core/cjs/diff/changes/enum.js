"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.enumValueDeprecationReasonRemoved = exports.enumValueDeprecationReasonAdded = exports.enumValueDeprecationReasonChanged = exports.enumValueDescriptionChanged = exports.enumValueAdded = exports.enumValueRemoved = void 0;
const is_deprecated_js_1 = require("../../utils/is-deprecated.js");
const change_js_1 = require("./change.js");
function enumValueRemoved(oldEnum, value) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Breaking,
            reason: `Removing an enum value will cause existing queries that use this enum value to error.`,
        },
        type: change_js_1.ChangeType.EnumValueRemoved,
        message: `Enum value '${value.name}' ${(0, is_deprecated_js_1.isDeprecated)(value) ? '(deprecated) ' : ''}was removed from enum '${oldEnum.name}'`,
        path: [oldEnum.name, value.name].join('.'),
    };
}
exports.enumValueRemoved = enumValueRemoved;
function enumValueAdded(newEnum, value) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Dangerous,
            reason: `Adding an enum value may break existing clients that were not programming defensively against an added case when querying an enum.`,
        },
        type: change_js_1.ChangeType.EnumValueAdded,
        message: `Enum value '${value.name}' was added to enum '${newEnum.name}'`,
        path: [newEnum.name, value.name].join('.'),
    };
}
exports.enumValueAdded = enumValueAdded;
function enumValueDescriptionChanged(newEnum, oldValue, newValue) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.EnumValueDescriptionChanged,
        message: typeof oldValue.description === 'undefined'
            ? `Description '${newValue.description}' was added to enum value '${newEnum.name}.${newValue.name}'`
            : `Description for enum value '${newEnum.name}.${newValue.name}' changed from '${oldValue.description}' to '${newValue.description}'`,
        path: [newEnum.name, oldValue.name].join('.'),
    };
}
exports.enumValueDescriptionChanged = enumValueDescriptionChanged;
function enumValueDeprecationReasonChanged(newEnum, oldValue, newValue) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.EnumValueDeprecationReasonChanged,
        message: `Enum value '${newEnum.name}.${newValue.name}' deprecation reason changed from '${oldValue.deprecationReason}' to '${newValue.deprecationReason}'`,
        path: [newEnum.name, oldValue.name].join('.'),
    };
}
exports.enumValueDeprecationReasonChanged = enumValueDeprecationReasonChanged;
function enumValueDeprecationReasonAdded(newEnum, oldValue, newValue) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.EnumValueDeprecationReasonAdded,
        message: `Enum value '${newEnum.name}.${newValue.name}' was deprecated with reason '${newValue.deprecationReason}'`,
        path: [newEnum.name, oldValue.name].join('.'),
    };
}
exports.enumValueDeprecationReasonAdded = enumValueDeprecationReasonAdded;
function enumValueDeprecationReasonRemoved(newEnum, oldValue, newValue) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.EnumValueDeprecationReasonRemoved,
        message: `Deprecation reason was removed from enum value '${newEnum.name}.${newValue.name}'`,
        path: [newEnum.name, oldValue.name].join('.'),
    };
}
exports.enumValueDeprecationReasonRemoved = enumValueDeprecationReasonRemoved;
