"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fieldArgumentRemoved = exports.fieldArgumentAdded = exports.fieldTypeChanged = exports.fieldDeprecationReasonRemoved = exports.fieldDeprecationReasonAdded = exports.fieldDeprecationReasonChanged = exports.fieldDeprecationRemoved = exports.fieldDeprecationAdded = exports.fieldDescriptionRemoved = exports.fieldDescriptionAdded = exports.fieldDescriptionChanged = exports.fieldAdded = exports.fieldRemoved = void 0;
const graphql_1 = require("graphql");
const graphql_js_1 = require("../../utils/graphql.js");
const is_deprecated_js_1 = require("../../utils/is-deprecated.js");
const change_js_1 = require("./change.js");
function fieldRemoved(type, field) {
    const entity = (0, graphql_1.isInterfaceType)(type) ? 'interface' : 'object type';
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Breaking,
            reason: field.deprecationReason
                ? `Removing a deprecated field is a breaking change. Before removing it, you may want to look at the field's usage to see the impact of removing the field.`
                : `Removing a field is a breaking change. It is preferable to deprecate the field before removing it.`,
        },
        type: change_js_1.ChangeType.FieldRemoved,
        message: `Field '${field.name}' ${(0, is_deprecated_js_1.isDeprecated)(field) ? '(deprecated) ' : ''}was removed from ${entity} '${type.name}'`,
        path: [type.name, field.name].join('.'),
    };
}
exports.fieldRemoved = fieldRemoved;
function fieldAdded(type, field) {
    const entity = (0, graphql_1.isInterfaceType)(type) ? 'interface' : 'object type';
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.FieldAdded,
        message: `Field '${field.name}' was added to ${entity} '${type.name}'`,
        path: [type.name, field.name].join('.'),
    };
}
exports.fieldAdded = fieldAdded;
function fieldDescriptionChanged(type, oldField, newField) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.FieldDescriptionChanged,
        message: `Field '${type.name}.${oldField.name}' description changed from '${oldField.description}' to '${newField.description}'`,
        path: [type.name, oldField.name].join('.'),
    };
}
exports.fieldDescriptionChanged = fieldDescriptionChanged;
function fieldDescriptionAdded(type, field) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.FieldDescriptionAdded,
        message: `Field '${type.name}.${field.name}' has description '${field.description}'`,
        path: [type.name, field.name].join('.'),
    };
}
exports.fieldDescriptionAdded = fieldDescriptionAdded;
function fieldDescriptionRemoved(type, field) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.FieldDescriptionRemoved,
        message: `Description was removed from field '${type.name}.${field.name}'`,
        path: [type.name, field.name].join('.'),
    };
}
exports.fieldDescriptionRemoved = fieldDescriptionRemoved;
function fieldDeprecationAdded(type, field) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.FieldDeprecationAdded,
        message: `Field '${type.name}.${field.name}' is deprecated`,
        path: [type.name, field.name].join('.'),
    };
}
exports.fieldDeprecationAdded = fieldDeprecationAdded;
function fieldDeprecationRemoved(type, field) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Dangerous,
        },
        type: change_js_1.ChangeType.FieldDeprecationRemoved,
        message: `Field '${type.name}.${field.name}' is no longer deprecated`,
        path: [type.name, field.name].join('.'),
    };
}
exports.fieldDeprecationRemoved = fieldDeprecationRemoved;
function fieldDeprecationReasonChanged(type, oldField, newField) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.FieldDeprecationReasonChanged,
        message: `Deprecation reason on field '${type.name}.${newField.name}' has changed from '${oldField.deprecationReason}' to '${newField.deprecationReason}'`,
        path: [type.name, oldField.name].join('.'),
    };
}
exports.fieldDeprecationReasonChanged = fieldDeprecationReasonChanged;
function fieldDeprecationReasonAdded(type, field) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.FieldDeprecationReasonAdded,
        message: `Field '${type.name}.${field.name}' has deprecation reason '${field.deprecationReason}'`,
        path: [type.name, field.name].join('.'),
    };
}
exports.fieldDeprecationReasonAdded = fieldDeprecationReasonAdded;
function fieldDeprecationReasonRemoved(type, field) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.FieldDeprecationReasonRemoved,
        message: `Deprecation reason was removed from field '${type.name}.${field.name}'`,
        path: [type.name, field.name].join('.'),
    };
}
exports.fieldDeprecationReasonRemoved = fieldDeprecationReasonRemoved;
function fieldTypeChanged(type, oldField, newField) {
    return {
        criticality: {
            level: (0, graphql_js_1.safeChangeForField)(oldField.type, newField.type)
                ? change_js_1.CriticalityLevel.NonBreaking
                : change_js_1.CriticalityLevel.Breaking,
        },
        type: change_js_1.ChangeType.FieldTypeChanged,
        message: `Field '${type}.${oldField.name}' changed type from '${oldField.type}' to '${newField.type}'`,
        path: [type.name, oldField.name].join('.'),
    };
}
exports.fieldTypeChanged = fieldTypeChanged;
function fieldArgumentAdded(type, field, arg) {
    const isBreaking = (0, graphql_1.isNonNullType)(arg.type) && typeof arg.defaultValue === 'undefined';
    const defaultValueMsg = typeof arg.defaultValue === 'undefined' ? ' ' : ' (with default value) ';
    return {
        criticality: isBreaking
            ? {
                level: change_js_1.CriticalityLevel.Breaking,
                reason: `Adding a required argument to an existing field is a breaking change because it will cause existing uses of this field to error.`,
            }
            : {
                level: change_js_1.CriticalityLevel.Dangerous,
                reason: `Adding a new argument to an existing field may involve a change in resolve function logic that potentially may cause some side effects.`,
            },
        type: change_js_1.ChangeType.FieldArgumentAdded,
        message: `Argument '${arg.name}: ${arg.type}'${defaultValueMsg}added to field '${type.name}.${field.name}'`,
        path: [type.name, field.name, arg.name].join('.'),
    };
}
exports.fieldArgumentAdded = fieldArgumentAdded;
function fieldArgumentRemoved(type, field, arg) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Breaking,
            reason: `Removing a field argument is a breaking change because it will cause existing queries that use this argument to error.`,
        },
        type: change_js_1.ChangeType.FieldArgumentRemoved,
        message: `Argument '${arg.name}: ${arg.type}' was removed from field '${type.name}.${field.name}'`,
        path: [type.name, field.name, arg.name].join('.'),
    };
}
exports.fieldArgumentRemoved = fieldArgumentRemoved;
