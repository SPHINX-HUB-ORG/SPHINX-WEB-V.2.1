"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inputFieldTypeChanged = exports.inputFieldDefaultValueChanged = exports.inputFieldDescriptionChanged = exports.inputFieldDescriptionRemoved = exports.inputFieldDescriptionAdded = exports.inputFieldAdded = exports.inputFieldRemoved = void 0;
const graphql_1 = require("graphql");
const graphql_js_1 = require("../../utils/graphql.js");
const is_deprecated_js_1 = require("../../utils/is-deprecated.js");
const string_js_1 = require("../../utils/string.js");
const change_js_1 = require("./change.js");
function inputFieldRemoved(input, field) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Breaking,
            reason: 'Removing an input field will cause existing queries that use this input field to error.',
        },
        type: change_js_1.ChangeType.InputFieldRemoved,
        message: `Input field '${field.name}' ${(0, is_deprecated_js_1.isDeprecated)(field) ? '(deprecated) ' : ''}was removed from input object type '${input.name}'`,
        path: [input.name, field.name].join('.'),
    };
}
exports.inputFieldRemoved = inputFieldRemoved;
function inputFieldAdded(input, field) {
    return {
        criticality: (0, graphql_1.isNonNullType)(field.type)
            ? {
                level: change_js_1.CriticalityLevel.Breaking,
                reason: 'Adding a required input field to an existing input object type is a breaking change because it will cause existing uses of this input object type to error.',
            }
            : {
                level: change_js_1.CriticalityLevel.Dangerous,
            },
        type: change_js_1.ChangeType.InputFieldAdded,
        message: `Input field '${field.name}' was added to input object type '${input.name}'`,
        path: [input.name, field.name].join('.'),
    };
}
exports.inputFieldAdded = inputFieldAdded;
function inputFieldDescriptionAdded(type, field) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.InputFieldDescriptionAdded,
        message: `Input field '${type.name}.${field.name}' has description '${field.description}'`,
        path: [type.name, field.name].join('.'),
    };
}
exports.inputFieldDescriptionAdded = inputFieldDescriptionAdded;
function inputFieldDescriptionRemoved(type, field) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.InputFieldDescriptionRemoved,
        message: `Description was removed from input field '${type.name}.${field.name}'`,
        path: [type.name, field.name].join('.'),
    };
}
exports.inputFieldDescriptionRemoved = inputFieldDescriptionRemoved;
function inputFieldDescriptionChanged(input, oldField, newField) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.InputFieldDescriptionChanged,
        message: `Input field '${input.name}.${oldField.name}' description changed from '${oldField.description}' to '${newField.description}'`,
        path: [input.name, oldField.name].join('.'),
    };
}
exports.inputFieldDescriptionChanged = inputFieldDescriptionChanged;
function inputFieldDefaultValueChanged(input, oldField, newField) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Dangerous,
            reason: 'Changing the default value for an argument may change the runtime behavior of a field if it was never provided.',
        },
        type: change_js_1.ChangeType.InputFieldDefaultValueChanged,
        message: `Input field '${input.name}.${oldField.name}' default value changed from '${(0, string_js_1.safeString)(oldField.defaultValue)}' to '${(0, string_js_1.safeString)(newField.defaultValue)}'`,
        path: [input.name, oldField.name].join('.'),
    };
}
exports.inputFieldDefaultValueChanged = inputFieldDefaultValueChanged;
function inputFieldTypeChanged(input, oldField, newField) {
    return {
        criticality: (0, graphql_js_1.safeChangeForInputValue)(oldField.type, newField.type)
            ? {
                level: change_js_1.CriticalityLevel.NonBreaking,
                reason: 'Changing an input field from non-null to null is considered non-breaking.',
            }
            : {
                level: change_js_1.CriticalityLevel.Breaking,
                reason: 'Changing the type of an input field can cause existing queries that use this field to error.',
            },
        type: change_js_1.ChangeType.InputFieldTypeChanged,
        message: `Input field '${input.name}.${oldField.name}' changed type from '${oldField.type.toString()}' to '${newField.type.toString()}'`,
        path: [input.name, oldField.name].join('.'),
    };
}
exports.inputFieldTypeChanged = inputFieldTypeChanged;
