"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fieldArgumentTypeChanged = exports.fieldArgumentDefaultChanged = exports.fieldArgumentDescriptionChanged = void 0;
const graphql_js_1 = require("../../utils/graphql.js");
const string_js_1 = require("../../utils/string.js");
const change_js_1 = require("./change.js");
function fieldArgumentDescriptionChanged(type, field, oldArg, newArg) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.NonBreaking,
        },
        type: change_js_1.ChangeType.FieldArgumentDescriptionChanged,
        message: `Description for argument '${newArg.name}' on field '${type.name}.${field.name}' changed from '${oldArg.description}' to '${newArg.description}'`,
        path: [type.name, field.name, oldArg.name].join('.'),
    };
}
exports.fieldArgumentDescriptionChanged = fieldArgumentDescriptionChanged;
function fieldArgumentDefaultChanged(type, field, oldArg, newArg) {
    return {
        criticality: {
            level: change_js_1.CriticalityLevel.Dangerous,
            reason: 'Changing the default value for an argument may change the runtime behaviour of a field if it was never provided.',
        },
        type: change_js_1.ChangeType.FieldArgumentDefaultChanged,
        message: typeof oldArg.defaultValue === 'undefined'
            ? `Default value '${(0, string_js_1.safeString)(newArg.defaultValue)}' was added to argument '${newArg.name}' on field '${type.name}.${field.name}'`
            : `Default value for argument '${newArg.name}' on field '${type.name}.${field.name}' changed from '${(0, string_js_1.safeString)(oldArg.defaultValue)}' to '${(0, string_js_1.safeString)(newArg.defaultValue)}'`,
        path: [type.name, field.name, oldArg.name].join('.'),
    };
}
exports.fieldArgumentDefaultChanged = fieldArgumentDefaultChanged;
function fieldArgumentTypeChanged(type, field, oldArg, newArg) {
    return {
        criticality: (0, graphql_js_1.safeChangeForInputValue)(oldArg.type, newArg.type)
            ? {
                level: change_js_1.CriticalityLevel.NonBreaking,
                reason: `Changing an input field from non-null to null is considered non-breaking.`,
            }
            : {
                level: change_js_1.CriticalityLevel.Breaking,
                reason: `Changing the type of a field's argument can cause existing queries that use this argument to error.`,
            },
        type: change_js_1.ChangeType.FieldArgumentTypeChanged,
        message: `Type for argument '${newArg.name}' on field '${type.name}.${field.name}' changed from '${oldArg.type}' to '${newArg.type}'`,
        path: [type.name, field.name, oldArg.name].join('.'),
    };
}
exports.fieldArgumentTypeChanged = fieldArgumentTypeChanged;
