'use strict';

var emojiRegex = require('emoji-regex');
var findAndReplace = require('mdast-util-find-and-replace');
var gemoji = require('gemoji');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var emojiRegex__default = /*#__PURE__*/_interopDefaultLegacy(emojiRegex);
var findAndReplace__default = /*#__PURE__*/_interopDefaultLegacy(findAndReplace);
var gemoji__default = /*#__PURE__*/_interopDefaultLegacy(gemoji);

const skintoneMap = {
  '🏻': 'skin tone 2',
  '🏼': 'skin tone 3',
  '🏽': 'skin tone 4',
  '🏾': 'skin tone 5',
  '🏿': 'skin tone 6',
};

function stripSkintone(emoji) {
  const skintoneRegex = new RegExp(Object.keys(skintoneMap).join('|'), 'g');
  const genericEmoji = emoji.replace(skintoneRegex, '');

  let skintone = emoji.match(skintoneRegex);
  skintone = skintone && skintone[0] ? skintone[0] : undefined;

  return { skintone, genericEmoji };
}

function emojiToName(emoji) {
  return gemoji__default['default'].find((item) => item.emoji === emoji);
}

function getEmojiDescription(emoji) {
  const { skintone, genericEmoji } = stripSkintone(emoji);

  let info = emojiToName(genericEmoji);

  if (!info) {
    const appleEmoji = genericEmoji + '\uFE0F';
    info = emojiToName(appleEmoji);

    if (!info) {
      return '';
    }
  }

  const skintoneDescription = skintoneMap[skintone] || '';
  return skintoneDescription
    ? `${info.description} (${skintoneDescription})`
    : info.description;
}

function a11yEmoji() {
  function replace(match) {
    return {
      type: 'text',
      value: match,
      data: {
        hName: 'span',
        hProperties: { role: 'img', ariaLabel: getEmojiDescription(match) },
        hChildren: [{ type: 'text', value: match }],
      },
    };
  }

  function transform(markdownAST) {
    findAndReplace__default['default'](markdownAST, emojiRegex__default['default'](), replace);
    return markdownAST;
  }

  return transform;
}

module.exports = a11yEmoji;
