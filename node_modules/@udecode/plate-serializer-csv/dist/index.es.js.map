{"version":3,"file":"index.es.js","sources":["../src/deserializer/utils/deserializeCsv.ts","../src/deserializer/createDeserializeCsvPlugin.ts"],"sourcesContent":["import {\n  ELEMENT_DEFAULT,\n  getPlugin,\n  getPluginType,\n  PlateEditor,\n  TDescendant,\n  TElement,\n  TNode,\n  Value,\n} from '@udecode/plate-common';\nimport {\n  ELEMENT_TABLE,\n  ELEMENT_TD,\n  ELEMENT_TH,\n  ELEMENT_TR,\n} from '@udecode/plate-table';\nimport { parse } from 'papaparse';\nimport { KEY_DESERIALIZE_CSV } from '../createDeserializeCsvPlugin';\nimport { DeserializeCsvParseOptions, DeserializeCsvPlugin } from '../types';\n\nconst isValidCsv = (\n  data: Record<string, string>[][],\n  errors: Record<string, string>[][],\n  errorTolerance: number\n) => {\n  if (errorTolerance < 0) errorTolerance = 0;\n  return !(\n    !data ||\n    data.length < 2 ||\n    data[0].length < 2 ||\n    data[1].length < 2 ||\n    (errors.length && errors.length > errorTolerance * data.length)\n  );\n};\n\nexport const deserializeCsv = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    data,\n    ...parseOptions\n  }: DeserializeCsvParseOptions & {\n    data: string;\n  }\n): TDescendant[] | undefined => {\n  const {\n    options: { errorTolerance, parseOptions: pluginParseOptions },\n  } = getPlugin<DeserializeCsvPlugin, V, PlateEditor<V>>(\n    editor,\n    KEY_DESERIALIZE_CSV\n  );\n\n  // Verify it's a csv string\n  const testCsv = parse(data, { preview: 2 });\n\n  if (testCsv.errors.length === 0) {\n    const csv = parse(data, {\n      ...pluginParseOptions,\n      ...parseOptions,\n    });\n\n    if (\n      !isValidCsv(\n        csv.data as Record<string, string>[][],\n        (csv.errors as unknown) as Record<string, string>[][],\n        errorTolerance!\n      )\n    )\n      return;\n\n    const paragraph = getPluginType(editor, ELEMENT_DEFAULT);\n    const table = getPluginType(editor, ELEMENT_TABLE);\n    const th = getPluginType(editor, ELEMENT_TH);\n    const tr = getPluginType(editor, ELEMENT_TR);\n    const td = getPluginType(editor, ELEMENT_TD);\n\n    const ast: TNode = {\n      type: table,\n      children: [],\n    };\n\n    if (csv.meta.fields) {\n      // csv file has headers, data structure is an array of objects keyed on the heading title\n      ast.children.push({\n        type: tr,\n        children: csv.meta.fields.map((field: string) => ({\n          type: th,\n          children: [{ type: paragraph, children: [{ text: field }] }],\n        })),\n      });\n      for (const row of csv.data as Record<string, string>[]) {\n        ast.children.push({\n          type: tr,\n          children: csv.meta.fields.map((field: string) => ({\n            type: td,\n            children: [\n              { type: paragraph, children: [{ text: row[field] || '' }] },\n            ],\n          })),\n        });\n      }\n    } else {\n      // csv is an array of arrays\n      for (const row of csv.data as [string[]]) {\n        ast.children.push({\n          type: tr,\n          children: [],\n        });\n        for (const cell of row) {\n          (ast.children[ast.children.length - 1] as TElement).children.push({\n            type: td,\n            children: [{ type: paragraph, children: [{ text: cell }] }],\n          });\n        }\n      }\n    }\n    return [\n      {\n        type: paragraph,\n        children: [{ text: '' }],\n      },\n      ast,\n      {\n        type: paragraph,\n        children: [{ text: '' }],\n      },\n    ];\n  }\n};\n","import { createPluginFactory } from '@udecode/plate-common';\nimport { DeserializeCsvPlugin } from './types';\nimport { deserializeCsv } from './utils';\n\nexport const KEY_DESERIALIZE_CSV = 'deserializeCsv';\n\n/**\n * Enables support for deserializing content\n * from CSV format to Slate format.\n */\nexport const createDeserializeCsvPlugin = createPluginFactory<DeserializeCsvPlugin>(\n  {\n    key: KEY_DESERIALIZE_CSV,\n    options: {\n      errorTolerance: 0.25,\n      parseOptions: {\n        header: true,\n      },\n    },\n    then: (editor) => ({\n      editor: {\n        insertData: {\n          format: 'text/plain',\n          getFragment: ({ data }) => deserializeCsv(editor, { data }),\n        },\n      },\n    }),\n  }\n);\n"],"names":["isValidCsv","data","errors","errorTolerance","length","deserializeCsv","editor","parseOptions","options","pluginParseOptions","getPlugin","KEY_DESERIALIZE_CSV","testCsv","parse","preview","csv","paragraph","getPluginType","ELEMENT_DEFAULT","table","ELEMENT_TABLE","th","ELEMENT_TH","tr","ELEMENT_TR","td","ELEMENT_TD","ast","type","children","meta","fields","push","map","field","text","row","cell","createDeserializeCsvPlugin","createPluginFactory","key","header","then","insertData","format","getFragment"],"mappings":"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"}