'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var plateCommon = require('@udecode/plate-common');
var plateTable = require('@udecode/plate-table');
var papaparse = require('papaparse');

const isValidCsv = (data, errors, errorTolerance) => {
  if (errorTolerance < 0) errorTolerance = 0;
  return !(!data || data.length < 2 || data[0].length < 2 || data[1].length < 2 || errors.length && errors.length > errorTolerance * data.length);
};

const deserializeCsv = (editor, {
  data,
  ...parseOptions
}) => {
  const {
    options: {
      errorTolerance,
      parseOptions: pluginParseOptions
    }
  } = plateCommon.getPlugin(editor, KEY_DESERIALIZE_CSV); // Verify it's a csv string

  const testCsv = papaparse.parse(data, {
    preview: 2
  });

  if (testCsv.errors.length === 0) {
    const csv = papaparse.parse(data, { ...pluginParseOptions,
      ...parseOptions
    });
    if (!isValidCsv(csv.data, csv.errors, errorTolerance)) return;
    const paragraph = plateCommon.getPluginType(editor, plateCommon.ELEMENT_DEFAULT);
    const table = plateCommon.getPluginType(editor, plateTable.ELEMENT_TABLE);
    const th = plateCommon.getPluginType(editor, plateTable.ELEMENT_TH);
    const tr = plateCommon.getPluginType(editor, plateTable.ELEMENT_TR);
    const td = plateCommon.getPluginType(editor, plateTable.ELEMENT_TD);
    const ast = {
      type: table,
      children: []
    };

    if (csv.meta.fields) {
      // csv file has headers, data structure is an array of objects keyed on the heading title
      ast.children.push({
        type: tr,
        children: csv.meta.fields.map(field => ({
          type: th,
          children: [{
            type: paragraph,
            children: [{
              text: field
            }]
          }]
        }))
      });

      for (const row of csv.data) {
        ast.children.push({
          type: tr,
          children: csv.meta.fields.map(field => ({
            type: td,
            children: [{
              type: paragraph,
              children: [{
                text: row[field] || ''
              }]
            }]
          }))
        });
      }
    } else {
      // csv is an array of arrays
      for (const row of csv.data) {
        ast.children.push({
          type: tr,
          children: []
        });

        for (const cell of row) {
          ast.children[ast.children.length - 1].children.push({
            type: td,
            children: [{
              type: paragraph,
              children: [{
                text: cell
              }]
            }]
          });
        }
      }
    }

    return [{
      type: paragraph,
      children: [{
        text: ''
      }]
    }, ast, {
      type: paragraph,
      children: [{
        text: ''
      }]
    }];
  }
};

const KEY_DESERIALIZE_CSV = 'deserializeCsv';
/**
 * Enables support for deserializing content
 * from CSV format to Slate format.
 */

const createDeserializeCsvPlugin = plateCommon.createPluginFactory({
  key: KEY_DESERIALIZE_CSV,
  options: {
    errorTolerance: 0.25,
    parseOptions: {
      header: true
    }
  },
  then: editor => ({
    editor: {
      insertData: {
        format: 'text/plain',
        getFragment: ({
          data
        }) => deserializeCsv(editor, {
          data
        })
      }
    }
  })
});

exports.KEY_DESERIALIZE_CSV = KEY_DESERIALIZE_CSV;
exports.createDeserializeCsvPlugin = createDeserializeCsvPlugin;
exports.deserializeCsv = deserializeCsv;
//# sourceMappingURL=index.js.map
