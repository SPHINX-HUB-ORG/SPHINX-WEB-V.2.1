import { HTMLPropsAs, PlateRenderElementProps, Value } from '@udecode/plate-core';
import { TImageElement } from '../types';
export declare const imageStore: {
    atom: {
        width: import("jotai").Atom<import("csstype").Property.Width<string | number> | undefined>;
    };
    extend: <ET, EN>(extendedState: ET, options?: Omit<import("@udecode/plate-core").CreateAtomStoreOptions<{}, EN extends string ? EN : "image">, "initialStore"> | undefined) => import("@udecode/plate-core").AtomStoreApi<{
        width: import("csstype").Property.Width<string | number> | undefined;
    } & ET, EN extends string ? EN : "image">;
}, useImageStore: () => {
    get: {
        width: (scope?: import("@udecode/plate-core").Scope | undefined) => import("csstype").Property.Width<string | number> | undefined;
    };
    set: {
        width: (scope?: import("@udecode/plate-core").Scope | undefined) => (value: import("csstype").Property.Width<string | number> | undefined) => void;
    };
    use: {
        width: (scope?: import("@udecode/plate-core").Scope | undefined) => [import("csstype").Property.Width<string | number> | undefined, (update?: import("csstype").Property.Width<string | number> | undefined) => void];
    };
};
export declare const imageGlobalStore: import("@udecode/plate-core").StoreApi<"image", {
    /**
     * When defined, focus end of caption textarea of the image with the same path.
     */
    focusEndCaptionPath: import("slate").Path | null;
    /**
     * When defined, focus start of caption textarea of the image with the same path.
     */
    focusStartCaptionPath: import("slate").Path | null;
}, import("@udecode/plate-core").StateActions<{
    /**
     * When defined, focus end of caption textarea of the image with the same path.
     */
    focusEndCaptionPath: import("slate").Path | null;
    /**
     * When defined, focus start of caption textarea of the image with the same path.
     */
    focusStartCaptionPath: import("slate").Path | null;
}>, {}>;
export declare type ImageProps = PlateRenderElementProps<Value, TImageElement> & HTMLPropsAs<'div'>;
export declare const useElementProps: ({ attributes, nodeProps, element, editor, ...props }: ImageProps) => HTMLPropsAs<'div'>;
export declare const ImageRoot: import("@udecode/plate-core").Component<ImageProps>;
export declare const Image: {
    Root: import("@udecode/plate-core").Component<ImageProps>;
    Caption: import("@udecode/plate-core").Component<import("./ImageCaption").ImageCaptionProps>;
    Img: import("@udecode/plate-core").Component<import("@udecode/plate-core").AsProps<import("@udecode/plate-core").As<any>>>;
    Resizable: import("@udecode/plate-core").Component<import("./ImageResizable").ImageResizableProps>;
    CaptionTextarea: import("@udecode/plate-core").Component<import("./ImageCaptionTextarea").ImageCaptionTextareaProps>;
};
//# sourceMappingURL=Image.d.ts.map