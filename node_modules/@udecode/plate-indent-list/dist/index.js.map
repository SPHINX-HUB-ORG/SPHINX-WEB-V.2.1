{"version":3,"file":"index.js","sources":["../../../../node_modules/clsx/dist/clsx.m.js","../src/types.ts","../src/injectIndentListComponent.tsx","../../../../node_modules/is-hotkey/lib/index.js","../src/transforms/indentList.ts","../src/transforms/outdentList.ts","../src/transforms/setIndentListNode.ts","../src/transforms/setIndentListNodes.ts","../src/queries/getSiblingIndentList.ts","../src/queries/getNextIndentList.ts","../src/queries/getPreviousIndentList.ts","../src/queries/getIndentListSiblings.ts","../src/transforms/setIndentListSiblingNodes.ts","../src/queries/areEqListStyleType.ts","../src/transforms/toggleIndentListSet.ts","../src/transforms/toggleIndentListUnset.ts","../src/transforms/toggleIndentList.ts","../src/onKeyDownIndentList.ts","../src/normalizers/normalizeFirstIndentListStart.ts","../src/normalizers/normalizeIndentListStart.ts","../src/normalizers/normalizeIndentListNotIndented.ts","../src/normalizeIndentList.ts","../src/withIndentList.ts","../src/createIndentListPlugin.ts","../src/queries/getSiblingListStyleType.ts"],"sourcesContent":["function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","export enum ListStyleType {\n  // The marker is traditional Armenian numbering\n  Armenian = 'armenian',\n\n  // The marker is a circle\n  Circle = 'circle',\n\n  // The marker is plain ideographic numbers\n  CjkIdeographic = 'cjk-ideographic',\n\n  // The marker is a number. This is default for <ol>\n  Decimal = 'decimal',\n\n  // The marker is a number with leading zeros (01, 02, 03, etc.)\n  DecimalLeadingZero = 'decimal-leading-zero',\n\n  // The marker is a filled circle. This is default for <ul>\n  Disc = 'disc',\n\n  // The marker is traditional Georgian numbering\n  Georgian = 'georgian',\n\n  // The marker is traditional Hebrew numbering\n  Hebrew = 'hebrew',\n\n  // The marker is traditional Hiragana numbering\n  Hiragana = 'hiragana',\n\n  // The marker is traditional Hiragana iroha numbering\n  HiraganaIroha = 'hiragana-iroha',\n\n  // The marker is traditional Katakana numbering\n  Katakana = 'katakana',\n\n  // The marker is traditional Katakana iroha numbering\n  KatakanaIroha = 'katakana-iroha',\n\n  // The marker is lower-alpha (a, b, c, d, e, etc.)\n  LowerAlpha = 'lower-alpha',\n\n  // The marker is lower-greek\n  LowerGreek = 'lower-greek',\n\n  // The marker is lower-latin (a, b, c, d, e, etc.)\n  LowerLatin = 'lower-latin',\n\n  // The marker is lower-roman (i, ii, iii, iv, v, etc.)\n  LowerRoman = 'lower-roman',\n\n  // No marker is shown\n  None = 'none',\n\n  // The marker is a square\n  Square = 'square',\n\n  // The marker is upper-alpha (A, B, C, D, E, etc.)\n  UpperAlpha = 'upper-alpha',\n\n  // The marker is upper-latin (A, B, C, D, E, etc.)\n  UpperLatin = 'upper-latin',\n\n  // The marker is upper-roman (I, II, III, IV, V, etc.)\n  UpperRoman = 'upper-roman',\n\n  // Sets this property to its default value. Read about initial\n  Initial = 'initial',\n\n  // Inherits this property from its parent element. Read about inherit\n  Inherit = 'inherit',\n}\n","import React, { CSSProperties } from 'react';\nimport {\n  InjectComponentProps,\n  InjectComponentReturnType,\n  Value,\n} from '@udecode/plate-common';\nimport clsx from 'clsx';\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from './createIndentListPlugin';\nimport { ListStyleType } from './types';\n\nexport const injectIndentListComponent = <V extends Value = Value>(\n  props: InjectComponentProps<V>\n): InjectComponentReturnType<V> => {\n  const { element } = props;\n\n  const listStyleType = element[KEY_LIST_STYLE_TYPE] as string;\n  const listStart = element[KEY_LIST_START] as number;\n\n  if (listStyleType) {\n    let className = clsx(`slate-${KEY_LIST_STYLE_TYPE}-${listStyleType}`);\n    const style: CSSProperties = {\n      padding: 0,\n      margin: 0,\n      listStyleType,\n    };\n\n    if (\n      [ListStyleType.Disc, ListStyleType.Circle, ListStyleType.Square].includes(\n        listStyleType as ListStyleType\n      )\n    ) {\n      className = clsx(className, 'slate-list-bullet');\n\n      return ({ children }) => (\n        <ul style={style} className={className}>\n          <li>{children}</li>\n        </ul>\n      );\n    }\n\n    className = clsx(className, 'slate-list-number');\n\n    return ({ children }) => (\n      <ol style={style} className={className} start={listStart}>\n        <li>{children}</li>\n      </ol>\n    );\n  }\n};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n/**\n * Constants.\n */\n\n// We make this a function so it can be tested in describe block mocks with Jest.\nvar IS_MAC = () => typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);\n\nvar MODIFIERS = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey'\n};\n\n// We make this a function so it can be tested in describe block mocks with Jest.\nvar ALIASES = () => ({\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC() ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta'\n});\n\nvar CODES = {\n  backspace: 8,\n  tab: 9,\n  enter: 13,\n  shift: 16,\n  control: 17,\n  alt: 18,\n  pause: 19,\n  capslock: 20,\n  escape: 27,\n  ' ': 32,\n  pageup: 33,\n  pagedown: 34,\n  end: 35,\n  home: 36,\n  arrowleft: 37,\n  arrowup: 38,\n  arrowright: 39,\n  arrowdown: 40,\n  insert: 45,\n  delete: 46,\n  meta: 91,\n  numlock: 144,\n  scrolllock: 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  '\\'': 222\n};\n\nfor (var f = 1; f < 20; f++) {\n  CODES['f' + f] = 111 + f;\n}\n\n/**\n * Is hotkey?\n */\n\nfunction isHotkey(hotkey, options, event) {\n  if (options && !('byKey' in options)) {\n    event = options;\n    options = null;\n  }\n\n  if (!Array.isArray(hotkey)) {\n    hotkey = [hotkey];\n  }\n\n  var array = hotkey.map(function (string) {\n    return parseHotkey(string, options);\n  });\n  var check = function check(e) {\n    return array.some(function (object) {\n      return compareHotkey(object, e);\n    });\n  };\n  var ret = event == null ? check : check(event);\n  return ret;\n}\n\nfunction isCodeHotkey(hotkey, event) {\n  return isHotkey(hotkey, event);\n}\n\nfunction isKeyHotkey(hotkey, event) {\n  return isHotkey(hotkey, { byKey: true }, event);\n}\n\n/**\n * Parse.\n */\n\nfunction parseHotkey(hotkey, options) {\n  var byKey = options && options.byKey;\n  var ret = {};\n\n  // Special case to handle the `+` key since we use it as a separator.\n  hotkey = hotkey.replace('++', '+add');\n  var values = hotkey.split('+');\n  var length = values.length;\n\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n\n  for (var k in MODIFIERS) {\n    ret[MODIFIERS[k]] = false;\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var value = _step.value;\n\n      var optional = value.endsWith('?') && value.length > 1;\n\n      if (optional) {\n        value = value.slice(0, -1);\n      }\n\n      var name = toKeyName(value);\n      var modifier = MODIFIERS[name];\n\n      if (length === 1 || !modifier) {\n        if (byKey) {\n          ret.key = name;\n        } else {\n          ret.which = toKeyCode(value);\n        }\n      }\n\n      if (modifier) {\n        ret[modifier] = optional ? null : true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compare.\n */\n\nfunction compareHotkey(object, event) {\n  for (var key in object) {\n    var expected = object[key];\n    var actual = void 0;\n\n    if (expected == null) {\n      continue;\n    }\n\n    if (key === 'key' && event.key != null) {\n      actual = event.key.toLowerCase();\n    } else if (key === 'which') {\n      actual = expected === 91 && event.which === 93 ? 91 : event.which;\n    } else {\n      actual = event[key];\n    }\n\n    if (actual == null && expected === false) {\n      continue;\n    }\n\n    if (actual !== expected) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Utils.\n */\n\nfunction toKeyCode(name) {\n  name = toKeyName(name);\n  var code = CODES[name] || name.toUpperCase().charCodeAt(0);\n  return code;\n}\n\nfunction toKeyName(name) {\n  name = name.toLowerCase();\n  name = ALIASES()[name] || name;\n  return name;\n}\n\n/**\n * Export.\n */\n\nexports.default = isHotkey;\nexports.isHotkey = isHotkey;\nexports.isCodeHotkey = isCodeHotkey;\nexports.isKeyHotkey = isKeyHotkey;\nexports.parseHotkey = parseHotkey;\nexports.compareHotkey = compareHotkey;\nexports.toKeyCode = toKeyCode;\nexports.toKeyName = toKeyName;","import { PlateEditor, Value } from '@udecode/plate-common';\nimport { setIndent, SetIndentOptions } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport interface IndentListOptions<V extends Value = Value>\n  extends SetIndentOptions<V> {\n  listStyleType?: ListStyleType | string;\n}\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const indentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { listStyleType = ListStyleType.Disc, ...options }: IndentListOptions<V> = {}\n) => {\n  setIndent(editor, {\n    offset: 1,\n    setNodesProps: () => ({\n      [KEY_LIST_STYLE_TYPE]: listStyleType,\n    }),\n    ...options,\n  });\n};\n","import { PlateEditor, Value } from '@udecode/plate-common';\nimport { setIndent } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { IndentListOptions } from './indentList';\n\n/**\n * Decrease the indentation of the selected blocks.\n */\nexport const outdentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: IndentListOptions<V> = {}\n) => {\n  setIndent(editor, {\n    offset: -1,\n    unsetNodesProps: [KEY_LIST_STYLE_TYPE],\n    ...options,\n  });\n};\n","import { setElements, TEditor, Value } from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { Path } from 'slate';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport const setIndentListNode = <V extends Value>(\n  editor: TEditor<V>,\n  {\n    listStyleType = ListStyleType.Disc,\n    indent = 0,\n    at,\n  }: {\n    listStyleType?: string;\n    indent?: number;\n    at: Path;\n  }\n) => {\n  const newIndent = indent || indent + 1;\n\n  setElements(\n    editor,\n    { [KEY_LIST_STYLE_TYPE]: listStyleType, [KEY_INDENT]: newIndent },\n    { at }\n  );\n};\n","import {\n  TEditor,\n  TNodeEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { setIndentListNode } from './setIndentListNode';\n\n/**\n * Set indent list to the given entries.\n * Add indent if listStyleType was not defined.\n */\nexport const setIndentListNodes = <V extends Value>(\n  editor: TEditor<V>,\n  entries: TNodeEntry[],\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  withoutNormalizing(editor, () => {\n    entries.forEach((entry) => {\n      const [node, path] = entry;\n\n      let indent = (node[KEY_INDENT] as number) ?? 0;\n      indent = node[KEY_LIST_STYLE_TYPE] ? indent : indent + 1;\n\n      setIndentListNode(editor, {\n        listStyleType,\n        indent,\n        at: path,\n      });\n    });\n  });\n};\n","import {\n  EElement,\n  EElementEntry,\n  EElementOrText,\n  isDefined,\n  TEditor,\n  TNode,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\nexport interface GetSiblingIndentListOptions<\n  N extends EElement<V>,\n  V extends Value = Value\n> {\n  getPreviousEntry?: (\n    entry: TNodeEntry<EElementOrText<V>>\n  ) => TNodeEntry<N> | undefined;\n  getNextEntry?: (\n    entry: TNodeEntry<EElementOrText<V>>\n  ) => TNodeEntry<N> | undefined;\n  /**\n   * Query to validate lookup. If false, check the next sibling.\n   */\n  query?: (siblingNode: TNode) => boolean | undefined;\n  /**\n   * Query to break lookup\n   */\n  eqIndent?: boolean;\n  breakQuery?: (siblingNode: TNode) => boolean | undefined;\n  breakOnLowerIndent?: boolean;\n  breakOnEqIndentNeqListStyleType?: boolean;\n}\n\n/**\n * Get the next sibling indent list node.\n * Default query: the sibling node should have the same listStyleType.\n */\nexport const getSiblingIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  [node, path]: EElementEntry<V>,\n  {\n    getPreviousEntry,\n    getNextEntry,\n    query,\n    eqIndent = true,\n    breakQuery,\n    breakOnLowerIndent = true,\n    breakOnEqIndentNeqListStyleType = true,\n  }: GetSiblingIndentListOptions<N, V>\n): TNodeEntry<N> | undefined => {\n  if (!getPreviousEntry && !getNextEntry) return;\n\n  const getSiblingEntry = getNextEntry ?? getPreviousEntry!;\n\n  let nextEntry = getSiblingEntry([node, path]);\n\n  while (true) {\n    if (!nextEntry) return;\n\n    const [nextNode, nextPath] = nextEntry;\n\n    const indent = node[KEY_INDENT] as number;\n    const nextIndent = nextNode[KEY_INDENT] as number;\n\n    if (!isDefined(nextIndent)) return;\n\n    if (breakQuery && breakQuery(nextNode)) return;\n\n    if (breakOnLowerIndent && nextIndent < indent) return;\n    if (\n      breakOnEqIndentNeqListStyleType &&\n      nextIndent === indent &&\n      nextNode[KEY_LIST_STYLE_TYPE] !== node[KEY_LIST_STYLE_TYPE]\n    )\n      return;\n\n    let valid = !query || query(nextNode as TNode);\n    if (valid) {\n      valid = !eqIndent || nextIndent === indent;\n      if (valid) return [nextNode, nextPath];\n    }\n\n    nextEntry = getSiblingEntry(nextEntry);\n  }\n};\n","import {\n  EElement,\n  EElementEntry,\n  getNode,\n  TEditor,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { Path } from 'slate';\nimport {\n  getSiblingIndentList,\n  GetSiblingIndentListOptions,\n} from './getSiblingIndentList';\n\n/**\n * Get the next indent list.\n */\nexport const getNextIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n): TNodeEntry<N> | undefined => {\n  return getSiblingIndentList(editor, entry, {\n    getNextEntry: ([, currPath]) => {\n      const nextPath = Path.next(currPath);\n      const nextNode = getNode<N>(editor, nextPath);\n      if (!nextNode) return;\n\n      return [nextNode, nextPath];\n    },\n    ...options,\n    getPreviousEntry: undefined,\n  });\n};\n","import {\n  EElement,\n  EElementEntry,\n  getNode,\n  getPreviousPath,\n  TEditor,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common';\nimport {\n  getSiblingIndentList,\n  GetSiblingIndentListOptions,\n} from './getSiblingIndentList';\n\n/**\n * Get the previous indent list node.\n */\nexport const getPreviousIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n): TNodeEntry<N> | undefined => {\n  return getSiblingIndentList(editor, entry, {\n    getPreviousEntry: ([, currPath]) => {\n      const prevPath = getPreviousPath(currPath);\n      if (!prevPath) return;\n\n      const prevNode = getNode<N>(editor, prevPath);\n      if (!prevNode) return;\n\n      return [prevNode, prevPath];\n    },\n    ...options,\n    getNextEntry: undefined,\n  });\n};\n","import {\n  EElement,\n  EElementEntry,\n  TEditor,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { getNextIndentList } from './getNextIndentList';\nimport { getPreviousIndentList } from './getPreviousIndentList';\nimport { GetSiblingIndentListOptions } from './getSiblingIndentList';\n\nexport interface GetIndentListSiblingsOptions<\n  N extends EElement<V>,\n  V extends Value = Value\n> extends Partial<GetSiblingIndentListOptions<N, V>> {\n  previous?: boolean;\n  current?: boolean;\n  next?: boolean;\n}\n\nexport const getIndentListSiblings = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  {\n    previous = true,\n    current = true,\n    next = true,\n    ...options\n  }: GetIndentListSiblingsOptions<N, V> = {}\n) => {\n  const siblings: TNodeEntry[] = [];\n\n  const [node] = entry;\n\n  if (!node[KEY_LIST_STYLE_TYPE]) return siblings;\n\n  let iterEntry = entry;\n\n  if (previous) {\n    while (true) {\n      const prevEntry = getPreviousIndentList<N, V>(editor, iterEntry, options);\n      if (!prevEntry) break;\n\n      siblings.push(prevEntry);\n\n      iterEntry = prevEntry;\n    }\n  }\n\n  if (current) {\n    siblings.push(entry);\n  }\n\n  if (next) {\n    iterEntry = entry;\n\n    while (true) {\n      const nextEntry = getNextIndentList(editor, iterEntry, options);\n      if (!nextEntry) break;\n\n      siblings.push(nextEntry);\n\n      iterEntry = nextEntry;\n    }\n  }\n\n  return siblings;\n};\n","import {\n  EElement,\n  EElementEntry,\n  TEditor,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { getIndentListSiblings } from '../queries/getIndentListSiblings';\nimport { GetSiblingIndentListOptions } from '../queries/getSiblingIndentList';\nimport { ListStyleType } from '../types';\nimport { setIndentListNode } from './setIndentListNode';\n\n/**\n * Set indent list to entry + siblings.\n */\nexport const setIndentListSiblingNodes = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  {\n    listStyleType = ListStyleType.Disc,\n    getSiblingIndentListOptions,\n  }: {\n    listStyleType?: string;\n    getSiblingIndentListOptions?: GetSiblingIndentListOptions<N, V>;\n  }\n) => {\n  withoutNormalizing(editor, () => {\n    const siblings = getIndentListSiblings(\n      editor,\n      entry,\n      getSiblingIndentListOptions\n    );\n\n    siblings.forEach(([node, path]) => {\n      setIndentListNode(editor, {\n        listStyleType,\n        indent: node[KEY_INDENT] as number,\n        at: path,\n      });\n    });\n  });\n};\n","import { TEditor, TNodeEntry, Value } from '@udecode/plate-common';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport const areEqListStyleType = <V extends Value>(\n  editor: TEditor<V>,\n  entries: TNodeEntry[],\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  let eqListStyleType = true;\n\n  for (const entry of entries) {\n    const [block] = entry;\n\n    if (\n      !block[KEY_LIST_STYLE_TYPE] ||\n      block[KEY_LIST_STYLE_TYPE] !== listStyleType\n    ) {\n      eqListStyleType = false;\n      break;\n    }\n  }\n\n  return eqListStyleType;\n};\n","import { TEditor, TNodeEntry, Value } from '@udecode/plate-common';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { indentList, IndentListOptions } from './indentList';\n\n/**\n * Set indent list if not set.\n */\nexport const toggleIndentListSet = <V extends Value>(\n  editor: TEditor<V>,\n  [node]: TNodeEntry,\n  { listStyleType = ListStyleType.Disc, ...options }: IndentListOptions<V>\n) => {\n  if (!node[KEY_LIST_STYLE_TYPE]) {\n    indentList(editor as any, {\n      listStyleType,\n      ...options,\n    });\n    return true;\n  }\n};\n","import { TEditor, TNodeEntry, unsetNodes, Value } from '@udecode/plate-common';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { outdentList } from './outdentList';\n\n/**\n * Unset list style type if already set.\n */\nexport const toggleIndentListUnset = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry,\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  if (listStyleType === node[KEY_LIST_STYLE_TYPE]) {\n    unsetNodes(editor as any, KEY_LIST_STYLE_TYPE, { at: path });\n    outdentList(editor as any, { listStyleType });\n    return true;\n  }\n};\n","import {\n  getBlockAbove,\n  getNodeEntries,\n  getPluginOptions,\n  isCollapsed,\n  isExpanded,\n  PlateEditor,\n  setElements,\n  TElement,\n  unsetNodes,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport {\n  IndentListPlugin,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { areEqListStyleType } from '../queries/areEqListStyleType';\nimport { IndentListOptions } from './indentList';\nimport { setIndentListNodes } from './setIndentListNodes';\nimport { setIndentListSiblingNodes } from './setIndentListSiblingNodes';\nimport { toggleIndentListSet } from './toggleIndentListSet';\nimport { toggleIndentListUnset } from './toggleIndentListUnset';\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const toggleIndentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: IndentListOptions<V>\n) => {\n  const { listStyleType } = options;\n\n  const { getSiblingIndentListOptions } = getPluginOptions<IndentListPlugin, V>(\n    editor,\n    KEY_LIST_STYLE_TYPE\n  );\n\n  if (isCollapsed(editor.selection)) {\n    const entry = getBlockAbove<TElement>(editor);\n    if (!entry) return;\n\n    if (toggleIndentListSet(editor, entry, { listStyleType })) {\n      return;\n    }\n\n    if (toggleIndentListUnset(editor, entry, { listStyleType })) {\n      return;\n    }\n\n    setIndentListSiblingNodes(editor, entry, {\n      listStyleType,\n      getSiblingIndentListOptions,\n    });\n    return;\n  }\n\n  if (isExpanded(editor.selection)) {\n    const _entries = getNodeEntries<TElement>(editor, { block: true });\n    const entries = [..._entries];\n\n    const eqListStyleType = areEqListStyleType(editor, entries, {\n      listStyleType,\n    });\n\n    if (eqListStyleType) {\n      withoutNormalizing(editor, () => {\n        entries.forEach((entry) => {\n          const [node, path] = entry;\n\n          const indent = node[KEY_INDENT] as number;\n\n          unsetNodes(editor, KEY_LIST_STYLE_TYPE, { at: path });\n          if (indent > 1) {\n            setElements(editor, { [KEY_INDENT]: indent - 1 }, { at: path });\n          } else {\n            unsetNodes(editor, KEY_INDENT, { at: path });\n          }\n          // setIndentListNode(editor, {\n          //   listStyleType,\n          //   indent: node[KEY_INDENT],\n          //   at: path,\n          // });\n        });\n      });\n      return;\n    }\n\n    setIndentListNodes(editor, entries, { listStyleType });\n  }\n};\n","import {\n  getBlockAbove,\n  isBlockAboveEmpty,\n  KeyboardHandlerReturnType,\n  PlateEditor,\n  TElement,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\nimport isHotkey from 'is-hotkey';\nimport { outdentList } from './transforms/index';\nimport {\n  IndentListPlugin,\n  KEY_LIST_STYLE_TYPE,\n} from './createIndentListPlugin';\n\nexport const onKeyDownIndentList = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>\n>(\n  editor: E,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  plugin: WithPlatePlugin<IndentListPlugin, V, E>\n): KeyboardHandlerReturnType => (e) => {\n  if (e.defaultPrevented) return;\n  if (!editor.selection) return;\n\n  const entry = getBlockAbove(editor);\n  if (!entry) return;\n\n  const node = entry[0] as TElement;\n\n  const listStyleType = node[KEY_LIST_STYLE_TYPE] as string | undefined;\n  if (!listStyleType) return;\n\n  if (isHotkey('Enter', e)) {\n    if (isBlockAboveEmpty(editor) && node.indent) {\n      outdentList(editor);\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n};\n","import {\n  isDefined,\n  TEditor,\n  TNodeEntry,\n  unsetNodes,\n  Value,\n} from '@udecode/plate-common';\nimport { KEY_LIST_START } from '../createIndentListPlugin';\n\n/**\n * If there is no previous list item and node list start is defined, unset list start (1).\n */\nexport const normalizeFirstIndentListStart = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry\n) => {\n  if (isDefined(node[KEY_LIST_START])) {\n    unsetNodes(editor, KEY_LIST_START, { at: path });\n    return true;\n  }\n};\n","import {\n  EElement,\n  EElementEntry,\n  getNode,\n  setElements,\n  TEditor,\n  TNodeEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport {\n  KEY_LIST_RESTART,\n  KEY_LIST_START,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { getNextIndentList } from '../queries/getNextIndentList';\nimport { getPreviousIndentList } from '../queries/getPreviousIndentList';\nimport { GetSiblingIndentListOptions } from '../queries/getSiblingIndentList';\nimport { normalizeFirstIndentListStart } from './normalizeFirstIndentListStart';\n\nexport const normalizeNextIndentListStart = <V extends Value>(\n  editor: TEditor<V>,\n  entry: TNodeEntry,\n  prevEntry?: TNodeEntry\n) => {\n  const [node, path] = entry;\n  const [prevNode] = prevEntry ?? [null];\n\n  const prevListStart = (prevNode?.[KEY_LIST_START] as number) ?? 1;\n  const currListStart = (node[KEY_LIST_START] as number) ?? 1;\n  const restart = node[KEY_LIST_RESTART];\n  const listStart = restart == null ? prevListStart + 1 : restart;\n\n  if (currListStart !== listStart) {\n    setElements(editor, { [KEY_LIST_START]: listStart }, { at: path });\n    return true;\n  }\n\n  return false;\n};\n\nexport const normalizeIndentListStart = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n) => {\n  return withoutNormalizing(editor, () => {\n    const [node] = entry;\n    const listStyleType = node[KEY_LIST_STYLE_TYPE];\n\n    if (!listStyleType) return;\n\n    let normalized: boolean | undefined = false;\n\n    let prevEntry = getPreviousIndentList(editor, entry, options);\n\n    if (!prevEntry) {\n      normalized = normalizeFirstIndentListStart(editor, entry);\n\n      // if no prevEntry and not normalized, nothing happened: next should not be normalized\n      if (!normalized) return;\n    }\n\n    let normalizeNext = true;\n\n    let currEntry: EElementEntry<V> | undefined = entry;\n\n    // normalize next until current is not normalized\n    while (normalizeNext) {\n      normalizeNext =\n        normalizeNextIndentListStart(editor, currEntry, prevEntry) ||\n        normalized;\n\n      if (normalizeNext) normalized = true;\n\n      // get the node again after setNodes\n      prevEntry = [getNode<N>(editor, currEntry[1])!, currEntry[1]];\n      currEntry = getNextIndentList(editor, currEntry, options);\n\n      if (!currEntry) break;\n    }\n\n    return normalized;\n  });\n};\n","import {\n  isDefined,\n  TEditor,\n  TNodeEntry,\n  unsetNodes,\n  Value,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\n/**\n * Unset KEY_LIST_STYLE_TYPE, KEY_LIST_START if KEY_INDENT is not defined.\n */\nexport const normalizeIndentListNotIndented = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry\n) => {\n  if (\n    !isDefined(node[KEY_INDENT]) &&\n    (node[KEY_LIST_STYLE_TYPE] || node[KEY_LIST_START])\n  ) {\n    unsetNodes(editor, [KEY_LIST_STYLE_TYPE, KEY_LIST_START], { at: path });\n    return true;\n  }\n};\n","import {\n  ENodeEntry,\n  TEditor,\n  TElement,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-common';\nimport { normalizeIndentListNotIndented } from './normalizers/normalizeIndentListNotIndented';\nimport { normalizeIndentListStart } from './normalizers/normalizeIndentListStart';\nimport { IndentListPlugin } from './createIndentListPlugin';\n\nexport const normalizeIndentList = <V extends Value>(\n  editor: TEditor<V>,\n  { getSiblingIndentListOptions }: IndentListPlugin = {}\n) => {\n  const { normalizeNode } = editor;\n\n  return ([node, path]: ENodeEntry<V>) => {\n    const normalized = withoutNormalizing(editor, () => {\n      if (normalizeIndentListNotIndented(editor, [node, path])) return true;\n      if (\n        normalizeIndentListStart<TElement, Value>(\n          editor,\n          [node as TElement, path],\n          getSiblingIndentListOptions\n        )\n      )\n        return true;\n    });\n    if (normalized) return;\n\n    return normalizeNode([node, path]);\n  };\n};\n","import {\n  createPathRef,\n  getNode,\n  PlateEditor,\n  TElement,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { PathRef } from 'slate';\nimport { normalizeIndentListStart } from './normalizers/normalizeIndentListStart';\nimport { getNextIndentList } from './queries/getNextIndentList';\nimport { getPreviousIndentList } from './queries/getPreviousIndentList';\nimport {\n  IndentListPlugin,\n  KEY_LIST_STYLE_TYPE,\n} from './createIndentListPlugin';\nimport { normalizeIndentList } from './normalizeIndentList';\nimport { ListStyleType } from './types';\n\nexport const withIndentList = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>\n>(\n  editor: E,\n  { options }: WithPlatePlugin<IndentListPlugin, V, E>\n) => {\n  const { apply } = editor;\n\n  const { getSiblingIndentListOptions } = options;\n\n  editor.normalizeNode = normalizeIndentList<Value>(editor, options);\n\n  editor.apply = (operation) => {\n    const { path } = operation as any;\n\n    let nodeBefore: TElement | null = null;\n\n    if (operation.type === 'set_node') {\n      nodeBefore = getNode<TElement>(editor, path);\n    }\n\n    // If there is a previous indent list, the inserted indent list style type should be the same.\n    // Only for lower-roman and upper-roman as it overlaps with lower-alpha and upper-alpha.\n    if (operation.type === 'insert_node') {\n      const listStyleType = operation.node[KEY_LIST_STYLE_TYPE];\n\n      if (\n        listStyleType &&\n        ['lower-roman', 'upper-roman'].includes(listStyleType as ListStyleType)\n      ) {\n        const prevNodeEntry = getPreviousIndentList<TElement>(\n          editor,\n          [operation.node as TElement, path],\n          {\n            eqIndent: false,\n            breakOnEqIndentNeqListStyleType: false,\n            ...getSiblingIndentListOptions,\n          }\n        );\n\n        if (prevNodeEntry) {\n          const prevListStyleType = prevNodeEntry[0][KEY_LIST_STYLE_TYPE];\n\n          if (\n            prevListStyleType === ListStyleType.LowerAlpha &&\n            listStyleType === ListStyleType.LowerRoman\n          ) {\n            operation.node[KEY_LIST_STYLE_TYPE] = ListStyleType.LowerAlpha;\n          } else if (\n            prevListStyleType === ListStyleType.UpperAlpha &&\n            listStyleType === ListStyleType.UpperRoman\n          ) {\n            operation.node[KEY_LIST_STYLE_TYPE] = ListStyleType.UpperAlpha;\n          }\n        }\n      }\n    }\n\n    // FIXME: delete first list\n    let nextIndentListPathRef: PathRef | null = null;\n    if (\n      operation.type === 'merge_node' &&\n      operation.properties[KEY_LIST_STYLE_TYPE]\n    ) {\n      const node = getNode<TElement>(editor, path);\n\n      if (node) {\n        const nextNodeEntryBefore = getNextIndentList<TElement>(\n          editor,\n          [node, path],\n          getSiblingIndentListOptions\n        );\n        if (nextNodeEntryBefore) {\n          nextIndentListPathRef = createPathRef(editor, nextNodeEntryBefore[1]);\n        }\n      }\n    }\n\n    apply(operation);\n\n    if (operation.type === 'merge_node') {\n      const { properties } = operation;\n\n      if (properties[KEY_LIST_STYLE_TYPE]) {\n        const node = getNode<TElement>(editor, path);\n        if (!node) return;\n\n        // const prevNodeEntry = getPreviousIndentList(\n        //   editor,\n        //   [node, path],\n        //   getSiblingIndentListOptions\n        // );\n        // if (!prevNodeEntry) {\n        // normalizeIndentListStart(\n        //   editor,\n        //   [node as any, path],\n        //   getSiblingIndentListOptions\n        // );\n        //   return;\n        // }\n        // normalizeIndentListStart(\n        //   editor,\n        //   prevNodeEntry,\n        //   getSiblingIndentListOptions\n        // );\n\n        normalizeIndentListStart<TElement>(\n          editor,\n          [node, path],\n          getSiblingIndentListOptions\n        );\n\n        if (nextIndentListPathRef) {\n          const nextPath = nextIndentListPathRef.unref();\n          if (nextPath) {\n            const nextNode = getNode<TElement>(editor, nextPath);\n            if (nextNode) {\n              normalizeIndentListStart<TElement>(\n                editor,\n                [nextNode, nextPath],\n                getSiblingIndentListOptions\n              );\n            }\n          }\n        }\n      }\n    }\n\n    if (nodeBefore) {\n      if (operation.type === 'set_node') {\n        const prevListStyleType = operation.properties[KEY_LIST_STYLE_TYPE];\n        const listStyleType = operation.newProperties[KEY_LIST_STYLE_TYPE];\n\n        // Remove list style type\n        if (prevListStyleType && !listStyleType) {\n          const node = getNode(editor, path);\n          if (!node) return;\n\n          const nextNodeEntry = getNextIndentList<TElement>(\n            editor,\n            [nodeBefore, path],\n            getSiblingIndentListOptions\n          );\n          if (!nextNodeEntry) return;\n\n          normalizeIndentListStart<TElement>(\n            editor,\n            nextNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n\n        // Update list style type\n        if (\n          (prevListStyleType || listStyleType) &&\n          prevListStyleType !== listStyleType\n        ) {\n          const node = getNode<TElement>(editor, path);\n          if (!node) return;\n\n          /**\n           * Case:\n           * - 1-<o>-1 <- toggle ol\n           * - <1>-1-2 <- normalize\n           * - 1-2-3\n           */\n          // const prevNodeEntry = getPreviousIndentList(\n          //   editor,\n          //   [node, path],\n          //   getSiblingIndentListOptions\n          // );\n          // if (prevNodeEntry) {\n          //   normalizeIndentListStart(\n          //     editor,\n          //     prevNodeEntry,\n          //     getSiblingIndentListOptions\n          //   );\n          // }\n\n          /**\n           * Case:\n           * - 1-<2>-3 <- toggle ul\n           * - 1-o-<3> <- normalize\n           * - 1-o-1\n           */\n          let nextNodeEntry = getNextIndentList<TElement>(\n            editor,\n            [nodeBefore, path],\n            getSiblingIndentListOptions\n          );\n          if (nextNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              nextNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n          nextNodeEntry = getNextIndentList<TElement>(\n            editor,\n            [node, path],\n            getSiblingIndentListOptions\n          );\n          if (nextNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              nextNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n        }\n\n        const prevIndent = operation.properties[KEY_INDENT];\n        const indent = operation.newProperties[KEY_INDENT];\n\n        // Update indent\n        if (prevIndent !== indent) {\n          const node = getNode<TElement>(editor, path);\n          if (!node) return;\n\n          /**\n           * Case:\n           * - 1-<o>-1 <- indent\n           * - <1>-1o-1 <- normalize node before\n           * - 1-1o-2\n           */\n          let prevNodeEntry = getPreviousIndentList<TElement>(\n            editor,\n            [nodeBefore, path],\n            {\n              eqIndent: false,\n              breakOnLowerIndent: false,\n              breakOnEqIndentNeqListStyleType: false,\n              ...getSiblingIndentListOptions,\n            }\n          );\n          if (prevNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              prevNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n\n          /**\n           * Case:\n           * - 11-<1>-11 <- indent\n           * - <11>-11-12 <- normalize prev node after\n           * - 11-12-13\n           */\n          prevNodeEntry = getPreviousIndentList<TElement>(\n            editor,\n            [node, path],\n            {\n              eqIndent: false,\n              breakOnLowerIndent: false,\n              breakOnEqIndentNeqListStyleType: false,\n              ...getSiblingIndentListOptions,\n            }\n          );\n          if (prevNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              prevNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n\n          /**\n           * Case:\n           * - 11-<12>-13 <- outdent\n           * - 11-2-<13> <- normalize next node before\n           * - 11-2-11\n           */\n          let nextNodeEntry = getNextIndentList<TElement>(\n            editor,\n            [nodeBefore, path],\n            {\n              eqIndent: false,\n              breakOnLowerIndent: false,\n              breakOnEqIndentNeqListStyleType: false,\n            }\n          );\n          if (nextNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              nextNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n\n          /**\n           * Case:\n           * - 1-<1o>-2 <- outdent\n           * - 1-o-<2> <- normalize next node after\n           * - 1-o-1\n           */\n          nextNodeEntry = getNextIndentList<TElement>(editor, [node, path], {\n            eqIndent: false,\n            breakOnLowerIndent: false,\n            breakOnEqIndentNeqListStyleType: false,\n          });\n          if (nextNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              nextNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n        }\n      }\n    }\n  };\n\n  return editor;\n};\n","import {\n  createPluginFactory,\n  ELEMENT_DEFAULT,\n  getPluginType,\n  isHtmlBlockElement,\n  KEY_DESERIALIZE_HTML,\n  postCleanHtml,\n  TElement,\n  traverseHtmlElements,\n} from '@udecode/plate-common';\nimport { GetSiblingIndentListOptions } from './queries/getSiblingIndentList';\nimport { injectIndentListComponent } from './injectIndentListComponent';\nimport { onKeyDownIndentList } from './onKeyDownIndentList';\nimport { ListStyleType } from './types';\nimport { withIndentList } from './withIndentList';\n\nexport const KEY_LIST_STYLE_TYPE = 'listStyleType';\nexport const KEY_LIST_START = 'listStart';\nexport const KEY_LIST_RESTART = 'listRestart';\n\nexport interface IndentListPlugin {\n  getSiblingIndentListOptions?: GetSiblingIndentListOptions<TElement>;\n\n  /**\n   * Map html element to list style type.\n   */\n  getListStyleType?: (element: HTMLElement) => ListStyleType;\n}\n\nexport const createIndentListPlugin = createPluginFactory<IndentListPlugin>({\n  key: KEY_LIST_STYLE_TYPE,\n  inject: {\n    belowComponent: injectIndentListComponent,\n  },\n  withOverrides: withIndentList,\n  handlers: {\n    onKeyDown: onKeyDownIndentList,\n  },\n  options: {\n    getListStyleType: (element) => element.style.listStyleType as ListStyleType,\n  },\n  then: (editor, { options }) => ({\n    inject: {\n      pluginsByKey: {\n        [KEY_DESERIALIZE_HTML]: {\n          editor: {\n            insertData: {\n              transformData: (data) => {\n                const document = new DOMParser().parseFromString(\n                  data,\n                  'text/html'\n                );\n                const { body } = document;\n\n                traverseHtmlElements(body, (element) => {\n                  if (element.tagName === 'LI') {\n                    const { childNodes } = element;\n\n                    // replace li block children (e.g. p) by their children\n                    const liChildren: Node[] = [];\n                    childNodes.forEach((child) => {\n                      if (isHtmlBlockElement(child as Element)) {\n                        liChildren.push(...child.childNodes);\n                      } else {\n                        liChildren.push(child);\n                      }\n                    });\n\n                    element.replaceChildren(...liChildren);\n\n                    // TODO: recursive check on ul parents for indent\n\n                    return false;\n                  }\n\n                  return true;\n                });\n\n                return postCleanHtml(body.innerHTML);\n              },\n            },\n          },\n        },\n      },\n    },\n    deserializeHtml: {\n      isElement: true,\n      getNode: (element) => ({\n        type: getPluginType(editor, ELEMENT_DEFAULT),\n        listStyleType: options.getListStyleType?.(element),\n        // gdoc uses aria-level attribute\n        indent: Number(element.getAttribute('aria-level')),\n      }),\n      rules: [\n        {\n          validNodeName: 'LI',\n        },\n      ],\n    },\n  }),\n});\n","import {\n  EElement,\n  PlateEditor,\n  TElement,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { getIndentListSiblings, GetIndentListSiblingsOptions } from './index';\n\n/**\n * Get the first sibling list style type at the given indent.\n * If none, return the entry list style type.\n */\nexport const getSiblingListStyleType = <V extends Value = Value>(\n  editor: PlateEditor<V>,\n  {\n    entry,\n    indent,\n    ...options\n  }: {\n    entry: TNodeEntry<TElement>;\n    indent: number;\n  } & GetIndentListSiblingsOptions<EElement<V>, V>\n) => {\n  const siblingEntry: TNodeEntry<TElement> = [\n    { ...entry[0], indent },\n    entry[1],\n  ];\n\n  const siblings = getIndentListSiblings(editor, siblingEntry as any, {\n    eqIndent: true,\n    current: false,\n    breakOnEqIndentNeqListStyleType: false,\n    ...options,\n  });\n\n  return (siblings.length\n    ? siblings[0][0][KEY_LIST_STYLE_TYPE]\n    : entry[0][KEY_LIST_STYLE_TYPE]) as ListStyleType;\n};\n"],"names":["ListStyleType","injectIndentListComponent","props","element","listStyleType","KEY_LIST_STYLE_TYPE","listStart","KEY_LIST_START","className","clsx","style","padding","margin","Disc","Circle","Square","includes","children","React","indentList","editor","options","setIndent","offset","setNodesProps","outdentList","unsetNodesProps","setIndentListNode","indent","at","newIndent","setElements","KEY_INDENT","setIndentListNodes","entries","withoutNormalizing","forEach","entry","node","path","getSiblingIndentList","getPreviousEntry","getNextEntry","query","eqIndent","breakQuery","breakOnLowerIndent","breakOnEqIndentNeqListStyleType","getSiblingEntry","nextEntry","nextNode","nextPath","nextIndent","isDefined","valid","getNextIndentList","currPath","Path","next","getNode","undefined","getPreviousIndentList","prevPath","getPreviousPath","prevNode","getIndentListSiblings","previous","current","siblings","iterEntry","prevEntry","push","setIndentListSiblingNodes","getSiblingIndentListOptions","areEqListStyleType","eqListStyleType","block","toggleIndentListSet","toggleIndentListUnset","unsetNodes","toggleIndentList","getPluginOptions","isCollapsed","selection","getBlockAbove","isExpanded","_entries","getNodeEntries","onKeyDownIndentList","plugin","e","defaultPrevented","isHotkey","isBlockAboveEmpty","stopPropagation","preventDefault","normalizeFirstIndentListStart","normalizeNextIndentListStart","prevListStart","currListStart","restart","KEY_LIST_RESTART","normalizeIndentListStart","normalized","normalizeNext","currEntry","normalizeIndentListNotIndented","normalizeIndentList","normalizeNode","withIndentList","apply","operation","nodeBefore","type","prevNodeEntry","prevListStyleType","LowerAlpha","LowerRoman","UpperAlpha","UpperRoman","nextIndentListPathRef","properties","nextNodeEntryBefore","createPathRef","unref","newProperties","nextNodeEntry","prevIndent","createIndentListPlugin","createPluginFactory","key","inject","belowComponent","withOverrides","handlers","onKeyDown","getListStyleType","then","pluginsByKey","KEY_DESERIALIZE_HTML","insertData","transformData","data","document","DOMParser","parseFromString","body","traverseHtmlElements","tagName","childNodes","liChildren","child","isHtmlBlockElement","replaceChildren","postCleanHtml","innerHTML","deserializeHtml","isElement","getPluginType","ELEMENT_DEFAULT","Number","getAttribute","rules","validNodeName","getSiblingListStyleType","siblingEntry","length"],"mappings":"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"}