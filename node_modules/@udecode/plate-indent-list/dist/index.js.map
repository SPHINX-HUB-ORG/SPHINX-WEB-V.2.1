{"version":3,"file":"index.js","sources":["../../../../node_modules/clsx/dist/clsx.m.js","../src/types.ts","../src/injectIndentListComponent.tsx","../src/queries/getSiblingIndentList.ts","../src/queries/getNextIndentList.ts","../src/queries/getPreviousIndentList.ts","../src/normalizers/normalizeFirstIndentListStart.ts","../src/normalizers/normalizeIndentListStart.ts","../src/normalizers/normalizeIndentListNotIndented.ts","../src/normalizeIndentList.ts","../src/withIndentList.ts","../src/createIndentListPlugin.ts","../src/queries/areEqListStyleType.ts","../src/queries/getIndentListSiblings.ts","../src/transforms/indentList.ts","../src/transforms/outdentList.ts","../src/transforms/setIndentListNode.ts","../src/transforms/setIndentListNodes.ts","../src/transforms/setIndentListSiblingNodes.ts","../src/transforms/toggleIndentListSet.ts","../src/transforms/toggleIndentListUnset.ts","../src/transforms/toggleIndentList.ts"],"sourcesContent":["function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","export enum ListStyleType {\n  // The marker is traditional Armenian numbering\n  Armenian = 'armenian',\n\n  // The marker is a circle\n  Circle = 'circle',\n\n  // The marker is plain ideographic numbers\n  CjkIdeographic = 'cjk-ideographic',\n\n  // The marker is a number. This is default for <ol>\n  Decimal = 'decimal',\n\n  // The marker is a number with leading zeros (01, 02, 03, etc.)\n  DecimalLeadingZero = 'decimal-leading-zero',\n\n  // The marker is a filled circle. This is default for <ul>\n  Disc = 'disc',\n\n  // The marker is traditional Georgian numbering\n  Georgian = 'georgian',\n\n  // The marker is traditional Hebrew numbering\n  Hebrew = 'hebrew',\n\n  // The marker is traditional Hiragana numbering\n  Hiragana = 'hiragana',\n\n  // The marker is traditional Hiragana iroha numbering\n  HiraganaIroha = 'hiragana-iroha',\n\n  // The marker is traditional Katakana numbering\n  Katakana = 'katakana',\n\n  // The marker is traditional Katakana iroha numbering\n  KatakanaIroha = 'katakana-iroha',\n\n  // The marker is lower-alpha (a, b, c, d, e, etc.)\n  LowerAlpha = 'lower-alpha',\n\n  // The marker is lower-greek\n  LowerGreek = 'lower-greek',\n\n  // The marker is lower-latin (a, b, c, d, e, etc.)\n  LowerLatin = 'lower-latin',\n\n  // The marker is lower-roman (i, ii, iii, iv, v, etc.)\n  LowerRoman = 'lower-roman',\n\n  // No marker is shown\n  None = 'none',\n\n  // The marker is a square\n  Square = 'square',\n\n  // The marker is upper-alpha (A, B, C, D, E, etc.)\n  UpperAlpha = 'upper-alpha',\n\n  // The marker is upper-latin (A, B, C, D, E, etc.)\n  UpperLatin = 'upper-latin',\n\n  // The marker is upper-roman (I, II, III, IV, V, etc.)\n  UpperRoman = 'upper-roman',\n\n  // Sets this property to its default value. Read about initial\n  Initial = 'initial',\n\n  // Inherits this property from its parent element. Read about inherit\n  Inherit = 'inherit',\n}\n","import React, { CSSProperties } from 'react';\nimport {\n  InjectComponentProps,\n  InjectComponentReturnType,\n  Value,\n} from '@udecode/plate-core';\nimport clsx from 'clsx';\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from './createIndentListPlugin';\nimport { ListStyleType } from './types';\n\nexport const injectIndentListComponent = <V extends Value = Value>(\n  props: InjectComponentProps<V>\n): InjectComponentReturnType<V> => {\n  const { element } = props;\n\n  const listStyleType = element[KEY_LIST_STYLE_TYPE] as string;\n  const listStart = element[KEY_LIST_START] as number;\n\n  if (listStyleType) {\n    let className = clsx(`slate-${KEY_LIST_STYLE_TYPE}-${listStyleType}`);\n    const style: CSSProperties = {\n      padding: 0,\n      margin: 0,\n      listStyleType,\n    };\n\n    if (\n      [ListStyleType.Disc, ListStyleType.Circle, ListStyleType.Square].includes(\n        listStyleType as ListStyleType\n      )\n    ) {\n      className = clsx(className, 'slate-list-bullet');\n\n      return ({ children }) => (\n        <ul style={style} className={className}>\n          <li>{children}</li>\n        </ul>\n      );\n    }\n\n    className = clsx(className, 'slate-list-number');\n\n    return ({ children }) => (\n      <ol style={style} className={className} start={listStart}>\n        <li>{children}</li>\n      </ol>\n    );\n  }\n};\n","import {\n  EElement,\n  EElementEntry,\n  EElementOrText,\n  TEditor,\n  TNode,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\nexport interface GetSiblingIndentListOptions<\n  N extends EElement<V>,\n  V extends Value = Value\n> {\n  getPreviousEntry?: (\n    entry: TNodeEntry<EElementOrText<V>>\n  ) => TNodeEntry<N> | undefined;\n  getNextEntry?: (\n    entry: TNodeEntry<EElementOrText<V>>\n  ) => TNodeEntry<N> | undefined;\n  /**\n   * Query to validate lookup. If false, check the next sibling.\n   */\n  query?: (siblingNode: TNode) => boolean | undefined;\n  /**\n   * Query to break lookup\n   */\n  eqIndent?: boolean;\n  breakQuery?: (siblingNode: TNode) => boolean | undefined;\n  breakOnLowerIndent?: boolean;\n  breakOnEqIndentNeqListStyleType?: boolean;\n}\n\n/**\n * Get the next sibling indent list node.\n * Default query: the sibling node should have the same listStyleType.\n */\nexport const getSiblingIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  [node, path]: EElementEntry<V>,\n  {\n    getPreviousEntry,\n    getNextEntry,\n    query,\n    eqIndent = true,\n    breakQuery,\n    breakOnLowerIndent = true,\n    breakOnEqIndentNeqListStyleType = true,\n  }: GetSiblingIndentListOptions<N, V>\n): TNodeEntry<N> | undefined => {\n  if (!getPreviousEntry && !getNextEntry) return;\n\n  const getSiblingEntry = getNextEntry ?? getPreviousEntry!;\n\n  let nextEntry = getSiblingEntry([node, path]);\n\n  while (true) {\n    if (!nextEntry) return;\n\n    const [nextNode, nextPath] = nextEntry;\n\n    const indent = node[KEY_INDENT] as number;\n    const nextIndent = nextNode[KEY_INDENT] as number;\n\n    if (!nextIndent) return;\n\n    if (breakQuery && breakQuery(nextNode)) return;\n\n    if (breakOnLowerIndent && nextIndent < indent) return;\n    if (\n      breakOnEqIndentNeqListStyleType &&\n      nextIndent === indent &&\n      nextNode[KEY_LIST_STYLE_TYPE] !== node[KEY_LIST_STYLE_TYPE]\n    )\n      return;\n\n    let valid = !query || query(nextNode as TNode);\n    if (valid) {\n      valid = !eqIndent || nextIndent === indent;\n      if (valid) return [nextNode, nextPath];\n    }\n\n    nextEntry = getSiblingEntry(nextEntry);\n  }\n};\n","import {\n  EElement,\n  EElementEntry,\n  getNode,\n  TEditor,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-core';\nimport { Path } from 'slate';\nimport {\n  getSiblingIndentList,\n  GetSiblingIndentListOptions,\n} from './getSiblingIndentList';\n\n/**\n * Get the next indent list.\n */\nexport const getNextIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n): TNodeEntry<N> | undefined => {\n  return getSiblingIndentList(editor, entry, {\n    getNextEntry: ([, currPath]) => {\n      const nextPath = Path.next(currPath);\n      const nextNode = getNode<N>(editor, nextPath);\n      if (!nextNode) return;\n\n      return [nextNode, nextPath];\n    },\n    ...options,\n    getPreviousEntry: undefined,\n  });\n};\n","import {\n  EElement,\n  EElementEntry,\n  getNode,\n  getPreviousPath,\n  TEditor,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-core';\nimport {\n  getSiblingIndentList,\n  GetSiblingIndentListOptions,\n} from './getSiblingIndentList';\n\n/**\n * Get the previous indent list node.\n */\nexport const getPreviousIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n): TNodeEntry<N> | undefined => {\n  return getSiblingIndentList(editor, entry, {\n    getPreviousEntry: ([, currPath]) => {\n      const prevPath = getPreviousPath(currPath);\n      if (!prevPath) return;\n\n      const prevNode = getNode<N>(editor, prevPath);\n      if (!prevNode) return;\n\n      return [prevNode, prevPath];\n    },\n    ...options,\n    getNextEntry: undefined,\n  });\n};\n","import {\n  isDefined,\n  TEditor,\n  TNodeEntry,\n  unsetNodes,\n  Value,\n} from '@udecode/plate-core';\nimport { KEY_LIST_START } from '../createIndentListPlugin';\n\n/**\n * If there is no previous list item and node list start is defined, unset list start (1).\n */\nexport const normalizeFirstIndentListStart = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry\n) => {\n  if (isDefined(node[KEY_LIST_START])) {\n    unsetNodes(editor, KEY_LIST_START, { at: path });\n    return true;\n  }\n};\n","import {\n  EElement,\n  EElementEntry,\n  getNode,\n  setElements,\n  TEditor,\n  TNodeEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { getNextIndentList } from '../queries/getNextIndentList';\nimport { getPreviousIndentList } from '../queries/getPreviousIndentList';\nimport { GetSiblingIndentListOptions } from '../queries/getSiblingIndentList';\nimport { normalizeFirstIndentListStart } from './normalizeFirstIndentListStart';\n\nexport const normalizeNextIndentListStart = <V extends Value>(\n  editor: TEditor<V>,\n  entry: TNodeEntry,\n  prevEntry?: TNodeEntry\n) => {\n  const [node, path] = entry;\n  const [prevNode] = prevEntry ?? [null];\n\n  const prevListStart = (prevNode?.[KEY_LIST_START] as number) ?? 1;\n  const currListStart = (node[KEY_LIST_START] as number) ?? 1;\n\n  const listStart = prevListStart + 1;\n\n  if (currListStart !== listStart) {\n    setElements(editor, { [KEY_LIST_START]: listStart }, { at: path });\n    return true;\n  }\n\n  return false;\n};\n\nexport const normalizeIndentListStart = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n) => {\n  return withoutNormalizing(editor, () => {\n    const [node] = entry;\n    const listStyleType = node[KEY_LIST_STYLE_TYPE];\n\n    if (!listStyleType) return;\n\n    let normalized: boolean | undefined = false;\n\n    let prevEntry = getPreviousIndentList(editor, entry, options);\n\n    if (!prevEntry) {\n      normalized = normalizeFirstIndentListStart(editor, entry);\n\n      // if no prevEntry and not normalized, nothing happened: next should not be normalized\n      if (!normalized) return;\n    }\n\n    let normalizeNext = true;\n\n    let currEntry: EElementEntry<V> | undefined = entry;\n\n    // normalize next until current is not normalized\n    while (normalizeNext) {\n      normalizeNext =\n        normalizeNextIndentListStart(editor, currEntry, prevEntry) ||\n        normalized;\n\n      if (normalizeNext) normalized = true;\n\n      // get the node again after setNodes\n      prevEntry = [getNode<N>(editor, currEntry[1])!, currEntry[1]];\n      currEntry = getNextIndentList(editor, currEntry, options);\n\n      if (!currEntry) break;\n    }\n\n    return normalized;\n  });\n};\n","import { TEditor, TNodeEntry, unsetNodes, Value } from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\n/**\n * Unset KEY_LIST_STYLE_TYPE, KEY_LIST_START if KEY_INDENT is not defined.\n */\nexport const normalizeIndentListNotIndented = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry\n) => {\n  if (\n    !node[KEY_INDENT] &&\n    (node[KEY_LIST_STYLE_TYPE] || node[KEY_LIST_START])\n  ) {\n    unsetNodes(editor, [KEY_LIST_STYLE_TYPE, KEY_LIST_START], { at: path });\n    return true;\n  }\n};\n","import {\n  ENodeEntry,\n  TEditor,\n  TElement,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { normalizeIndentListNotIndented } from './normalizers/normalizeIndentListNotIndented';\nimport { normalizeIndentListStart } from './normalizers/normalizeIndentListStart';\nimport { IndentListPlugin } from './createIndentListPlugin';\n\nexport const normalizeIndentList = <V extends Value>(\n  editor: TEditor<V>,\n  { getSiblingIndentListOptions }: IndentListPlugin = {}\n) => {\n  const { normalizeNode } = editor;\n\n  return ([node, path]: ENodeEntry<V>) => {\n    const normalized = withoutNormalizing(editor, () => {\n      if (normalizeIndentListNotIndented(editor, [node, path])) return true;\n      if (\n        normalizeIndentListStart<TElement, Value>(\n          editor,\n          [node as TElement, path],\n          getSiblingIndentListOptions\n        )\n      )\n        return true;\n    });\n    if (normalized) return;\n\n    return normalizeNode([node, path]);\n  };\n};\n","import {\n  createPathRef,\n  getNode,\n  PlateEditor,\n  TElement,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { PathRef } from 'slate';\nimport { normalizeIndentListStart } from './normalizers/normalizeIndentListStart';\nimport { getNextIndentList } from './queries/getNextIndentList';\nimport { getPreviousIndentList } from './queries/getPreviousIndentList';\nimport {\n  IndentListPlugin,\n  KEY_LIST_STYLE_TYPE,\n} from './createIndentListPlugin';\nimport { normalizeIndentList } from './normalizeIndentList';\nimport { ListStyleType } from './types';\n\nexport const withIndentList = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>\n>(\n  editor: E,\n  { options }: WithPlatePlugin<IndentListPlugin, V, E>\n) => {\n  const { apply } = editor;\n\n  const { getSiblingIndentListOptions } = options;\n\n  editor.normalizeNode = normalizeIndentList<Value>(editor, options);\n\n  editor.apply = (operation) => {\n    const { path } = operation as any;\n\n    let nodeBefore: TElement | null = null;\n\n    if (operation.type === 'set_node') {\n      nodeBefore = getNode<TElement>(editor, path);\n    }\n\n    // If there is a previous indent list, the inserted indent list style type should be the same.\n    // Only for lower-roman and upper-roman as it overlaps with lower-alpha and upper-alpha.\n    if (operation.type === 'insert_node') {\n      const listStyleType = operation.node[KEY_LIST_STYLE_TYPE];\n\n      if (\n        listStyleType &&\n        ['lower-roman', 'upper-roman'].includes(listStyleType as ListStyleType)\n      ) {\n        const prevNodeEntry = getPreviousIndentList<TElement>(\n          editor,\n          [operation.node as TElement, path],\n          {\n            eqIndent: false,\n            breakOnEqIndentNeqListStyleType: false,\n            ...getSiblingIndentListOptions,\n          }\n        );\n\n        if (prevNodeEntry) {\n          const prevListStyleType = prevNodeEntry[0][KEY_LIST_STYLE_TYPE];\n\n          if (\n            prevListStyleType === ListStyleType.LowerAlpha &&\n            listStyleType === ListStyleType.LowerRoman\n          ) {\n            operation.node[KEY_LIST_STYLE_TYPE] = ListStyleType.LowerAlpha;\n          } else if (\n            prevListStyleType === ListStyleType.UpperAlpha &&\n            listStyleType === ListStyleType.UpperRoman\n          ) {\n            operation.node[KEY_LIST_STYLE_TYPE] = ListStyleType.UpperAlpha;\n          }\n        }\n      }\n    }\n\n    // FIXME: delete first list\n    let nextIndentListPathRef: PathRef | null = null;\n    if (\n      operation.type === 'merge_node' &&\n      operation.properties[KEY_LIST_STYLE_TYPE]\n    ) {\n      const node = getNode<TElement>(editor, path);\n\n      if (node) {\n        const nextNodeEntryBefore = getNextIndentList<TElement>(\n          editor,\n          [node, path],\n          getSiblingIndentListOptions\n        );\n        if (nextNodeEntryBefore) {\n          nextIndentListPathRef = createPathRef(editor, nextNodeEntryBefore[1]);\n        }\n      }\n    }\n\n    apply(operation);\n\n    if (operation.type === 'merge_node') {\n      const { properties } = operation;\n\n      if (properties[KEY_LIST_STYLE_TYPE]) {\n        const node = getNode<TElement>(editor, path);\n        if (!node) return;\n\n        // const prevNodeEntry = getPreviousIndentList(\n        //   editor,\n        //   [node, path],\n        //   getSiblingIndentListOptions\n        // );\n        // if (!prevNodeEntry) {\n        // normalizeIndentListStart(\n        //   editor,\n        //   [node as any, path],\n        //   getSiblingIndentListOptions\n        // );\n        //   return;\n        // }\n        // normalizeIndentListStart(\n        //   editor,\n        //   prevNodeEntry,\n        //   getSiblingIndentListOptions\n        // );\n\n        normalizeIndentListStart<TElement>(\n          editor,\n          [node, path],\n          getSiblingIndentListOptions\n        );\n\n        if (nextIndentListPathRef) {\n          const nextPath = nextIndentListPathRef.unref();\n          if (nextPath) {\n            const nextNode = getNode<TElement>(editor, nextPath);\n            if (nextNode) {\n              normalizeIndentListStart<TElement>(\n                editor,\n                [nextNode, nextPath],\n                getSiblingIndentListOptions\n              );\n            }\n          }\n        }\n      }\n    }\n\n    if (nodeBefore) {\n      if (operation.type === 'set_node') {\n        const prevListStyleType = operation.properties[KEY_LIST_STYLE_TYPE];\n        const listStyleType = operation.newProperties[KEY_LIST_STYLE_TYPE];\n\n        // Remove list style type\n        if (prevListStyleType && !listStyleType) {\n          const node = getNode(editor, path);\n          if (!node) return;\n\n          const nextNodeEntry = getNextIndentList<TElement>(\n            editor,\n            [nodeBefore, path],\n            getSiblingIndentListOptions\n          );\n          if (!nextNodeEntry) return;\n\n          normalizeIndentListStart<TElement>(\n            editor,\n            nextNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n\n        // Update list style type\n        if (\n          (prevListStyleType || listStyleType) &&\n          prevListStyleType !== listStyleType\n        ) {\n          const node = getNode<TElement>(editor, path);\n          if (!node) return;\n\n          /**\n           * Case:\n           * - 1-<o>-1 <- toggle ol\n           * - <1>-1-2 <- normalize\n           * - 1-2-3\n           */\n          // const prevNodeEntry = getPreviousIndentList(\n          //   editor,\n          //   [node, path],\n          //   getSiblingIndentListOptions\n          // );\n          // if (prevNodeEntry) {\n          //   normalizeIndentListStart(\n          //     editor,\n          //     prevNodeEntry,\n          //     getSiblingIndentListOptions\n          //   );\n          // }\n\n          /**\n           * Case:\n           * - 1-<2>-3 <- toggle ul\n           * - 1-o-<3> <- normalize\n           * - 1-o-1\n           */\n          let nextNodeEntry = getNextIndentList<TElement>(\n            editor,\n            [nodeBefore, path],\n            getSiblingIndentListOptions\n          );\n          if (nextNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              nextNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n          nextNodeEntry = getNextIndentList<TElement>(\n            editor,\n            [node, path],\n            getSiblingIndentListOptions\n          );\n          if (nextNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              nextNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n        }\n\n        const prevIndent = operation.properties[KEY_INDENT];\n        const indent = operation.newProperties[KEY_INDENT];\n\n        // Update indent\n        if (prevIndent !== indent) {\n          const node = getNode<TElement>(editor, path);\n          if (!node) return;\n\n          /**\n           * Case:\n           * - 1-<o>-1 <- indent\n           * - <1>-1o-1 <- normalize node before\n           * - 1-1o-2\n           */\n          let prevNodeEntry = getPreviousIndentList<TElement>(\n            editor,\n            [nodeBefore, path],\n            {\n              eqIndent: false,\n              breakOnLowerIndent: false,\n              breakOnEqIndentNeqListStyleType: false,\n              ...getSiblingIndentListOptions,\n            }\n          );\n          if (prevNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              prevNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n\n          /**\n           * Case:\n           * - 11-<1>-11 <- indent\n           * - <11>-11-12 <- normalize prev node after\n           * - 11-12-13\n           */\n          prevNodeEntry = getPreviousIndentList<TElement>(\n            editor,\n            [node, path],\n            {\n              eqIndent: false,\n              breakOnLowerIndent: false,\n              breakOnEqIndentNeqListStyleType: false,\n              ...getSiblingIndentListOptions,\n            }\n          );\n          if (prevNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              prevNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n\n          /**\n           * Case:\n           * - 11-<12>-13 <- outdent\n           * - 11-2-<13> <- normalize next node before\n           * - 11-2-11\n           */\n          let nextNodeEntry = getNextIndentList<TElement>(\n            editor,\n            [nodeBefore, path],\n            {\n              eqIndent: false,\n              breakOnLowerIndent: false,\n              breakOnEqIndentNeqListStyleType: false,\n            }\n          );\n          if (nextNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              nextNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n\n          /**\n           * Case:\n           * - 1-<1o>-2 <- outdent\n           * - 1-o-<2> <- normalize next node after\n           * - 1-o-1\n           */\n          nextNodeEntry = getNextIndentList<TElement>(editor, [node, path], {\n            eqIndent: false,\n            breakOnLowerIndent: false,\n            breakOnEqIndentNeqListStyleType: false,\n          });\n          if (nextNodeEntry) {\n            normalizeIndentListStart<TElement>(\n              editor,\n              nextNodeEntry,\n              getSiblingIndentListOptions\n            );\n          }\n        }\n      }\n    }\n  };\n\n  return editor;\n};\n","import { createPluginFactory, TElement, Value } from '@udecode/plate-core';\nimport { GetSiblingIndentListOptions } from './queries/getSiblingIndentList';\nimport { injectIndentListComponent } from './injectIndentListComponent';\nimport { withIndentList } from './withIndentList';\n\nexport const KEY_LIST_STYLE_TYPE = 'listStyleType';\nexport const KEY_LIST_START = 'listStart';\n\nexport interface IndentListPlugin {\n  getSiblingIndentListOptions?: GetSiblingIndentListOptions<TElement, Value>;\n}\n\nexport const createIndentListPlugin = createPluginFactory<IndentListPlugin>({\n  key: KEY_LIST_STYLE_TYPE,\n  inject: {\n    belowComponent: injectIndentListComponent,\n  },\n  withOverrides: withIndentList,\n});\n","import { TEditor, TNodeEntry, Value } from '@udecode/plate-core';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport const areEqListStyleType = <V extends Value>(\n  editor: TEditor<V>,\n  entries: TNodeEntry[],\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  let eqListStyleType = true;\n\n  for (const entry of entries) {\n    const [block] = entry;\n\n    if (\n      !block[KEY_LIST_STYLE_TYPE] ||\n      block[KEY_LIST_STYLE_TYPE] !== listStyleType\n    ) {\n      eqListStyleType = false;\n      break;\n    }\n  }\n\n  return eqListStyleType;\n};\n","import {\n  EElement,\n  EElementEntry,\n  TEditor,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-core';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { getNextIndentList } from './getNextIndentList';\nimport { getPreviousIndentList } from './getPreviousIndentList';\nimport { GetSiblingIndentListOptions } from './getSiblingIndentList';\n\nexport interface GetIndentListSiblingsOptions<\n  N extends EElement<V>,\n  V extends Value = Value\n> extends Partial<GetSiblingIndentListOptions<N, V>> {\n  previous?: boolean;\n  current?: boolean;\n  next?: boolean;\n}\n\nexport const getIndentListSiblings = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  {\n    previous = true,\n    current = true,\n    next = true,\n    ...options\n  }: GetIndentListSiblingsOptions<N, V> = {}\n) => {\n  const siblings: TNodeEntry[] = [];\n\n  const [node] = entry;\n\n  if (!node[KEY_LIST_STYLE_TYPE]) return siblings;\n\n  let iterEntry = entry;\n\n  if (previous) {\n    while (true) {\n      const prevEntry = getPreviousIndentList<N, V>(editor, iterEntry, options);\n      if (!prevEntry) break;\n\n      siblings.push(prevEntry);\n\n      iterEntry = prevEntry;\n    }\n  }\n\n  if (current) {\n    siblings.push(entry);\n  }\n\n  if (next) {\n    iterEntry = entry;\n\n    while (true) {\n      const nextEntry = getNextIndentList(editor, iterEntry, options);\n      if (!nextEntry) break;\n\n      siblings.push(nextEntry);\n\n      iterEntry = nextEntry;\n    }\n  }\n\n  return siblings;\n};\n","import { PlateEditor, Value } from '@udecode/plate-core';\nimport { setIndent, SetIndentOptions } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport interface IndentListOptions<V extends Value = Value>\n  extends SetIndentOptions<V> {\n  listStyleType?: ListStyleType | string;\n}\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const indentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { listStyleType = ListStyleType.Disc, ...options }: IndentListOptions<V> = {}\n) => {\n  setIndent(editor, {\n    offset: 1,\n    setNodesProps: () => ({\n      [KEY_LIST_STYLE_TYPE]: listStyleType,\n    }),\n    ...options,\n  });\n};\n","import { PlateEditor, Value } from '@udecode/plate-core';\nimport { setIndent } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { IndentListOptions } from './indentList';\n\n/**\n * Decrease the indentation of the selected blocks.\n */\nexport const outdentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: IndentListOptions<V> = {}\n) => {\n  setIndent(editor, {\n    offset: -1,\n    unsetNodesProps: [KEY_LIST_STYLE_TYPE],\n    ...options,\n  });\n};\n","import { setElements, TEditor, Value } from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { Path } from 'slate';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport const setIndentListNode = <V extends Value>(\n  editor: TEditor<V>,\n  {\n    listStyleType = ListStyleType.Disc,\n    indent = 0,\n    at,\n  }: {\n    listStyleType?: string;\n    indent?: number;\n    at: Path;\n  }\n) => {\n  const newIndent = indent || indent + 1;\n\n  setElements(\n    editor,\n    { [KEY_LIST_STYLE_TYPE]: listStyleType, [KEY_INDENT]: newIndent },\n    { at }\n  );\n};\n","import {\n  TEditor,\n  TNodeEntry,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { setIndentListNode } from './setIndentListNode';\n\n/**\n * Set indent list to the given entries.\n * Add indent if listStyleType was not defined.\n */\nexport const setIndentListNodes = <V extends Value>(\n  editor: TEditor<V>,\n  entries: TNodeEntry[],\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  withoutNormalizing(editor, () => {\n    entries.forEach((entry) => {\n      const [node, path] = entry;\n\n      let indent = (node[KEY_INDENT] as number) ?? 0;\n      indent = node[KEY_LIST_STYLE_TYPE] ? indent : indent + 1;\n\n      setIndentListNode(editor, {\n        listStyleType,\n        indent,\n        at: path,\n      });\n    });\n  });\n};\n","import {\n  EElement,\n  EElementEntry,\n  TEditor,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport { getIndentListSiblings } from '../queries/getIndentListSiblings';\nimport { GetSiblingIndentListOptions } from '../queries/getSiblingIndentList';\nimport { ListStyleType } from '../types';\nimport { setIndentListNode } from './setIndentListNode';\n\n/**\n * Set indent list to entry + siblings.\n */\nexport const setIndentListSiblingNodes = <\n  N extends EElement<V>,\n  V extends Value = Value\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  {\n    listStyleType = ListStyleType.Disc,\n    getSiblingIndentListOptions,\n  }: {\n    listStyleType?: string;\n    getSiblingIndentListOptions?: GetSiblingIndentListOptions<N, V>;\n  }\n) => {\n  withoutNormalizing(editor, () => {\n    const siblings = getIndentListSiblings(\n      editor,\n      entry,\n      getSiblingIndentListOptions\n    );\n\n    siblings.forEach(([node, path]) => {\n      setIndentListNode(editor, {\n        listStyleType,\n        indent: node[KEY_INDENT] as number,\n        at: path,\n      });\n    });\n  });\n};\n","import { TEditor, TNodeEntry, Value } from '@udecode/plate-core';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { indentList } from './indentList';\n\n/**\n * Set indent list if not set.\n */\nexport const toggleIndentListSet = <V extends Value>(\n  editor: TEditor<V>,\n  [node]: TNodeEntry,\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  if (!node[KEY_LIST_STYLE_TYPE]) {\n    indentList(editor as any, {\n      listStyleType,\n    });\n    return true;\n  }\n};\n","import { TEditor, TNodeEntry, unsetNodes, Value } from '@udecode/plate-core';\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { outdentList } from './outdentList';\n\n/**\n * Unset list style type if already set.\n */\nexport const toggleIndentListUnset = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry,\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  if (listStyleType === node[KEY_LIST_STYLE_TYPE]) {\n    unsetNodes(editor as any, KEY_LIST_STYLE_TYPE, { at: path });\n    outdentList(editor as any, { listStyleType });\n    return true;\n  }\n};\n","import {\n  getBlockAbove,\n  getNodeEntries,\n  getPluginOptions,\n  isCollapsed,\n  isExpanded,\n  PlateEditor,\n  setElements,\n  TElement,\n  unsetNodes,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { KEY_INDENT } from '@udecode/plate-indent';\nimport {\n  IndentListPlugin,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { areEqListStyleType } from '../queries/areEqListStyleType';\nimport { IndentListOptions } from './indentList';\nimport { setIndentListNodes } from './setIndentListNodes';\nimport { setIndentListSiblingNodes } from './setIndentListSiblingNodes';\nimport { toggleIndentListSet } from './toggleIndentListSet';\nimport { toggleIndentListUnset } from './toggleIndentListUnset';\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const toggleIndentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: IndentListOptions<V>\n) => {\n  const { listStyleType } = options;\n\n  const { getSiblingIndentListOptions } = getPluginOptions<IndentListPlugin, V>(\n    editor,\n    KEY_LIST_STYLE_TYPE\n  );\n\n  if (isCollapsed(editor.selection)) {\n    const entry = getBlockAbove<TElement>(editor);\n    if (!entry) return;\n\n    if (toggleIndentListSet(editor, entry, { listStyleType })) {\n      return;\n    }\n\n    if (toggleIndentListUnset(editor, entry, { listStyleType })) {\n      return;\n    }\n\n    setIndentListSiblingNodes(editor, entry, {\n      listStyleType,\n      getSiblingIndentListOptions,\n    });\n    return;\n  }\n\n  if (isExpanded(editor.selection)) {\n    const _entries = getNodeEntries<TElement>(editor, { block: true });\n    const entries = [..._entries];\n\n    const eqListStyleType = areEqListStyleType(editor, entries, {\n      listStyleType,\n    });\n\n    if (eqListStyleType) {\n      withoutNormalizing(editor, () => {\n        entries.forEach((entry) => {\n          const [node, path] = entry;\n\n          const indent = node[KEY_INDENT] as number;\n\n          unsetNodes(editor, KEY_LIST_STYLE_TYPE, { at: path });\n          if (indent > 1) {\n            setElements(editor, { [KEY_INDENT]: indent - 1 }, { at: path });\n          } else {\n            unsetNodes(editor, KEY_INDENT, { at: path });\n          }\n          // setIndentListNode(editor, {\n          //   listStyleType,\n          //   indent: node[KEY_INDENT],\n          //   at: path,\n          // });\n        });\n      });\n      return;\n    }\n\n    setIndentListNodes(editor, entries, { listStyleType });\n  }\n};\n"],"names":["ListStyleType","injectIndentListComponent","props","element","listStyleType","KEY_LIST_STYLE_TYPE","listStart","KEY_LIST_START","className","clsx","style","padding","margin","Disc","Circle","Square","includes","children","React","getSiblingIndentList","editor","node","path","getPreviousEntry","getNextEntry","query","eqIndent","breakQuery","breakOnLowerIndent","breakOnEqIndentNeqListStyleType","getSiblingEntry","nextEntry","nextNode","nextPath","indent","KEY_INDENT","nextIndent","valid","getNextIndentList","entry","options","currPath","Path","next","getNode","undefined","getPreviousIndentList","prevPath","getPreviousPath","prevNode","normalizeFirstIndentListStart","isDefined","unsetNodes","at","normalizeNextIndentListStart","prevEntry","prevListStart","currListStart","setElements","normalizeIndentListStart","withoutNormalizing","normalized","normalizeNext","currEntry","normalizeIndentListNotIndented","normalizeIndentList","getSiblingIndentListOptions","normalizeNode","withIndentList","apply","operation","nodeBefore","type","prevNodeEntry","prevListStyleType","LowerAlpha","LowerRoman","UpperAlpha","UpperRoman","nextIndentListPathRef","properties","nextNodeEntryBefore","createPathRef","unref","newProperties","nextNodeEntry","prevIndent","createIndentListPlugin","createPluginFactory","key","inject","belowComponent","withOverrides","areEqListStyleType","entries","eqListStyleType","block","getIndentListSiblings","previous","current","siblings","iterEntry","push","indentList","setIndent","offset","setNodesProps","outdentList","unsetNodesProps","setIndentListNode","newIndent","setIndentListNodes","forEach","setIndentListSiblingNodes","toggleIndentListSet","toggleIndentListUnset","toggleIndentList","getPluginOptions","isCollapsed","selection","getBlockAbove","isExpanded","_entries","getNodeEntries"],"mappings":"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"}