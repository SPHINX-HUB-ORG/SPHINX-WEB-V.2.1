import { EElement, EElementEntry, EElementOrText, TEditor, TNode, TNodeEntry, Value } from '@udecode/plate-common';
export interface GetSiblingIndentListOptions<N extends EElement<V>, V extends Value = Value> {
    getPreviousEntry?: (entry: TNodeEntry<EElementOrText<V>>) => TNodeEntry<N> | undefined;
    getNextEntry?: (entry: TNodeEntry<EElementOrText<V>>) => TNodeEntry<N> | undefined;
    /**
     * Query to validate lookup. If false, check the next sibling.
     */
    query?: (siblingNode: TNode) => boolean | undefined;
    /**
     * Query to break lookup
     */
    eqIndent?: boolean;
    breakQuery?: (siblingNode: TNode) => boolean | undefined;
    breakOnLowerIndent?: boolean;
    breakOnEqIndentNeqListStyleType?: boolean;
}
/**
 * Get the next sibling indent list node.
 * Default query: the sibling node should have the same listStyleType.
 */
export declare const getSiblingIndentList: <N extends import("@udecode/plate-common").ElementOf<TEditor<V>>, V extends Value = Value>(editor: TEditor<V>, [node, path]: EElementEntry<V>, { getPreviousEntry, getNextEntry, query, eqIndent, breakQuery, breakOnLowerIndent, breakOnEqIndentNeqListStyleType, }: GetSiblingIndentListOptions<N, V>) => TNodeEntry<N> | undefined;
//# sourceMappingURL=getSiblingIndentList.d.ts.map