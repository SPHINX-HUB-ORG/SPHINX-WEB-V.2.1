import { ComponentPropsWithRef, ElementType, HTMLAttributes, ReactElement, ReactNode, RefAttributes } from 'react';
import { AnyObject } from '@udecode/utils';
/**
 * Render prop type.
 * @template P Props
 * @example
 * const children: RenderProp = (props) => <div {...props} />;
 */
export declare type RenderProp<P = AnyObject> = (props: P) => ReactNode;
/**
 * The `as` prop.
 * @template P Props
 */
export declare type As<P = any> = ElementType<P>;
/**
 * The `wrapElement` prop.
 */
export declare type WrapElement = (element: ReactElement) => ReactElement;
/**
 * The `children` prop that supports a function.
 * @template T Element type.
 */
export declare type Children<T = any> = ReactNode | RenderProp<HTMLAttributes<T> & RefAttributes<T>>;
/**
 * Props with the `as` prop.
 * @template T The `as` prop
 * @example
 * type ButtonAsProps = AsProps<"button">;
 */
export declare type AsProps<T extends As = any> = {
    as?: T;
    /**
     * Alias to `as` to avoid conflict with styled-components `as` prop.
     */
    asAlias?: T;
};
/**
 * Props that automatically includes HTML props based on the `as` prop.
 * @template O AsProps
 * @example
 * type ButtonHTMLProps = HTMLProps<AsProps<"button">>;
 */
export declare type HTMLProps<O extends AsProps> = {
    wrapElement?: WrapElement;
    children?: Children;
    [index: `data-${string}`]: unknown;
} & Omit<ComponentPropsWithRef<NonNullable<O['as']>>, keyof O | 'children'>;
/**
 * AsProps & HTMLProps
 * @template O AsProps
 * @example
 * type ButtonProps = Props<AsProps<"button">>;
 */
export declare type Props<O extends AsProps> = O & HTMLProps<O>;
export declare type HTMLPropsAs<T extends As = any> = AsProps & HTMLProps<AsProps<T>>;
/**
 * A component that supports the `as` prop and the `children` prop as a
 * function.
 * @see https://github.com/ariakit/ariakit/blob/9977b070180e27be40068e0cc464e78dda68d594/packages/ariakit-utils/src/types.ts#L117
 * @template O AsProps
 * @example
 * type ButtonComponent = Component<AsProps<"button">>;
 */
export declare type Component<O extends AsProps> = {
    <T extends As>(props: Omit<O, 'as'> & Omit<HTMLProps<AsProps<T>>, keyof O> & Required<AsProps<T>>): JSX.Element | null;
    (props: Props<O>): JSX.Element | null;
    displayName?: string;
};
//# sourceMappingURL=react-types.d.ts.map