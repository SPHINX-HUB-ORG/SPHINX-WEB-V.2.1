{"version":3,"file":"index.js","sources":["../src/createLineHeightPlugin.ts","../src/transforms/setLineHeight.ts"],"sourcesContent":["import {\n  createPluginFactory,\n  ELEMENT_DEFAULT,\n  getPluginType,\n  mapInjectPropsToPlugin,\n} from '@udecode/plate-common';\n\nexport const KEY_LINE_HEIGHT = 'lineHeight';\n\n/**\n * Enables support for text alignment, useful to align your content\n * to left, right and center it.\n */\nexport const createLineHeightPlugin = createPluginFactory({\n  key: KEY_LINE_HEIGHT,\n  inject: {\n    props: {\n      nodeKey: KEY_LINE_HEIGHT,\n      defaultNodeValue: 1.5,\n    },\n  },\n  then: (editor) => ({\n    inject: {\n      props: {\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n      },\n    },\n    then: (_, plugin) =>\n      mapInjectPropsToPlugin(editor, plugin, {\n        deserializeHtml: {\n          getNode: (el, node) => {\n            if (el.style.lineHeight) {\n              node[plugin.key] = el.style.lineHeight;\n            }\n          },\n        },\n      }),\n  }),\n});\n","import {\n  getPluginInjectProps,\n  isBlock,\n  PlateEditor,\n  setElements,\n  SetNodesOptions,\n  TNodeMatch,\n  unsetNodes,\n  Value,\n} from '@udecode/plate-common';\nimport { KEY_LINE_HEIGHT } from '../createLineHeightPlugin';\n\nexport const setLineHeight = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    value,\n    setNodesOptions,\n  }: { value: number; setNodesOptions?: SetNodesOptions<V> }\n): void => {\n  const { validTypes, defaultNodeValue, nodeKey } = getPluginInjectProps(\n    editor,\n    KEY_LINE_HEIGHT\n  );\n\n  const match: TNodeMatch = (n) =>\n    isBlock(editor, n) && !!validTypes && validTypes.includes(n.type as string);\n\n  if (value === defaultNodeValue) {\n    unsetNodes(editor, nodeKey!, {\n      match,\n      ...setNodesOptions,\n    });\n  } else {\n    setElements(\n      editor,\n      { [nodeKey!]: value },\n      {\n        match: match as any,\n        ...setNodesOptions,\n      }\n    );\n  }\n};\n"],"names":["KEY_LINE_HEIGHT","createLineHeightPlugin","createPluginFactory","key","inject","props","nodeKey","defaultNodeValue","then","editor","validTypes","getPluginType","ELEMENT_DEFAULT","_","plugin","mapInjectPropsToPlugin","deserializeHtml","getNode","el","node","style","lineHeight","setLineHeight","value","setNodesOptions","getPluginInjectProps","match","n","isBlock","includes","type","unsetNodes","setElements"],"mappings":";;;;;;AAOO,MAAMA,eAAe,GAAG,aAAxB;AAEP;AACA;AACA;AACA;;AACaC,MAAAA,sBAAsB,GAAGC,+BAAmB,CAAC;AACxDC,EAAAA,GAAG,EAAEH,eADmD;AAExDI,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEN,eADJ;AAELO,MAAAA,gBAAgB,EAAE,GAAA;AAFb,KAAA;GAH+C;EAQxDC,IAAI,EAAGC,MAAD,KAAa;AACjBL,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE;AACLK,QAAAA,UAAU,EAAE,CAACC,yBAAa,CAACF,MAAD,EAASG,2BAAT,CAAd,CAAA;AADP,OAAA;KAFQ;IAMjBJ,IAAI,EAAE,CAACK,CAAD,EAAIC,MAAJ,KACJC,kCAAsB,CAACN,MAAD,EAASK,MAAT,EAAiB;AACrCE,MAAAA,eAAe,EAAE;AACfC,QAAAA,OAAO,EAAE,CAACC,EAAD,EAAKC,IAAL,KAAc;AACrB,UAAA,IAAID,EAAE,CAACE,KAAH,CAASC,UAAb,EAAyB;YACvBF,IAAI,CAACL,MAAM,CAACX,GAAR,CAAJ,GAAmBe,EAAE,CAACE,KAAH,CAASC,UAA5B,CAAA;AACD,WAAA;AACF,SAAA;AALc,OAAA;KADG,CAAA;GAPpB,CAAA;AARkD,CAAD;;ACD5CC,MAAAA,aAAa,GAAG,CAC3Bb,MAD2B,EAE3B;EACEc,KADF;AAEEC,EAAAA,eAAAA;AAFF,CAF2B,KAMlB;EACT,MAAM;IAAEd,UAAF;IAAcH,gBAAd;AAAgCD,IAAAA,OAAAA;AAAhC,GAAA,GAA4CmB,gCAAoB,CACpEhB,MADoE,EAEpET,eAFoE,CAAtE,CAAA;;EAKA,MAAM0B,KAAiB,GAAIC,CAAD,IACxBC,mBAAO,CAACnB,MAAD,EAASkB,CAAT,CAAP,IAAsB,CAAC,CAACjB,UAAxB,IAAsCA,UAAU,CAACmB,QAAX,CAAoBF,CAAC,CAACG,IAAtB,CADxC,CAAA;;EAGA,IAAIP,KAAK,KAAKhB,gBAAd,EAAgC;AAC9BwB,IAAAA,sBAAU,CAACtB,MAAD,EAASH,OAAT,EAAmB;MAC3BoB,KAD2B;MAE3B,GAAGF,eAAAA;AAFwB,KAAnB,CAAV,CAAA;AAID,GALD,MAKO;IACLQ,uBAAW,CACTvB,MADS,EAET;AAAE,MAAA,CAACH,OAAD,GAAYiB,KAAAA;AAAd,KAFS,EAGT;AACEG,MAAAA,KAAK,EAAEA,KADT;MAEE,GAAGF,eAAAA;AAFL,KAHS,CAAX,CAAA;AAQD,GAAA;AACF;;;;;;"}