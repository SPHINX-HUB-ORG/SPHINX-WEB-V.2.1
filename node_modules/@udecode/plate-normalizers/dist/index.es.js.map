{"version":3,"file":"index.es.js","sources":["../src/withNormalizeTypes.ts","../src/createNormalizeTypesPlugin.ts","../../../../node_modules/lodash/isArray.js","../../../../node_modules/lodash/castArray.js","../src/withRemoveEmptyNodes.ts","../src/createRemoveEmptyNodesPlugin.ts"],"sourcesContent":["import {\n  getNode,\n  insertElements,\n  isElement,\n  PlateEditor,\n  setElements,\n  TElement,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\nimport { NormalizeTypesPlugin } from './createNormalizeTypesPlugin';\n\nexport const withNormalizeTypes = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>\n>(\n  editor: E,\n  { options: { rules, onError } }: WithPlatePlugin<NormalizeTypesPlugin, V, E>\n) => {\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = ([currentNode, currentPath]) => {\n    if (!currentPath.length) {\n      const endCurrentNormalizationPass = rules!.some(\n        ({ strictType, type, path }) => {\n          const node = getNode<TElement>(editor, path);\n\n          if (node) {\n            if (strictType && isElement(node) && node.type !== strictType) {\n              setElements(\n                editor,\n                { type: strictType },\n                {\n                  at: path,\n                }\n              );\n              return true;\n            }\n          } else {\n            try {\n              insertElements(\n                editor,\n                {\n                  type: strictType ?? type!,\n                  children: [{ text: '' }],\n                },\n                { at: path }\n              );\n              return true;\n            } catch (err) {\n              onError?.(err);\n            }\n          }\n\n          return false;\n        }\n      );\n\n      if (endCurrentNormalizationPass) {\n        return;\n      }\n    }\n\n    return normalizeNode([currentNode, currentPath]);\n  };\n\n  return editor;\n};\n","import { createPluginFactory, ErrorHandler } from '@udecode/plate-common';\nimport { Path } from 'slate';\nimport { withNormalizeTypes } from './withNormalizeTypes';\n\ninterface Rule {\n  /**\n   * Force the type of the node at the given path\n   */\n  strictType?: string;\n  /**\n   * Type of the inserted node at the given path if `strictType` is not provided\n   */\n  type?: string;\n  /**\n   * Path where the rule applies\n   */\n  path: Path;\n}\n\nexport interface NormalizeTypesPlugin extends ErrorHandler {\n  /**\n   * Set of rules for the types.\n   * For each rule, provide a `path` and either `strictType` or `type`.\n   * If there is no node existing at `path`:\n   * insert a node with `strictType`.\n   * If there is a node existing at `path` but its type is not `strictType` or `type`:\n   * set the node type to `strictType` or `type`.\n   */\n  rules?: Rule[];\n}\n\nexport const KEY_NORMALIZE_TYPES = 'normalizeTypes';\n\n/**\n * @see {@link withNormalizeTypes}\n */\nexport const createNormalizeTypesPlugin = createPluginFactory<NormalizeTypesPlugin>(\n  {\n    key: KEY_NORMALIZE_TYPES,\n    withOverrides: withNormalizeTypes,\n    options: {\n      rules: [],\n    },\n  }\n);\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","import {\n  getNodeString,\n  isElement,\n  PlateEditor,\n  removeNodes,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-common';\nimport castArray from 'lodash/castArray';\nimport { RemoveEmptyNodesPlugin } from './createRemoveEmptyNodesPlugin';\n\n/**\n * Remove nodes with empty text.\n */\nexport const withRemoveEmptyNodes = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>\n>(\n  editor: E,\n  { options: { types: _types } }: WithPlatePlugin<RemoveEmptyNodesPlugin, V, E>\n) => {\n  const types = castArray(_types);\n\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    if (\n      isElement(node) &&\n      node.type &&\n      types.includes(node.type) &&\n      getNodeString(node) === ''\n    ) {\n      removeNodes(editor, { at: path });\n      return;\n    }\n\n    normalizeNode([node, path]);\n  };\n\n  return editor;\n};\n","import { createPluginFactory } from '@udecode/plate-common';\nimport { withRemoveEmptyNodes } from './withRemoveEmptyNodes';\n\nexport interface RemoveEmptyNodesPlugin {\n  types?: string | string[];\n}\n\n/**\n * @see {@link withRemoveEmptyNodes}\n */\nexport const createRemoveEmptyNodesPlugin = createPluginFactory<RemoveEmptyNodesPlugin>(\n  {\n    key: 'removeEmptyNodes',\n    withOverrides: withRemoveEmptyNodes,\n  }\n);\n"],"names":["withNormalizeTypes","editor","options","rules","onError","normalizeNode","currentNode","currentPath","length","endCurrentNormalizationPass","some","strictType","type","path","node","getNode","isElement","setElements","at","insertElements","children","text","err","KEY_NORMALIZE_TYPES","createNormalizeTypesPlugin","createPluginFactory","key","withOverrides","isArray","withRemoveEmptyNodes","types","_types","castArray","includes","getNodeString","removeNodes","createRemoveEmptyNodesPlugin"],"mappings":"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"}