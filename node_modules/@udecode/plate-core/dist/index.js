'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jotai = require('jotai');
var React = require('react');
var slateReact = require('slate-react');
var zustood = require('@udecode/zustood');
var slateHistory = require('slate-history');
var slate = require('slate');
var clsx = require('clsx');
var reactSlot = require('@radix-ui/react-slot');
var useDeepCompare = require('use-deep-compare');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

/* eslint-disable react-hooks/rules-of-hooks */

const capitalizeFirstLetter = (str = '') => str.length ? str[0].toUpperCase() + str.slice(1) : '';

const getStoreIndex = (name = '') => name.length ? `${name}Store` : 'store';

const getUseStoreIndex = (name = '') => `use${capitalizeFirstLetter(name)}Store`;

/**
 * Create an atom store from an initial value.
 * Each property will have a getter and setter.
 *
 * @example
 * const { exampleStore, useExampleStore } = createAtomStore({ count: 1, say: 'hello' }, { name: 'example' as const })
 * const [count, setCount] = useExampleStore().use.count()
 * const say = useExampleStore().get.say()
 * const setSay = useExampleStore().set.say()
 * setSay('world')
 * const countAtom = exampleStore.atom.count
 */
const createAtomStore = (initialState, {
  scope: storeScope,
  initialStore,
  name = ''
} = {}) => {
  const useInitialStoreIndex = getUseStoreIndex(initialStore === null || initialStore === void 0 ? void 0 : initialStore.name);
  const initialStoreIndex = getStoreIndex(initialStore === null || initialStore === void 0 ? void 0 : initialStore.name);
  const useStoreIndex = getUseStoreIndex(name);
  const storeIndex = getStoreIndex(name);
  const getAtoms = initialStore ? initialStore[useInitialStoreIndex]().get : {};
  const setAtoms = initialStore ? initialStore[useInitialStoreIndex]().set : {};
  const useAtoms = initialStore ? initialStore[useInitialStoreIndex]().use : {};
  const atoms = initialStore ? initialStore[initialStoreIndex].atom : {};
  Object.keys(initialState).forEach(key => {
    const atomConfig = jotai.atom(initialState[key]);
    atoms[key] = atomConfig;

    getAtoms[key] = scope => {
      return jotai.useAtomValue(atomConfig, scope !== null && scope !== void 0 ? scope : storeScope);
    };

    setAtoms[key] = scope => {
      return jotai.useSetAtom(atomConfig, scope !== null && scope !== void 0 ? scope : storeScope);
    };

    useAtoms[key] = scope => {
      return jotai.useAtom(atomConfig, scope !== null && scope !== void 0 ? scope : storeScope);
    };
  });
  const api = {
    [useStoreIndex]: () => ({
      get: getAtoms,
      set: setAtoms,
      use: useAtoms
    }),
    [storeIndex]: {
      atom: atoms
    },
    name
  };
  return { ...api,
    [storeIndex]: { ...api[storeIndex],
      extend: (extendedState, options) => createAtomStore(extendedState, {
        scope: storeScope,
        initialStore: api,
        ...options
      })
    }
  };
};

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

const DOM_HANDLERS = [// Clipboard Events
'onCopy', 'onCopyCapture', 'onCut', 'onCutCapture', 'onPaste', 'onPasteCapture', // Composition Events
'onCompositionEnd', 'onCompositionEndCapture', 'onCompositionStart', 'onCompositionStartCapture', 'onCompositionUpdate', 'onCompositionUpdateCapture', // Focus Events
'onFocus', 'onFocusCapture', 'onBlur', 'onBlurCapture', // Form Events
'onDOMBeforeInput', 'onBeforeInput', 'onBeforeInputCapture', 'onInput', 'onInputCapture', 'onReset', 'onResetCapture', 'onSubmit', 'onSubmitCapture', 'onInvalid', 'onInvalidCapture', // Image Events
'onLoad', 'onLoadCapture', // Keyboard Events
'onKeyDown', 'onKeyDownCapture', 'onKeyPress', 'onKeyPressCapture', 'onKeyUp', 'onKeyUpCapture', // Media Events
'onAbort', 'onAbortCapture', 'onCanPlay', 'onCanPlayCapture', 'onCanPlayThrough', 'onCanPlayThroughCapture', 'onDurationChange', 'onDurationChangeCapture', 'onEmptied', 'onEmptiedCapture', 'onEncrypted', 'onEncryptedCapture', 'onEnded', 'onEndedCapture', 'onLoadedData', 'onLoadedDataCapture', 'onLoadedMetadata', 'onLoadedMetadataCapture', 'onLoadStart', 'onLoadStartCapture', 'onPause', 'onPauseCapture', 'onPlay', 'onPlayCapture', 'onPlaying', 'onPlayingCapture', 'onProgress', 'onProgressCapture', 'onRateChange', 'onRateChangeCapture', 'onSeeked', 'onSeekedCapture', 'onSeeking', 'onSeekingCapture', 'onStalled', 'onStalledCapture', 'onSuspend', 'onSuspendCapture', 'onTimeUpdate', 'onTimeUpdateCapture', 'onVolumeChange', 'onVolumeChangeCapture', 'onWaiting', 'onWaitingCapture', // MouseEvents
'onAuxClick', 'onAuxClickCapture', 'onClick', 'onClickCapture', 'onContextMenu', 'onContextMenuCapture', 'onDoubleClick', 'onDoubleClickCapture', 'onDrag', 'onDragCapture', 'onDragEnd', 'onDragEndCapture', 'onDragEnter', 'onDragEnterCapture', 'onDragExit', 'onDragExitCapture', 'onDragLeave', 'onDragLeaveCapture', 'onDragOver', 'onDragOverCapture', 'onDragStart', 'onDragStartCapture', 'onDrop', 'onDropCapture', 'onMouseDown', 'onMouseDownCapture', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseMoveCapture', 'onMouseOut', 'onMouseOutCapture', 'onMouseOver', 'onMouseOverCapture', 'onMouseUp', 'onMouseUpCapture', // Selection Events
'onSelect', 'onSelectCapture', // Touch Events
'onTouchCancel', 'onTouchCancelCapture', 'onTouchEnd', 'onTouchEndCapture', 'onTouchMove', 'onTouchMoveCapture', 'onTouchStart', 'onTouchStartCapture', // Pointer Events
'onPointerDown', 'onPointerDownCapture', 'onPointerMove', 'onPointerMoveCapture', 'onPointerUp', 'onPointerUpCapture', 'onPointerCancel', 'onPointerCancelCapture', 'onPointerEnter', 'onPointerEnterCapture', 'onPointerLeave', 'onPointerLeaveCapture', 'onPointerOver', 'onPointerOverCapture', 'onPointerOut', 'onPointerOutCapture', 'onGotPointerCapture', 'onGotPointerCaptureCapture', 'onLostPointerCapture', 'onLostPointerCaptureCapture', // UI Events
'onScroll', 'onScrollCapture', // Wheel Events
'onWheel', 'onWheelCapture', // Animation Events
'onAnimationStart', 'onAnimationStartCapture', 'onAnimationEnd', 'onAnimationEndCapture', 'onAnimationIteration', 'onAnimationIterationCapture', // Transition Events
'onTransitionEnd', 'onTransitionEndCapture'];

const IS_APPLE = typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent);

const escapeRegExp = text => {
  return text.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g, '\\$&');
};

const findHtmlParentElement = (el, nodeName) => {
  if (!el || el.nodeName === nodeName) {
    return el;
  }

  return findHtmlParentElement(el.parentElement, nodeName);
};

/**
 * Call a handler if defined
 */
const getHandler = (cb, ...args) => () => {
  cb === null || cb === void 0 ? void 0 : cb(...args);
};

/**
 * Get slate class name: slate-<type>
 */
const getSlateClass = type => `slate-${type}`;

const hexToBase64 = hex => {
  const hexPairs = hex.match(/\w{2}/g) || [];
  const binary = hexPairs.map(hexPair => String.fromCharCode(parseInt(hexPair, 16)));
  return btoa(binary.join(''));
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var lib = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * Constants.
 */

// We make this a function so it can be tested in describe block mocks with Jest.
var IS_MAC = () => typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);

var MODIFIERS = {
  alt: 'altKey',
  control: 'ctrlKey',
  meta: 'metaKey',
  shift: 'shiftKey'
};

// We make this a function so it can be tested in describe block mocks with Jest.
var ALIASES = () => ({
  add: '+',
  break: 'pause',
  cmd: 'meta',
  command: 'meta',
  ctl: 'control',
  ctrl: 'control',
  del: 'delete',
  down: 'arrowdown',
  esc: 'escape',
  ins: 'insert',
  left: 'arrowleft',
  mod: IS_MAC() ? 'meta' : 'control',
  opt: 'alt',
  option: 'alt',
  return: 'enter',
  right: 'arrowright',
  space: ' ',
  spacebar: ' ',
  up: 'arrowup',
  win: 'meta',
  windows: 'meta'
});

var CODES = {
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  control: 17,
  alt: 18,
  pause: 19,
  capslock: 20,
  escape: 27,
  ' ': 32,
  pageup: 33,
  pagedown: 34,
  end: 35,
  home: 36,
  arrowleft: 37,
  arrowup: 38,
  arrowright: 39,
  arrowdown: 40,
  insert: 45,
  delete: 46,
  meta: 91,
  numlock: 144,
  scrolllock: 145,
  ';': 186,
  '=': 187,
  ',': 188,
  '-': 189,
  '.': 190,
  '/': 191,
  '`': 192,
  '[': 219,
  '\\': 220,
  ']': 221,
  '\'': 222
};

for (var f = 1; f < 20; f++) {
  CODES['f' + f] = 111 + f;
}

/**
 * Is hotkey?
 */

function isHotkey(hotkey, options, event) {
  if (options && !('byKey' in options)) {
    event = options;
    options = null;
  }

  if (!Array.isArray(hotkey)) {
    hotkey = [hotkey];
  }

  var array = hotkey.map(function (string) {
    return parseHotkey(string, options);
  });
  var check = function check(e) {
    return array.some(function (object) {
      return compareHotkey(object, e);
    });
  };
  var ret = event == null ? check : check(event);
  return ret;
}

function isCodeHotkey(hotkey, event) {
  return isHotkey(hotkey, event);
}

function isKeyHotkey(hotkey, event) {
  return isHotkey(hotkey, { byKey: true }, event);
}

/**
 * Parse.
 */

function parseHotkey(hotkey, options) {
  var byKey = options && options.byKey;
  var ret = {};

  // Special case to handle the `+` key since we use it as a separator.
  hotkey = hotkey.replace('++', '+add');
  var values = hotkey.split('+');
  var length = values.length;

  // Ensure that all the modifiers are set to false unless the hotkey has them.

  for (var k in MODIFIERS) {
    ret[MODIFIERS[k]] = false;
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var value = _step.value;

      var optional = value.endsWith('?') && value.length > 1;

      if (optional) {
        value = value.slice(0, -1);
      }

      var name = toKeyName(value);
      var modifier = MODIFIERS[name];

      if (length === 1 || !modifier) {
        if (byKey) {
          ret.key = name;
        } else {
          ret.which = toKeyCode(value);
        }
      }

      if (modifier) {
        ret[modifier] = optional ? null : true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return ret;
}

/**
 * Compare.
 */

function compareHotkey(object, event) {
  for (var key in object) {
    var expected = object[key];
    var actual = void 0;

    if (expected == null) {
      continue;
    }

    if (key === 'key' && event.key != null) {
      actual = event.key.toLowerCase();
    } else if (key === 'which') {
      actual = expected === 91 && event.which === 93 ? 91 : event.which;
    } else {
      actual = event[key];
    }

    if (actual == null && expected === false) {
      continue;
    }

    if (actual !== expected) {
      return false;
    }
  }

  return true;
}

/**
 * Utils.
 */

function toKeyCode(name) {
  name = toKeyName(name);
  var code = CODES[name] || name.toUpperCase().charCodeAt(0);
  return code;
}

function toKeyName(name) {
  name = name.toLowerCase();
  name = ALIASES()[name] || name;
  return name;
}

/**
 * Export.
 */

exports.default = isHotkey;
exports.isHotkey = isHotkey;
exports.isCodeHotkey = isCodeHotkey;
exports.isKeyHotkey = isKeyHotkey;
exports.parseHotkey = parseHotkey;
exports.compareHotkey = compareHotkey;
exports.toKeyCode = toKeyCode;
exports.toKeyName = toKeyName;
});

var isHotkey = unwrapExports(lib);
lib.isHotkey;
lib.isCodeHotkey;
var lib_3 = lib.isKeyHotkey;
lib.parseHotkey;
lib.compareHotkey;
lib.toKeyCode;
lib.toKeyName;

/**
 * Check if the user is currently composing inside the editor.
 */
const isComposing = editor => slateReact.ReactEditor.isComposing(editor);

/**
 * Hotkey mappings for each platform.
 */

const HOTKEYS = {
  bold: 'mod+b',
  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],
  deleteBackward: 'shift?+backspace',
  deleteForward: 'shift?+delete',
  extendBackward: 'shift+left',
  extendForward: 'shift+right',
  insertSoftBreak: 'shift+enter',
  italic: 'mod+i',
  moveBackward: 'left',
  moveForward: 'right',
  moveWordBackward: 'ctrl+left',
  moveWordForward: 'ctrl+right',
  splitBlock: 'enter',
  tab: 'tab',
  untab: 'shift+tab',
  undo: 'mod+z'
};
const APPLE_HOTKEYS = {
  deleteBackward: ['ctrl+backspace', 'ctrl+h'],
  deleteForward: ['ctrl+delete', 'ctrl+d'],
  deleteLineBackward: 'cmd+shift?+backspace',
  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],
  deleteWordBackward: 'opt+shift?+backspace',
  deleteWordForward: 'opt+shift?+delete',
  extendLineBackward: 'opt+shift+up',
  extendLineForward: 'opt+shift+down',
  moveLineBackward: 'opt+up',
  moveLineForward: 'opt+down',
  moveWordBackward: 'opt+left',
  moveWordForward: 'opt+right',
  redo: 'cmd+shift+z',
  transposeCharacter: 'ctrl+t'
};
const WINDOWS_HOTKEYS = {
  deleteWordBackward: 'ctrl+shift?+backspace',
  deleteWordForward: 'ctrl+shift?+delete',
  redo: ['ctrl+y', 'ctrl+shift+z']
};
/**
 * Create a platform-aware hotkey checker.
 */

const create = key => {
  const generic = HOTKEYS[key];
  const apple = APPLE_HOTKEYS[key];
  const windows = WINDOWS_HOTKEYS[key];
  const isGeneric = generic && lib_3(generic);
  const isApple = apple && lib_3(apple);
  const isWindows = windows && lib_3(windows);
  return event => {
    if (isGeneric && isGeneric(event)) return true;
    if (IS_APPLE && isApple && isApple(event)) return true;
    if (!IS_APPLE && isWindows && isWindows(event)) return true;
    return false;
  };
};

const createComposing = key => (editor, event, {
  composing
} = {}) => {
  if (!create(key)(event)) return false;
  if (!!composing !== isComposing(editor)) return false;
  return true;
};

const Hotkeys = {
  isBold: create('bold'),
  isCompose: create('compose'),
  isMoveBackward: create('moveBackward'),
  isMoveForward: create('moveForward'),
  isDeleteBackward: create('deleteBackward'),
  isDeleteForward: create('deleteForward'),
  isDeleteLineBackward: create('deleteLineBackward'),
  isDeleteLineForward: create('deleteLineForward'),
  isDeleteWordBackward: create('deleteWordBackward'),
  isDeleteWordForward: create('deleteWordForward'),
  isExtendBackward: create('extendBackward'),
  isExtendForward: create('extendForward'),
  isExtendLineBackward: create('extendLineBackward'),
  isExtendLineForward: create('extendLineForward'),
  isItalic: create('italic'),
  isMoveLineBackward: create('moveLineBackward'),
  isMoveLineForward: create('moveLineForward'),
  isMoveWordBackward: create('moveWordBackward'),
  isMoveWordForward: create('moveWordForward'),
  isRedo: create('redo'),
  isSoftBreak: create('insertSoftBreak'),
  isSplitBlock: create('splitBlock'),
  isTab: createComposing('tab'),
  isTransposeCharacter: create('transposeCharacter'),
  isUndo: create('undo'),
  isUntab: createComposing('untab')
};

/**
 * RegExps.
 * A URL must match #1 and then at least one of #2/#3.
 * Use two levels of REs to avoid REDOS.
 */
const protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
const localhostDomainRE = /^localhost[:?\d]*(?:[^:?\d]\S*)?$/;
const nonLocalhostDomainRE = /^[^\s.]+\.\S{2,}$/;
/**
 * Loosely validate a URL `string`.
 */

const isUrl = string => {
  if (typeof string !== 'string') {
    return false;
  }

  const match = string.match(protocolAndDomainRE);

  if (!match) {
    return false;
  }

  const everythingAfterProtocol = match[1];

  if (!everythingAfterProtocol) {
    return false;
  }

  try {
    new URL(string);
  } catch (err) {
    return false;
  }

  return localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol);
};

const JotaiProvider = jotai.Provider;

/**
 * @returns whether the provided parameter is undefined.
 */
const isUndefined = obj => typeof obj === 'undefined';
const isNull = obj => obj === null;
/**
 * @returns whether the provided parameter is undefined or null.
 */

const isUndefinedOrNull = obj => isUndefined(obj) || isNull(obj);
/**
 * @returns whether the provided parameter is defined.
 */

const isDefined = arg => !isUndefinedOrNull(arg);

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

var _apply = apply;

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

var identity_1 = identity;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return _apply(func, this, otherArgs);
  };
}

var _overRest = overRest;

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

var constant_1 = constant;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = _freeGlobal || freeSelf || Function('return this')();

var _root = root;

/** Built-in value references. */
var Symbol$1 = _root.Symbol;

var _Symbol = Symbol$1;

/** Used for built-in method references. */
var objectProto$g = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$d = objectProto$g.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$g.toString;

/** Built-in value references. */
var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$d.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

var _getRawTag = getRawTag;

/** Used for built-in method references. */
var objectProto$f = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$f.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

var _objectToString = objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? _getRawTag(value)
    : _objectToString(value);
}

var _baseGetTag = baseGetTag;

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$1(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var isObject_1 = isObject$1;

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject_1(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = _baseGetTag(value);
  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
}

var isFunction_1 = isFunction;

/** Used to detect overreaching core-js shims. */
var coreJsData = _root['__core-js_shared__'];

var _coreJsData = coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

var _isMasked = isMasked;

/** Used for built-in method references. */
var funcProto$2 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$2 = funcProto$2.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$2.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

var _toSource = toSource;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype,
    objectProto$e = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$c = objectProto$e.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString$1.call(hasOwnProperty$c).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject_1(value) || _isMasked(value)) {
    return false;
  }
  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
  return pattern.test(_toSource(value));
}

var _baseIsNative = baseIsNative;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

var _getValue = getValue;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = _getValue(object, key);
  return _baseIsNative(value) ? value : undefined;
}

var _getNative = getNative;

var defineProperty = (function() {
  try {
    var func = _getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

var _defineProperty$1 = defineProperty;

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !_defineProperty$1 ? identity_1 : function(func, string) {
  return _defineProperty$1(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant_1(string),
    'writable': true
  });
};

var _baseSetToString = baseSetToString;

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

var _shortOut = shortOut;

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = _shortOut(_baseSetToString);

var _setToString = setToString;

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return _setToString(_overRest(func, start, identity_1), func + '');
}

var _baseRest = baseRest;

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

var _listCacheClear = listCacheClear;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

var eq_1 = eq;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq_1(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

var _assocIndexOf = assocIndexOf;

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

var _listCacheDelete = listCacheDelete;

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

var _listCacheGet = listCacheGet;

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return _assocIndexOf(this.__data__, key) > -1;
}

var _listCacheHas = listCacheHas;

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

var _listCacheSet = listCacheSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = _listCacheClear;
ListCache.prototype['delete'] = _listCacheDelete;
ListCache.prototype.get = _listCacheGet;
ListCache.prototype.has = _listCacheHas;
ListCache.prototype.set = _listCacheSet;

var _ListCache = ListCache;

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new _ListCache;
  this.size = 0;
}

var _stackClear = stackClear;

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

var _stackDelete = stackDelete;

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

var _stackGet = stackGet;

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

var _stackHas = stackHas;

/* Built-in method references that are verified to be native. */
var Map = _getNative(_root, 'Map');

var _Map = Map;

/* Built-in method references that are verified to be native. */
var nativeCreate = _getNative(Object, 'create');

var _nativeCreate = nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
  this.size = 0;
}

var _hashClear = hashClear;

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

var _hashDelete = hashDelete;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$d = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$b = objectProto$d.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (_nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED$2 ? undefined : result;
  }
  return hasOwnProperty$b.call(data, key) ? data[key] : undefined;
}

var _hashGet = hashGet;

/** Used for built-in method references. */
var objectProto$c = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$a = objectProto$c.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$a.call(data, key);
}

var _hashHas = hashHas;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

var _hashSet = hashSet;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = _hashClear;
Hash.prototype['delete'] = _hashDelete;
Hash.prototype.get = _hashGet;
Hash.prototype.has = _hashHas;
Hash.prototype.set = _hashSet;

var _Hash = Hash;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new _Hash,
    'map': new (_Map || _ListCache),
    'string': new _Hash
  };
}

var _mapCacheClear = mapCacheClear;

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

var _isKeyable = isKeyable;

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return _isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

var _getMapData = getMapData;

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = _getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

var _mapCacheDelete = mapCacheDelete;

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return _getMapData(this, key).get(key);
}

var _mapCacheGet = mapCacheGet;

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return _getMapData(this, key).has(key);
}

var _mapCacheHas = mapCacheHas;

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = _getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

var _mapCacheSet = mapCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = _mapCacheClear;
MapCache.prototype['delete'] = _mapCacheDelete;
MapCache.prototype.get = _mapCacheGet;
MapCache.prototype.has = _mapCacheHas;
MapCache.prototype.set = _mapCacheSet;

var _MapCache = MapCache;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof _ListCache) {
    var pairs = data.__data__;
    if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new _MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

var _stackSet = stackSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new _ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = _stackClear;
Stack.prototype['delete'] = _stackDelete;
Stack.prototype.get = _stackGet;
Stack.prototype.has = _stackHas;
Stack.prototype.set = _stackSet;

var _Stack = Stack;

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && _defineProperty$1) {
    _defineProperty$1(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

var _baseAssignValue = baseAssignValue;

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq_1(object[key], value)) ||
      (value === undefined && !(key in object))) {
    _baseAssignValue(object, key, value);
  }
}

var _assignMergeValue = assignMergeValue;

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

var _createBaseFor = createBaseFor;

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = _createBaseFor();

var _baseFor = baseFor;

var _cloneBuffer = createCommonjsModule(function (module, exports) {
/** Detect free variable `exports`. */
var freeExports = exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? _root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;
});

/** Built-in value references. */
var Uint8Array = _root.Uint8Array;

var _Uint8Array = Uint8Array;

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
  return result;
}

var _cloneArrayBuffer = cloneArrayBuffer;

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

var _cloneTypedArray = cloneTypedArray;

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

var _copyArray = copyArray;

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject_1(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

var _baseCreate = baseCreate;

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

var _overArg = overArg;

/** Built-in value references. */
var getPrototype = _overArg(Object.getPrototypeOf, Object);

var _getPrototype = getPrototype;

/** Used for built-in method references. */
var objectProto$b = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$b;

  return value === proto;
}

var _isPrototype = isPrototype;

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !_isPrototype(object))
    ? _baseCreate(_getPrototype(object))
    : {};
}

var _initCloneObject = initCloneObject;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike;

/** `Object#toString` result references. */
var argsTag$3 = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike_1(value) && _baseGetTag(value) == argsTag$3;
}

var _baseIsArguments = baseIsArguments;

/** Used for built-in method references. */
var objectProto$a = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$9 = objectProto$a.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable$1 = objectProto$a.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
  return isObjectLike_1(value) && hasOwnProperty$9.call(value, 'callee') &&
    !propertyIsEnumerable$1.call(value, 'callee');
};

var isArguments_1 = isArguments;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

var isArray_1 = isArray;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
}

var isLength_1 = isLength;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength_1(value.length) && !isFunction_1(value);
}

var isArrayLike_1 = isArrayLike;

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike_1(value) && isArrayLike_1(value);
}

var isArrayLikeObject_1 = isArrayLikeObject;

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

var stubFalse_1 = stubFalse;

var isBuffer_1 = createCommonjsModule(function (module, exports) {
/** Detect free variable `exports`. */
var freeExports = exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? _root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse_1;

module.exports = isBuffer;
});

/** `Object#toString` result references. */
var objectTag$4 = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$9 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$9.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject$1(value) {
  if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag$4) {
    return false;
  }
  var proto = _getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$8.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

var isPlainObject_1 = isPlainObject$1;

/** `Object#toString` result references. */
var argsTag$2 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    errorTag$2 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$5 = '[object Map]',
    numberTag$3 = '[object Number]',
    objectTag$3 = '[object Object]',
    regexpTag$3 = '[object RegExp]',
    setTag$5 = '[object Set]',
    stringTag$3 = '[object String]',
    weakMapTag$2 = '[object WeakMap]';

var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
typedArrayTags[uint32Tag$2] = true;
typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] =
typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] =
typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] =
typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] =
typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] =
typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] =
typedArrayTags[weakMapTag$2] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike_1(value) &&
    isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
}

var _baseIsTypedArray = baseIsTypedArray;

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

var _baseUnary = baseUnary;

var _nodeUtil = createCommonjsModule(function (module, exports) {
/** Detect free variable `exports`. */
var freeExports = exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && _freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;
});

/* Node.js helper references. */
var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

var isTypedArray_1 = isTypedArray;

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

var _safeGet = safeGet;

/** Used for built-in method references. */
var objectProto$8 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$7.call(object, key) && eq_1(objValue, value)) ||
      (value === undefined && !(key in object))) {
    _baseAssignValue(object, key, value);
  }
}

var _assignValue = assignValue;

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      _baseAssignValue(object, key, newValue);
    } else {
      _assignValue(object, key, newValue);
    }
  }
  return object;
}

var _copyObject = copyObject;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

var _baseTimes = baseTimes;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

var _isIndex = isIndex;

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray_1(value),
      isArg = !isArr && isArguments_1(value),
      isBuff = !isArr && !isArg && isBuffer_1(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? _baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$6.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           _isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

var _arrayLikeKeys = arrayLikeKeys;

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

var _nativeKeysIn = nativeKeysIn;

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject_1(object)) {
    return _nativeKeysIn(object);
  }
  var isProto = _isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty$5.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

var _baseKeysIn = baseKeysIn;

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
}

var keysIn_1 = keysIn;

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return _copyObject(value, keysIn_1(value));
}

var toPlainObject_1 = toPlainObject;

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = _safeGet(object, key),
      srcValue = _safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    _assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray_1(srcValue),
        isBuff = !isArr && isBuffer_1(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray_1(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray_1(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject_1(objValue)) {
        newValue = _copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = _cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = _cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject_1(srcValue) || isArguments_1(srcValue)) {
      newValue = objValue;
      if (isArguments_1(objValue)) {
        newValue = toPlainObject_1(objValue);
      }
      else if (!isObject_1(objValue) || isFunction_1(objValue)) {
        newValue = _initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  _assignMergeValue(object, key, newValue);
}

var _baseMergeDeep = baseMergeDeep;

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  _baseFor(source, function(srcValue, key) {
    stack || (stack = new _Stack);
    if (isObject_1(srcValue)) {
      _baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(_safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      _assignMergeValue(object, key, newValue);
    }
  }, keysIn_1);
}

var _baseMerge = baseMerge;

/**
 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
 * objects into destination objects that are passed thru.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to merge.
 * @param {Object} object The parent object of `objValue`.
 * @param {Object} source The parent object of `srcValue`.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 * @returns {*} Returns the value to assign.
 */
function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
  if (isObject_1(objValue) && isObject_1(srcValue)) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, objValue);
    _baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
    stack['delete'](srcValue);
  }
  return objValue;
}

var _customDefaultsMerge = customDefaultsMerge;

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject_1(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike_1(object) && _isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq_1(object[index], value);
  }
  return false;
}

var _isIterateeCall = isIterateeCall;

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return _baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

var _createAssigner = createAssigner;

/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */
var mergeWith = _createAssigner(function(object, source, srcIndex, customizer) {
  _baseMerge(object, source, srcIndex, customizer);
});

var mergeWith_1 = mergeWith;

/**
 * This method is like `_.defaults` except that it recursively assigns
 * default properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaults
 * @example
 *
 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
 * // => { 'a': { 'b': 2, 'c': 3 } }
 */
var defaultsDeep = _baseRest(function(args) {
  args.push(undefined, _customDefaultsMerge);
  return _apply(mergeWith_1, undefined, args);
});

var defaultsDeep_1 = defaultsDeep;

/**
 * Recursive deep merge of each plugin from `overrideByKey`
 * into plugin with same key (plugin > plugin.plugins).
 */
const overridePluginsByKey = (plugin, overrideByKey = {}, nested) => {
  var _overrideByKey$plugin;

  if (overrideByKey[plugin.key]) {
    const {
      plugins: pluginOverridesPlugins,
      then: pluginOverridesThen,
      ...pluginOverrides
    } = overrideByKey[plugin.key]; // override plugin

    plugin = defaultsDeep_1(pluginOverrides, plugin);

    if (!nested) {
      // concat new pluginOverrides.plugins to plugin.plugins
      pluginOverridesPlugins === null || pluginOverridesPlugins === void 0 ? void 0 : pluginOverridesPlugins.forEach(pOverrides => {
        if (!plugin.plugins) plugin.plugins = [];
        const found = plugin.plugins.find(p => p.key === pOverrides.key);
        if (!found) plugin.plugins.push(pOverrides);
      });
    }
  }

  if (plugin.plugins) {
    // override plugin.plugins
    plugin.plugins = plugin.plugins.map(p => overridePluginsByKey(p, overrideByKey, true));
  }

  const {
    then
  } = plugin;

  if (then) {
    // override plugin.then
    plugin.then = (editor, p) => {
      const pluginThen = {
        key: plugin.key,
        ...then(editor, p)
      };
      return defaultsDeep_1(overridePluginsByKey(pluginThen, overrideByKey), pluginThen);
    };
  } else if ((_overrideByKey$plugin = overrideByKey[plugin.key]) !== null && _overrideByKey$plugin !== void 0 && _overrideByKey$plugin.then) {
    // TODO: recursvie
    plugin.then = overrideByKey[plugin.key].then;
  }

  return plugin;
};

/**
 * Create plugin factory with a default plugin.
 * - first param is the default plugin.
 * - the only required property of the default plugin is `key`.
 * - returns a plugin factory:
 *   - first param `override` can be used to (deeply) override the default plugin.
 *   - second param `overrideByKey` can be used to (deeply) override by key a nested plugin (in plugin.plugins).
 */

const createPluginFactory = defaultPlugin => (override, overrideByKey = {}) => {
  overrideByKey[defaultPlugin.key] = override;
  return overridePluginsByKey({ ...defaultPlugin
  }, overrideByKey);
};

const KEY_DESERIALIZE_AST = 'deserializeAst';
/**
 * Enables support for deserializing inserted content from Slate Ast format to Slate format
 * while apply a small bug fix.
 */

const createDeserializeAstPlugin = createPluginFactory({
  key: KEY_DESERIALIZE_AST,
  editor: {
    insertData: {
      format: 'application/x-slate-fragment',
      getFragment: ({
        data
      }) => {
        const decoded = decodeURIComponent(window.atob(data));
        return JSON.parse(decoded);
      }
    }
  }
});

/**
 * Store where the keys are event names and the values are editor ids.
 */
const eventEditorStore = zustood.createStore('event-editor')({
  blur: null,
  focus: null,
  last: null
});
const eventEditorActions = eventEditorStore.set;
const eventEditorSelectors = eventEditorStore.get;
const useEventEditorSelectors = eventEditorStore.use;

const KEY_EVENT_EDITOR = 'event-editor';
const createEventEditorPlugin = createPluginFactory({
  key: KEY_EVENT_EDITOR,
  handlers: {
    onFocus: editor => () => {
      eventEditorActions.focus(editor.id);
    },
    onBlur: editor => () => {
      const focus = eventEditorSelectors.focus();

      if (focus === editor.id) {
        eventEditorActions.focus(null);
      }

      eventEditorActions.blur(editor.id);
    }
  }
});

const withTHistory = editor => slateHistory.withHistory(editor);
/**
 * @see {@link withHistory}
 */

const createHistoryPlugin = createPluginFactory({
  key: 'history',
  withOverrides: withTHistory
});

const KEY_INLINE_VOID = 'inline-void';
/**
 * Merge and register all the inline types and void types from the plugins and options,
 * using `editor.isInline` and `editor.isVoid`
 */

const withInlineVoid = editor => {
  const {
    isInline
  } = editor;
  const {
    isVoid
  } = editor;
  const inlineTypes = [];
  const voidTypes = [];
  editor.plugins.forEach(plugin => {
    if (plugin.isInline) {
      inlineTypes.push(plugin.type);
    }

    if (plugin.isVoid) {
      voidTypes.push(plugin.type);
    }
  });

  editor.isInline = element => {
    return inlineTypes.includes(element.type) ? true : isInline(element);
  };

  editor.isVoid = element => voidTypes.includes(element.type) ? true : isVoid(element);

  return editor;
};
/**
 * @see {@link withInlineVoid}
 */

const createInlineVoidPlugin = createPluginFactory({
  key: KEY_INLINE_VOID,
  withOverrides: withInlineVoid
});

/**
 * Get all plugins having a defined `inject.pluginsByKey[plugin.key]`.
 * It includes `plugin` itself.
 */
const getInjectedPlugins = (editor, plugin) => {
  const injectedPlugins = [];
  [...editor.plugins].reverse().forEach(p => {
    var _p$inject$pluginsByKe;

    const injectedPlugin = (_p$inject$pluginsByKe = p.inject.pluginsByKey) === null || _p$inject$pluginsByKe === void 0 ? void 0 : _p$inject$pluginsByKe[plugin.key];
    if (injectedPlugin) injectedPlugins.push(injectedPlugin);
  });
  return [plugin, ...injectedPlugins];
};

/**
 * Is the plugin disabled by another plugin.
 */
const pipeInsertDataQuery = (plugins, {
  data,
  dataTransfer
}) => plugins.every(p => {
  var _p$editor, _p$editor$insertData;

  const query = (_p$editor = p.editor) === null || _p$editor === void 0 ? void 0 : (_p$editor$insertData = _p$editor.insertData) === null || _p$editor$insertData === void 0 ? void 0 : _p$editor$insertData.query;
  return !query || query({
    data,
    dataTransfer
  });
});

/**
 * Call a function, deferring normalization until after it completes
 * @return true if normalized.
 */
const withoutNormalizing = (editor, fn) => {
  let normalized = false;
  slate.Editor.withoutNormalizing(editor, () => {
    normalized = !!fn();
  });
  return normalized;
};

/**
 * Pipe preInsert then insertFragment.
 */
const pipeInsertFragment = (editor, injectedPlugins, {
  fragment,
  ...options
}) => {
  withoutNormalizing(editor, () => {
    injectedPlugins.some(p => {
      var _p$editor, _p$editor$insertData, _p$editor$insertData$;

      return ((_p$editor = p.editor) === null || _p$editor === void 0 ? void 0 : (_p$editor$insertData = _p$editor.insertData) === null || _p$editor$insertData === void 0 ? void 0 : (_p$editor$insertData$ = _p$editor$insertData.preInsert) === null || _p$editor$insertData$ === void 0 ? void 0 : _p$editor$insertData$.call(_p$editor$insertData, fragment, options)) === true;
    });
    editor.insertFragment(fragment);
  });
};

/**
 * Pipe editor.insertData.transformData
 */
const pipeTransformData = (plugins, {
  data,
  dataTransfer
}) => {
  plugins.forEach(p => {
    var _p$editor, _p$editor$insertData;

    const transformData = (_p$editor = p.editor) === null || _p$editor === void 0 ? void 0 : (_p$editor$insertData = _p$editor.insertData) === null || _p$editor$insertData === void 0 ? void 0 : _p$editor$insertData.transformData;
    if (!transformData) return;
    data = transformData(data, {
      dataTransfer
    });
  });
  return data;
};

/**
 * Pipe editor.insertData.transformFragment
 */
const pipeTransformFragment = (plugins, {
  fragment,
  ...options
}) => {
  plugins.forEach(p => {
    var _p$editor, _p$editor$insertData;

    const transformFragment = (_p$editor = p.editor) === null || _p$editor === void 0 ? void 0 : (_p$editor$insertData = _p$editor.insertData) === null || _p$editor$insertData === void 0 ? void 0 : _p$editor$insertData.transformFragment;
    if (!transformFragment) return;
    fragment = transformFragment(fragment, options);
  });
  return fragment;
};

const withInsertData = editor => {
  const {
    insertData
  } = editor;

  editor.insertData = dataTransfer => {
    const inserted = [...editor.plugins].reverse().some(plugin => {
      var _fragment;

      const insertDataOptions = plugin.editor.insertData;
      if (!insertDataOptions) return false;
      const injectedPlugins = getInjectedPlugins(editor, plugin);
      const {
        format,
        getFragment
      } = insertDataOptions;
      if (!format) return false;
      let data = dataTransfer.getData(format);
      if (!data) return;

      if (!pipeInsertDataQuery(injectedPlugins, {
        data,
        dataTransfer
      })) {
        return false;
      }

      data = pipeTransformData(injectedPlugins, {
        data,
        dataTransfer
      });
      let fragment = getFragment === null || getFragment === void 0 ? void 0 : getFragment({
        data,
        dataTransfer
      });
      if (!((_fragment = fragment) !== null && _fragment !== void 0 && _fragment.length)) return false;
      fragment = pipeTransformFragment(injectedPlugins, {
        fragment,
        data,
        dataTransfer
      });
      if (!fragment.length) return false;
      pipeInsertFragment(editor, injectedPlugins, {
        fragment,
        data,
        dataTransfer
      });
      return true;
    });
    if (inserted) return;
    insertData(dataTransfer);
  };

  return editor;
};
const KEY_INSERT_DATA = 'insertData';
const createInsertDataPlugin = createPluginFactory({
  key: KEY_INSERT_DATA,
  withOverrides: withInsertData
});

const withTReact = editor => slateReact.withReact(editor);

/**
 * @see {@link withReact}
 */

const createReactPlugin = createPluginFactory({
  key: 'react',
  withOverrides: withTReact
});

/**
 * Check if a value implements the 'Element' interface.
 */
const isElement = value => slate.Element.isElement(value);

/**
 * Check if a value implements the `Text` interface.
 */
const isText = value => slate.Text.isText(value);

const ELEMENT_DEFAULT = 'p';

const createTEditor = () => slate.createEditor();

const createPlateStore = (state = {}) => zustood.createStore(`plate-${state.id}`)({
  id: 'main',
  value: [{
    type: ELEMENT_DEFAULT,
    children: [{
      text: ''
    }]
  }],
  editor: null,
  isReady: false,
  isRendered: false,
  keyEditor: 1,
  keyPlugins: 1,
  keySelection: 1,
  keyDecorate: 1,
  decorate: null,
  enabled: true,
  editableProps: null,
  onChange: null,
  plugins: [],
  renderElement: null,
  renderLeaf: null,
  ...state
}).extendActions((_set, _get) => ({
  /**
   * Set a new editor with plate.
   */
  resetEditor: () => {
    var _get$editor;

    _set.editor(withPlate(createTEditor(), {
      id: state.id,
      plugins: (_get$editor = _get.editor()) === null || _get$editor === void 0 ? void 0 : _get$editor.plugins
    }));
  },
  incrementKey: key => {
    var _get$key;

    const prev = (_get$key = _get[key]()) !== null && _get$key !== void 0 ? _get$key : 1;

    _set[key](prev + 1);
  }
})).extendActions(_set => ({
  /**
   * Redecorate the editor.
   */
  redecorate: () => {
    _set.incrementKey('keyDecorate');
  }
}));

/**
 * Get `editor.pluginsByKey`
 */
const getPluginsByKey = editor => {
  var _ref;

  return (_ref = editor === null || editor === void 0 ? void 0 : editor.pluginsByKey) !== null && _ref !== void 0 ? _ref : {};
};

/**
 * Get plugin options by plugin key.
 */

const getPlugin = (editor, key) => {
  var _getPluginsByKey$key;

  return (_getPluginsByKey$key = getPluginsByKey(editor)[key]) !== null && _getPluginsByKey$key !== void 0 ? _getPluginsByKey$key : {
    key
  };
};

/**
 * Get plugin type option by plugin key.
 */

const getPluginType = (editor, key) => {
  var _ref, _getPlugin$type;

  return (_ref = (_getPlugin$type = getPlugin(editor, key).type) !== null && _getPlugin$type !== void 0 ? _getPlugin$type : key) !== null && _ref !== void 0 ? _ref : '';
};

const isInlineNode = editor => node => isText(node) || isElement(node) && editor.isInline(node);

const makeBlockLazy = type => () => ({
  type,
  children: []
});

const hasDifferentChildNodes = (descendants, isInline) => {
  return descendants.some((descendant, index, arr) => {
    const prevDescendant = arr[index - 1];

    if (index !== 0) {
      return isInline(descendant) !== isInline(prevDescendant);
    }

    return false;
  });
};
/**
 * Handles 3rd constraint: "Block nodes can only contain other blocks, or inline and text nodes."
 */


const normalizeDifferentNodeTypes = (descendants, isInline, makeDefaultBlock) => {
  const hasDifferentNodes = hasDifferentChildNodes(descendants, isInline);
  const {
    fragment
  } = descendants.reduce((memo, node) => {
    if (hasDifferentNodes && isInline(node)) {
      let block = memo.precedingBlock;

      if (!block) {
        block = makeDefaultBlock();
        memo.precedingBlock = block;
        memo.fragment.push(block);
      }

      block.children.push(node);
    } else {
      memo.fragment.push(node);
      memo.precedingBlock = null;
    }

    return memo;
  }, {
    fragment: [],
    precedingBlock: null
  });
  return fragment;
};
/**
 * Handles 1st constraint: "All Element nodes must contain at least one Text descendant."
 */


const normalizeEmptyChildren = descendants => {
  if (!descendants.length) {
    return [{
      text: ''
    }];
  }

  return descendants;
};

const normalize = (descendants, isInline, makeDefaultBlock) => {
  descendants = normalizeEmptyChildren(descendants);
  descendants = normalizeDifferentNodeTypes(descendants, isInline, makeDefaultBlock);
  descendants = descendants.map(node => {
    if (isElement(node)) {
      return { ...node,
        children: normalize(node.children, isInline, makeDefaultBlock)
      };
    }

    return node;
  });
  return descendants;
};
/**
 * Normalize the descendants to a valid document fragment.
 */


const normalizeDescendantsToDocumentFragment = (editor, {
  descendants
}) => {
  const isInline = isInlineNode(editor);
  const defaultType = getPluginType(editor, ELEMENT_DEFAULT);
  const makeDefaultBlock = makeBlockLazy(defaultType);
  return normalize(descendants, isInline, makeDefaultBlock);
};

/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

function isObject(o) {
  return Object.prototype.toString.call(o) === '[object Object]';
}

function isPlainObject(o) {
  var ctor,prot;

  if (isObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (ctor === undefined) return true;

  // If has modified prototype
  prot = ctor.prototype;
  if (isObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/**
 * A weak map to hold anchor tokens.
 */
var ANCHOR = new WeakMap();
/**
 * A weak map to hold focus tokens.
 */

var FOCUS = new WeakMap();
/**
 * All tokens inherit from a single constructor for `instanceof` checking.
 */

class Token {}
/**
 * Anchor tokens represent the selection's anchor point.
 */

class AnchorToken extends Token {
  constructor() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();
    var {
      offset,
      path
    } = props;
    this.offset = offset;
    this.path = path;
  }

}
/**
 * Focus tokens represent the selection's focus point.
 */

class FocusToken extends Token {
  constructor() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();
    var {
      offset,
      path
    } = props;
    this.offset = offset;
    this.path = path;
  }

}
/**
 * Add an anchor token to the end of a text node.
 */

var addAnchorToken = (text, token) => {
  var offset = text.text.length;
  ANCHOR.set(text, [offset, token]);
};
/**
 * Get the offset if a text node has an associated anchor token.
 */

var getAnchorOffset = text => {
  return ANCHOR.get(text);
};
/**
 * Add a focus token to the end of a text node.
 */

var addFocusToken = (text, token) => {
  var offset = text.text.length;
  FOCUS.set(text, [offset, token]);
};
/**
 * Get the offset if a text node has an associated focus token.
 */

var getFocusOffset = text => {
  return FOCUS.get(text);
};

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Resolve the descedants of a node by normalizing the children that can be
 * passed into a hyperscript creator function.
 */

var STRINGS = new WeakSet();

var resolveDescendants = children => {
  var nodes = [];

  var addChild = child => {
    if (child == null) {
      return;
    }

    var prev = nodes[nodes.length - 1];

    if (typeof child === 'string') {
      var text = {
        text: child
      };
      STRINGS.add(text);
      child = text;
    }

    if (slate.Text.isText(child)) {
      var c = child; // HACK: fix typescript complaining

      if (slate.Text.isText(prev) && STRINGS.has(prev) && STRINGS.has(c) && slate.Text.equals(prev, c, {
        loose: true
      })) {
        prev.text += c.text;
      } else {
        nodes.push(c);
      }
    } else if (slate.Element.isElement(child)) {
      nodes.push(child);
    } else if (child instanceof Token) {
      var n = nodes[nodes.length - 1];

      if (!slate.Text.isText(n)) {
        addChild('');
        n = nodes[nodes.length - 1];
      }

      if (child instanceof AnchorToken) {
        addAnchorToken(n, child);
      } else if (child instanceof FocusToken) {
        addFocusToken(n, child);
      }
    } else {
      throw new Error("Unexpected hyperscript child object: ".concat(child));
    }
  };

  for (var child of children.flat(Infinity)) {
    addChild(child);
  }

  return nodes;
};
/**
 * Create an anchor token.
 */


function createAnchor(tagName, attributes, children) {
  return new AnchorToken(attributes);
}
/**
 * Create an anchor and a focus token.
 */

function createCursor(tagName, attributes, children) {
  return [new AnchorToken(attributes), new FocusToken(attributes)];
}
/**
 * Create an `Element` object.
 */

function createElement(tagName, attributes, children) {
  return _objectSpread$1(_objectSpread$1({}, attributes), {}, {
    children: resolveDescendants(children)
  });
}
/**
 * Create a focus token.
 */

function createFocus(tagName, attributes, children) {
  return new FocusToken(attributes);
}
/**
 * Create a fragment.
 */

function createFragment(tagName, attributes, children) {
  return resolveDescendants(children);
}
/**
 * Create a `Selection` object.
 */

function createSelection(tagName, attributes, children) {
  var anchor = children.find(c => c instanceof AnchorToken);
  var focus = children.find(c => c instanceof FocusToken);

  if (!anchor || anchor.offset == null || anchor.path == null) {
    throw new Error("The <selection> hyperscript tag must have an <anchor> tag as a child with `path` and `offset` attributes defined.");
  }

  if (!focus || focus.offset == null || focus.path == null) {
    throw new Error("The <selection> hyperscript tag must have a <focus> tag as a child with `path` and `offset` attributes defined.");
  }

  return _objectSpread$1({
    anchor: {
      offset: anchor.offset,
      path: anchor.path
    },
    focus: {
      offset: focus.offset,
      path: focus.path
    }
  }, attributes);
}
/**
 * Create a `Text` object.
 */

function createText(tagName, attributes, children) {
  var nodes = resolveDescendants(children);

  if (nodes.length > 1) {
    throw new Error("The <text> hyperscript tag must only contain a single node's worth of children.");
  }

  var [node] = nodes;

  if (node == null) {
    node = {
      text: ''
    };
  }

  if (!slate.Text.isText(node)) {
    throw new Error("\n    The <text> hyperscript tag can only contain text content as children.");
  } // COMPAT: If they used the <text> tag we want to guarantee that it won't be
  // merge with other string children.


  STRINGS.delete(node);
  Object.assign(node, attributes);
  return node;
}
/**
 * Create a top-level `Editor` object.
 */

var createEditor = makeEditor => (tagName, attributes, children) => {
  var otherChildren = [];
  var selectionChild;

  for (var child of children) {
    if (slate.Range.isRange(child)) {
      selectionChild = child;
    } else {
      otherChildren.push(child);
    }
  }

  var descendants = resolveDescendants(otherChildren);
  var selection = {};
  var editor = makeEditor();
  Object.assign(editor, attributes);
  editor.children = descendants; // Search the document's texts to see if any of them have tokens associated
  // that need incorporated into the selection.

  for (var [node, path] of slate.Node.texts(editor)) {
    var anchor = getAnchorOffset(node);
    var focus = getFocusOffset(node);

    if (anchor != null) {
      var [offset] = anchor;
      selection.anchor = {
        path,
        offset
      };
    }

    if (focus != null) {
      var [_offset] = focus;
      selection.focus = {
        path,
        offset: _offset
      };
    }
  }

  if (selection.anchor && !selection.focus) {
    throw new Error("Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<anchor />`. For collapsed selections, use `<cursor />` instead.");
  }

  if (!selection.anchor && selection.focus) {
    throw new Error("Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<focus />`. For collapsed selections, use `<cursor />` instead.");
  }

  if (selectionChild != null) {
    editor.selection = selectionChild;
  } else if (slate.Range.isRange(selection)) {
    editor.selection = selection;
  }

  return editor;
};

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * The default creators for Slate objects.
 */

var DEFAULT_CREATORS = {
  anchor: createAnchor,
  cursor: createCursor,
  editor: createEditor(slate.createEditor),
  element: createElement,
  focus: createFocus,
  fragment: createFragment,
  selection: createSelection,
  text: createText
};
/**
 * Create a Slate hyperscript function with `options`.
 */

var createHyperscript = function createHyperscript() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var {
    elements = {}
  } = options;
  var elementCreators = normalizeElements(elements);

  var creators = _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_CREATORS), elementCreators), options.creators);

  var jsx = createFactory(creators);
  return jsx;
};
/**
 * Create a Slate hyperscript function with `options`.
 */


var createFactory = creators => {
  var jsx = function jsx(tagName, attributes) {
    for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      children[_key - 2] = arguments[_key];
    }

    var creator = creators[tagName];

    if (!creator) {
      throw new Error("No hyperscript creator found for tag: <".concat(tagName, ">"));
    }

    if (attributes == null) {
      attributes = {};
    }

    if (!isPlainObject(attributes)) {
      children = [attributes].concat(children);
      attributes = {};
    }

    children = children.filter(child => Boolean(child)).flat();
    var ret = creator(tagName, attributes, children);
    return ret;
  };

  return jsx;
};
/**
 * Normalize a dictionary of element shorthands into creator functions.
 */


var normalizeElements = elements => {
  var creators = {};

  var _loop = function _loop(tagName) {
    var props = elements[tagName];

    if (typeof props !== 'object') {
      throw new Error("Properties specified for a hyperscript shorthand should be an object, but for the custom element <".concat(tagName, ">  tag you passed: ").concat(props));
    }

    creators[tagName] = (tagName, attributes, children) => {
      return createElement('element', _objectSpread(_objectSpread({}, props), attributes), children);
    };
  };

  for (var tagName in elements) {
    _loop(tagName);
  }

  return creators;
};

/**
 * The default hyperscript factory that ships with Slate, without custom tags.
 */

var jsx = createHyperscript();

const deserializeHtmlNodeChildren = (editor, node) => Array.from(node.childNodes).map(deserializeHtmlNode(editor)).flat();

/**
 * Deserialize HTML body element to Fragment.
 */

const htmlBodyToFragment = (editor, element) => {
  if (element.nodeName === 'BODY') {
    return jsx('fragment', {}, deserializeHtmlNodeChildren(editor, element));
  }
};

/**
 * Deserialize HTML to break line.
 */
const htmlBrToNewLine = node => {
  if (node.nodeName === 'BR') {
    return '\n';
  }
};

/**
 * Casts `value` as an array if it's not one.
 *
 * @static
 * @memberOf _
 * @since 4.4.0
 * @category Lang
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast array.
 * @example
 *
 * _.castArray(1);
 * // => [1]
 *
 * _.castArray({ 'a': 1 });
 * // => [{ 'a': 1 }]
 *
 * _.castArray('abc');
 * // => ['abc']
 *
 * _.castArray(null);
 * // => [null]
 *
 * _.castArray(undefined);
 * // => [undefined]
 *
 * _.castArray();
 * // => []
 *
 * var array = [1, 2, 3];
 * console.log(_.castArray(array) === array);
 * // => true
 */
function castArray() {
  if (!arguments.length) {
    return [];
  }
  var value = arguments[0];
  return isArray_1(value) ? value : [value];
}

var castArray_1 = castArray;

/**
 * Get a deserializer by type, node names, class names and styles.
 */

const pluginDeserializeHtml = (editor, plugin, {
  element: el,
  deserializeLeaf
}) => {
  var _getNode;

  const {
    deserializeHtml,
    isElement: isElementRoot,
    isLeaf: isLeafRoot,
    type
  } = plugin;
  if (!deserializeHtml) return;
  const {
    attributeNames,
    query,
    isLeaf: isLeafRule,
    isElement: isElementRule,
    rules
  } = deserializeHtml;
  let {
    getNode
  } = deserializeHtml;
  const isElement = isElementRule || isElementRoot;
  const isLeaf = isLeafRule || isLeafRoot;

  if (!deserializeLeaf && !isElement) {
    return;
  }

  if (deserializeLeaf && !isLeaf) {
    return;
  }

  if (rules) {
    const isValid = rules.some(({
      validNodeName = '*',
      validStyle,
      validClassName,
      validAttribute
    }) => {
      if (validNodeName) {
        const validNodeNames = castArray_1(validNodeName); // Ignore if el nodeName is not included in rule validNodeNames (except *).

        if (validNodeNames.length && !validNodeNames.includes(el.nodeName) && validNodeName !== '*') return false;
      } // Ignore if the rule className is not in el class list.


      if (validClassName && !el.classList.contains(validClassName)) return false;

      if (validStyle) {
        for (const [key, value] of Object.entries(validStyle)) {
          var _plugin$inject$props;

          const values = castArray_1(value); // Ignore if el style value is not included in rule style values (except *)

          if (!values.includes(el.style[key]) && value !== '*') return; // Ignore if el style value is falsy (for value *)

          if (value === '*' && !el.style[key]) return;
          const defaultNodeValue = (_plugin$inject$props = plugin.inject.props) === null || _plugin$inject$props === void 0 ? void 0 : _plugin$inject$props.defaultNodeValue; // Ignore if the style value = plugin.inject.props.defaultNodeValue

          if (defaultNodeValue && defaultNodeValue === el.style[key]) {
            return false;
          }
        }
      }

      if (validAttribute) {
        if (typeof validAttribute === 'string') {
          if (!el.getAttributeNames().includes(validAttribute)) return false;
        } else {
          for (const [attributeName, attributeValue] of Object.entries(validAttribute)) {
            const attributeValues = castArray_1(attributeValue);
            const elAttribute = el.getAttribute(attributeName);
            if (!elAttribute || !attributeValues.includes(elAttribute)) return false;
          }
        }
      }

      return true;
    });
    if (!isValid) return;
  }

  if (query && !query(el)) {
    return;
  }

  if (!getNode) {
    if (isElement) {
      getNode = () => ({
        type
      });
    } else if (isLeaf) {
      getNode = () => ({
        [type]: true
      });
    } else {
      return;
    }
  }

  let node = (_getNode = getNode(el, {})) !== null && _getNode !== void 0 ? _getNode : {};
  if (!Object.keys(node).length) return;
  const injectedPlugins = getInjectedPlugins(editor, plugin);
  injectedPlugins.forEach(injectedPlugin => {
    var _injectedPlugin$deser, _injectedPlugin$deser2;

    const res = (_injectedPlugin$deser = injectedPlugin.deserializeHtml) === null || _injectedPlugin$deser === void 0 ? void 0 : (_injectedPlugin$deser2 = _injectedPlugin$deser.getNode) === null || _injectedPlugin$deser2 === void 0 ? void 0 : _injectedPlugin$deser2.call(_injectedPlugin$deser, el, node);

    if (res) {
      node = { ...node,
        ...res
      };
    }
  });

  if (attributeNames) {
    const elementAttributes = {};
    const elementAttributeNames = el.getAttributeNames();

    for (const elementAttributeName of elementAttributeNames) {
      if (attributeNames.includes(elementAttributeName)) {
        elementAttributes[elementAttributeName] = el.getAttribute(elementAttributeName);
      }
    }

    if (Object.keys(elementAttributes).length) {
      node.attributes = elementAttributes;
    }
  }

  return { ...deserializeHtml,
    node
  };
};

const pipeDeserializeHtmlElement = (editor, element) => {
  let result;
  [...editor.plugins].reverse().some(plugin => {
    result = pluginDeserializeHtml(editor, plugin, {
      element
    });
    return !!result;
  });
  return result;
};

/**
 * Deserialize HTML to Element.
 */

const htmlElementToElement = (editor, element) => {
  const deserialized = pipeDeserializeHtmlElement(editor, element);

  if (deserialized) {
    var _node$children;

    const {
      node,
      withoutChildren
    } = deserialized;
    let descendants = (_node$children = node.children) !== null && _node$children !== void 0 ? _node$children : deserializeHtmlNodeChildren(editor, element);

    if (!descendants.length || withoutChildren) {
      descendants = [{
        text: ''
      }];
    }

    return jsx('element', node, descendants);
  }
};

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = _createAssigner(function(object, source, srcIndex) {
  _baseMerge(object, source, srcIndex);
});

var merge_1 = merge;

/**
 * Get the node at a location.
 */
const getNodeEntry = (editor, at, options) => slate.Editor.node(editor, at, options);

/**
 * Get the path of a location.
 */
const getPath = (editor, at, options) => slate.Editor.path(editor, at, options);

/**
 * Check if a value is a void `Element` object.
 */
const isVoid = (editor, value) => {
  return slate.Editor.isVoid(editor, value);
};

/**
 * Return a generator of all the descendant node entries inside a root node.
 */
const getNodeDescendants = (root, options) => slate.Node.descendants(root, options);

/**
 * Check if a value is a block `Element` object.
 */
const isBlock = (editor, value) => slate.Editor.isBlock(editor, value);

/**
 * Match the object with a predicate object or function.
 * If predicate is:
 * - object: every predicate key/value should be in obj.
 * - function: it should return true.
 */
const match = (obj, path, predicate) => {
  if (!predicate) return true;

  if (typeof predicate === 'object') {
    return Object.entries(predicate).every(([key, value]) => {
      const values = castArray_1(value);

      return values.includes(obj[key]);
    });
  }

  return predicate(obj, path);
};
/**
 * Extended query options for slate queries:
 * - `match` can be an object predicate where one of the values should include the node value.
 * Example: { type: ['1', '2'] } will match the nodes having one of these 2 types.
 */

const getQueryOptions = (editor, options = {}) => {
  const {
    match: _match,
    block
  } = options;
  return { ...options,
    match: _match || block ? (n, path) => match(n, path, _match) && (!block || isBlock(editor, n)) : undefined
  };
};

/**
 * Iterate through all of the nodes in the editor and return the first match. If
 * no match is found, return undefined.
 */
/**
 * Get the first descendant node matching the condition.
 */

const findDescendant = (editor, options) => {
  // Slate throws when things aren't found so we wrap in a try catch and return undefined on throw.
  try {
    const {
      match: _match,
      at = editor.selection,
      reverse = false,
      voids = false
    } = options;
    if (!at) return;
    let from;
    let to;

    if (slate.Span.isSpan(at)) {
      [from, to] = at;
    } else if (slate.Range.isRange(at)) {
      const first = getPath(editor, at, {
        edge: 'start'
      });
      const last = getPath(editor, at, {
        edge: 'end'
      });
      from = reverse ? last : first;
      to = reverse ? first : last;
    }

    let root = [editor, []];

    if (slate.Path.isPath(at)) {
      root = getNodeEntry(editor, at);
    }

    const nodeEntries = getNodeDescendants(root[0], {
      reverse,
      from,
      to,
      pass: ([n]) => voids ? false : isVoid(editor, n)
    });

    for (const [node, path] of nodeEntries) {
      if (match(node, path, _match)) {
        return [node, at.concat(path)];
      }
    }
  } catch (error) {
    return undefined;
  }
};

/**
 * Convert a range into a non-hanging one if:
 * - `unhang` is true,
 * - `at` (default: selection) is a range.
 */
const unhangRange = (editor, range, options = {}) => {
  const {
    voids,
    unhang = true
  } = options;

  if (slate.Range.isRange(range) && unhang) {
    return slate.Editor.unhangRange(editor, range, {
      voids
    });
  }
};

/**
 * Iterate through all of the nodes in the Editor.
 */
const getNodeEntries = (editor, options) => {
  unhangRange(editor, options === null || options === void 0 ? void 0 : options.at, options);
  return slate.Editor.nodes(editor, getQueryOptions(editor, options));
};

/**
 * Find node matching the condition.
 */
const findNode = (editor, options = {}) => {
  // Slate throws when things aren't found so we wrap in a try catch and return undefined on throw.
  try {
    const nodeEntries = getNodeEntries(editor, {
      at: editor.selection || [],
      ...getQueryOptions(editor, options)
    });

    for (const [node, path] of nodeEntries) {
      return [node, path];
    }
  } catch (error) {
    return undefined;
  }
};

/**
 * Get the ancestor above a location in the document.
 */
const getAboveNode = (editor, options) => slate.Editor.above(editor, getQueryOptions(editor, options));

/**
 * Get the block above a location (default: selection).
 */
const getBlockAbove = (editor, options = {}) => getAboveNode(editor, { ...options,
  block: true
});

/**
 * Check if a value implements the 'Ancestor' interface.
 */
const isAncestor = value => slate.Element.isAncestor(value);

/**
 * Get children node entries of a node entry.
 * TODO: try Node.children
 */
const getChildren = nodeEntry => {
  const [node, path] = nodeEntry;

  if (isAncestor(node)) {
    const {
      children
    } = node;
    return children.map((child, index) => {
      const childPath = path.concat([index]);
      return [child, childPath];
    });
  }

  return [];
};

/**
 * Get the start and end points of a location.
 */
const getEdgePoints = (editor, at) => slate.Editor.edges(editor, at);

/**
 * Get the edge blocks above a location (default: selection).
 */

const getEdgeBlocksAbove = (editor, {
  at: _at,
  ...options
} = {}) => {
  const at = _at !== null && _at !== void 0 ? _at : editor.selection;
  if (!at) return null;
  const [start, end] = getEdgePoints(editor, at !== null && at !== void 0 ? at : editor.selection);
  const startBlock = getBlockAbove(editor, {
    at: start,
    ...options
  });
  if (!startBlock) return null;
  const endBlock = getBlockAbove(editor, {
    at: end,
    ...options
  });
  if (!endBlock) return null;
  return [startBlock, endBlock];
};

/**
 * Get the last child of a node or null if no children.
 */

const getLastChild$1 = nodeEntry => {
  const [node, path] = nodeEntry;
  if (isText(node)) return null;
  if (!node.children.length) return null;
  const children = node.children;
  return [children[children.length - 1], path.concat([children.length - 1])];
};
/**
 * Get last child path. If there is no child, last index is 0.
 */

const getLastChildPath = nodeEntry => {
  const lastChild = getLastChild$1(nodeEntry);
  if (!lastChild) return nodeEntry[1].concat([-1]);
  return lastChild[1];
};
/**
 * Is the child path the last one of the parent.
 */

const isLastChild = (parentEntry, childPath) => {
  const lastChildPath = getLastChildPath(parentEntry);
  return slate.Path.equals(lastChildPath, childPath);
};

/**
 * Get the last node at a location.
 */
const getLastNode = (editor, at) => slate.Editor.last(editor, at);

const getLastChild = (node, level) => {
  if (!(level + 1) || !isAncestor(node)) return node;
  const {
    children
  } = node;
  const lastNode = children[children.length - 1];
  return getLastChild(lastNode, level - 1);
};
/**
 * Get the last node at a given level.
 */


const getLastNodeByLevel = (editor, level) => {
  const {
    children
  } = editor;
  const lastNode = children[children.length - 1];
  if (!lastNode) return;
  const [, lastPath] = getLastNode(editor, []);
  return [getLastChild(lastNode, level - 1), lastPath.slice(0, level + 1)];
};

/**
 * Get the marks that would be added to text at the current selection.
 */
const getMarks = editor => slate.Editor.marks(editor);

/**
 * Get selected mark by type.
 */
const getMark = (editor, type) => {
  if (!editor) return;
  const marks = getMarks(editor);
  return marks === null || marks === void 0 ? void 0 : marks[type];
};

/**
 * Get the next sibling nodes after a path.
 * @param ancestorEntry Ancestor of the sibling nodes
 * @param path Path of the reference node
 */
const getNextSiblingNodes = (ancestorEntry, path) => {
  const [ancestor, ancestorPath] = ancestorEntry;
  const leafIndex = path[ancestorPath.length];
  const siblings = [];
  const ancestorChildren = ancestor.children;

  if (leafIndex + 1 < ancestor.children.length) {
    for (let i = leafIndex + 1; i < ancestor.children.length; i++) {
      siblings.push(ancestorChildren[i]);
    }
  }

  return siblings;
};

/**
 * Get typed editor operations.
 */
const getOperations = editor => editor.operations;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

var _arrayMap = arrayMap;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

var _setCacheAdd = setCacheAdd;

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

var _setCacheHas = setCacheHas;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new _MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
SetCache.prototype.has = _setCacheHas;

var _SetCache = SetCache;

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

var _arraySome = arraySome;

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

var _cacheHas = cacheHas;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$5 = 1,
    COMPARE_UNORDERED_FLAG$3 = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new _SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!_arraySome(other, function(othValue, othIndex) {
            if (!_cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

var _equalArrays = equalArrays;

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

var _mapToArray = mapToArray;

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

var _setToArray = setToArray;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$4 = 1,
    COMPARE_UNORDERED_FLAG$2 = 2;

/** `Object#toString` result references. */
var boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    errorTag$1 = '[object Error]',
    mapTag$4 = '[object Map]',
    numberTag$2 = '[object Number]',
    regexpTag$2 = '[object RegExp]',
    setTag$4 = '[object Set]',
    stringTag$2 = '[object String]',
    symbolTag$3 = '[object Symbol]';

var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$3 = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag$3:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag$2:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag$2:
    case dateTag$2:
    case numberTag$2:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq_1(+object, +other);

    case errorTag$1:
      return object.name == other.name && object.message == other.message;

    case regexpTag$2:
    case stringTag$2:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag$4:
      var convert = _mapToArray;

    case setTag$4:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
      convert || (convert = _setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG$2;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag$3:
      if (symbolValueOf$1) {
        return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
      }
  }
  return false;
}

var _equalByTag = equalByTag;

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

var _arrayPush = arrayPush;

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
}

var _baseGetAllKeys = baseGetAllKeys;

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

var _arrayFilter = arrayFilter;

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

var stubArray_1 = stubArray;

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols$1 ? stubArray_1 : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return _arrayFilter(nativeGetSymbols$1(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

var _getSymbols = getSymbols;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = _overArg(Object.keys, Object);

var _nativeKeys = nativeKeys;

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!_isPrototype(object)) {
    return _nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty$4.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

var _baseKeys = baseKeys;

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
}

var keys_1 = keys;

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return _baseGetAllKeys(object, keys_1, _getSymbols);
}

var _getAllKeys = getAllKeys;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$3 = 1;

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      objProps = _getAllKeys(object),
      objLength = objProps.length,
      othProps = _getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty$3.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

var _equalObjects = equalObjects;

/* Built-in method references that are verified to be native. */
var DataView = _getNative(_root, 'DataView');

var _DataView = DataView;

/* Built-in method references that are verified to be native. */
var Promise$1 = _getNative(_root, 'Promise');

var _Promise = Promise$1;

/* Built-in method references that are verified to be native. */
var Set = _getNative(_root, 'Set');

var _Set = Set;

/* Built-in method references that are verified to be native. */
var WeakMap$1 = _getNative(_root, 'WeakMap');

var _WeakMap = WeakMap$1;

/** `Object#toString` result references. */
var mapTag$3 = '[object Map]',
    objectTag$2 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$3 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]';

var dataViewTag$2 = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = _toSource(_DataView),
    mapCtorString = _toSource(_Map),
    promiseCtorString = _toSource(_Promise),
    setCtorString = _toSource(_Set),
    weakMapCtorString = _toSource(_WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = _baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
    (_Map && getTag(new _Map) != mapTag$3) ||
    (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
    (_Set && getTag(new _Set) != setTag$3) ||
    (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
  getTag = function(value) {
    var result = _baseGetTag(value),
        Ctor = result == objectTag$2 ? value.constructor : undefined,
        ctorString = Ctor ? _toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag$2;
        case mapCtorString: return mapTag$3;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag$3;
        case weakMapCtorString: return weakMapTag$1;
      }
    }
    return result;
  };
}

var _getTag = getTag;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$2 = 1;

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    objectTag$1 = '[object Object]';

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray_1(object),
      othIsArr = isArray_1(other),
      objTag = objIsArr ? arrayTag$1 : _getTag(object),
      othTag = othIsArr ? arrayTag$1 : _getTag(other);

  objTag = objTag == argsTag$1 ? objectTag$1 : objTag;
  othTag = othTag == argsTag$1 ? objectTag$1 : othTag;

  var objIsObj = objTag == objectTag$1,
      othIsObj = othTag == objectTag$1,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer_1(object)) {
    if (!isBuffer_1(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new _Stack);
    return (objIsArr || isTypedArray_1(object))
      ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
    var objIsWrapped = objIsObj && hasOwnProperty$2.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$2.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new _Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new _Stack);
  return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

var _baseIsEqualDeep = baseIsEqualDeep;

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
    return value !== value && other !== other;
  }
  return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

var _baseIsEqual = baseIsEqual;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG$1 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new _Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

var _baseIsMatch = baseIsMatch;

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject_1(value);
}

var _isStrictComparable = isStrictComparable;

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys_1(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, _isStrictComparable(value)];
  }
  return result;
}

var _getMatchData = getMatchData;

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

var _matchesStrictComparable = matchesStrictComparable;

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = _getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || _baseIsMatch(object, source, matchData);
  };
}

var _baseMatches = baseMatches;

/** `Object#toString` result references. */
var symbolTag$2 = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag$2);
}

var isSymbol_1 = isSymbol;

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray_1(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol_1(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

var _isKey = isKey;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || _MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = _MapCache;

var memoize_1 = memoize;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize_1(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

var _memoizeCapped = memoizeCapped;

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = _memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var _stringToPath = stringToPath;

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray_1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return _arrayMap(value, baseToString) + '';
  }
  if (isSymbol_1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

var _baseToString = baseToString;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : _baseToString(value);
}

var toString_1 = toString;

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray_1(value)) {
    return value;
  }
  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
}

var _castPath = castPath;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol_1(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

var _toKey = toKey;

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = _castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[_toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

var _baseGet = baseGet;

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : _baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

var get_1 = get;

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

var _baseHasIn = baseHasIn;

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = _castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = _toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength_1(length) && _isIndex(key, length) &&
    (isArray_1(object) || isArguments_1(object));
}

var _hasPath = hasPath;

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && _hasPath(object, path, _baseHasIn);
}

var hasIn_1 = hasIn;

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (_isKey(path) && _isStrictComparable(srcValue)) {
    return _matchesStrictComparable(_toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get_1(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn_1(object, path)
      : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

var _baseMatchesProperty = baseMatchesProperty;

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

var _baseProperty = baseProperty;

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return _baseGet(object, path);
  };
}

var _basePropertyDeep = basePropertyDeep;

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
}

var property_1 = property;

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity_1;
  }
  if (typeof value == 'object') {
    return isArray_1(value)
      ? _baseMatchesProperty(value[0], value[1])
      : _baseMatches(value);
  }
  return property_1(value);
}

var _baseIteratee = baseIteratee;

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && _baseFor(object, iteratee, keys_1);
}

var _baseForOwn = baseForOwn;

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike_1(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

var _createBaseEach = createBaseEach;

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = _createBaseEach(_baseForOwn);

var _baseEach = baseEach;

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike_1(collection) ? Array(collection.length) : [];

  _baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

var _baseMap = baseMap;

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray_1(collection) ? _arrayMap : _baseMap;
  return func(collection, _baseIteratee(iteratee));
}

var map_1 = map;

/**
 * Get the text string content of a location.
 *
 * Note: by default the text of void nodes is considered to be an empty
 * string, regardless of content, unless you pass in true for the voids option
 */
const getEditorString = (editor, at, options) => at ? slate.Editor.string(editor, at, options) : '';

/**
 * Get the start or end point of a location.
 */
const getPoint = (editor, at, options) => slate.Editor.point(editor, at, options);

/**
 * Get the point before a location.
 */
const getPointBefore = (editor, at, options) => slate.Editor.before(editor, at, options);

/**
 * Is the range (default: selection) across blocks.
 */

const isRangeAcrossBlocks = (editor, {
  at,
  ...options
} = {}) => {
  if (!at) at = editor.selection;
  if (!at) return false;
  const [start, end] = slate.Range.edges(at);
  const startBlock = getBlockAbove(editor, {
    at: start,
    ...options
  });
  const endBlock = getBlockAbove(editor, {
    at: end,
    ...options
  });
  return startBlock && endBlock && !slate.Path.equals(startBlock[1], endBlock[1]);
};

/* eslint-disable no-constant-condition */

/**
 * {@link getPointBefore} with additional options.
 * TODO: support for sequence of any characters.
 */
const getPointBeforeLocation = (editor, at, options) => {
  if (!options || !options.match && !options.matchString) {
    return getPointBefore(editor, at, options);
  }

  const unitOffset = !options.unit || options.unit === 'offset';
  const matchStrings = options.matchString ? castArray_1(options.matchString) : [''];
  let point;
  matchStrings.some(matchString => {
    let beforeAt = at;
    let previousBeforePoint = getPoint(editor, at, {
      edge: 'end'
    });
    const stackLength = matchString.length + 1;
    const stack = Array(stackLength);
    let count = 0;

    while (true) {
      var _options$match;

      const beforePoint = getPointBefore(editor, beforeAt, options); // not found

      if (!beforePoint) return; // stop looking outside of current block

      if (isRangeAcrossBlocks(editor, {
        at: {
          anchor: beforePoint,
          focus: previousBeforePoint
        }
      })) {
        return;
      }

      const beforeString = getEditorString(editor, {
        anchor: beforePoint,
        focus: previousBeforePoint
      });
      let beforeStringToMatch = beforeString;

      if (unitOffset && stackLength) {
        stack.unshift({
          point: beforePoint,
          text: beforeString
        });
        stack.pop();
        beforeStringToMatch = map_1(stack.slice(0, -1), 'text').join('');
      }

      if (matchString === beforeStringToMatch || (_options$match = options.match) !== null && _options$match !== void 0 && _options$match.call(options, {
        beforeString: beforeStringToMatch,
        beforePoint,
        at
      })) {
        if (options.afterMatch) {
          if (stackLength && unitOffset) {
            var _stack;

            point = (_stack = stack[stack.length - 1]) === null || _stack === void 0 ? void 0 : _stack.point;
            return !!point;
          }

          point = previousBeforePoint;
          return true;
        }

        point = beforePoint;
        return true;
      }

      previousBeforePoint = beforePoint;
      beforeAt = beforePoint;
      count += 1;

      if (!options.skipInvalid) {
        if (!matchString || count > matchString.length) return;
      }
    }
  });
  return point;
};

/**
 * Get the point from a location (default: selection).
 * If the location is a range, get the anchor point.
 * If the location is a path, get the point at this path with offset 0.
 * If `focus` is true, get the focus point.
 */
const getPointFromLocation = (editor, {
  at = editor.selection,
  focus
} = {}) => {
  let point;
  if (slate.Range.isRange(at)) point = !focus ? at.anchor : at.focus;
  if (slate.Point.isPoint(at)) point = at;
  if (slate.Path.isPath(at)) point = {
    path: at,
    offset: 0
  };
  return point;
};

/**
 * Get the point after a location.
 */
const getPointAfter = (editor, at, options) => slate.Editor.after(editor, at, options);

/**
 * Match a void node in the current branch of the editor.
 */
const getVoidNode = (editor, options) => slate.Editor.void(editor, options);

/**
 * If the start point is inside an inline void, get the point before or after it.
 */

const getPointNextToVoid = (editor, {
  at,
  after
}) => {
  const startVoid = getVoidNode(editor, {
    at,
    mode: 'highest'
  });

  if (startVoid) {
    const blockAbove = getBlockAbove(editor, {
      at
    });

    if (blockAbove) {
      let nextPoint;

      if (after) {
        nextPoint = getPointAfter(editor, at);
      } else {
        nextPoint = getPointBefore(editor, at);
      }

      if (nextPoint && blockAbove && slate.Path.isAncestor(blockAbove[1], nextPoint.path)) {
        at = nextPoint;
      }
    }
  }

  return at;
};

/**
 * Get the matching node in the branch of the document before a location.
 */
const getPreviousNode = (editor, options) => slate.Editor.previous(editor, options);

/**
 * Query the node entry.
 */
const queryNode = (entry, {
  filter,
  allow,
  exclude
} = {}) => {
  if (!entry) return false;

  if (filter && !filter(entry)) {
    return false;
  }

  if (allow) {
    const allows = castArray_1(allow);

    if (allows.length && !allows.includes(entry[0].type)) {
      return false;
    }
  }

  if (exclude) {
    const excludes = castArray_1(exclude);

    if (excludes.length && excludes.includes(entry[0].type)) {
      return false;
    }
  }

  return true;
};

/**
 * Find the block before a block by id.
 * If not found, find the first block by id and return [null, its previous path]
 */

const getPreviousBlockById = (editor, id, query) => {
  const entry = findNode(editor, {
    match: {
      id
    }
  });

  if (entry) {
    const prevEntry = getPreviousNode(editor, {
      at: entry[1]
    });

    if (prevEntry && prevEntry[0].id && isBlock(editor, prevEntry[0])) {
      return prevEntry;
    }
  }

  let found = false;

  const _nodes = getNodeEntries(editor, {
    mode: 'highest',
    reverse: true,
    match: n => {
      // filter nodes that are not blocks and without id.
      if (!isBlock(editor, n) || !n.id) return false; // find the block then take the previous one.

      if (n.id === id) {
        found = true;
        return false;
      }

      return found && n.id !== id && queryNode([n, []], query);
    },
    at: []
  });

  const nodeEntries = Array.from(_nodes);

  if (nodeEntries.length) {
    return nodeEntries[0];
  }

  if (!found) return;

  const _entries = getNodeEntries(editor, {
    mode: 'highest',
    match: n => {
      return isBlock(editor, n) && !!n.id && queryNode([n, []], query);
    },
    at: []
  });

  const firstNodeEntry = Array.from(_entries);

  if (firstNodeEntry.length) {
    const [, path] = firstNodeEntry[0];
    path[path.length - 1] = path[path.length - 1] - 1;
    return [null, path];
  }
};

const getPreviousPath = path => {
  if (path.length === 0) return;
  const last = path[path.length - 1];
  if (last <= 0) return;
  return path.slice(0, -1).concat(last - 1);
};

/**
 * Get range from {@link getPointBeforeLocation} to the end point of `at`.
 */
const getRangeBefore = (editor, at, options) => {
  const anchor = getPointBeforeLocation(editor, at, options);
  if (!anchor) return;
  const focus = getPoint(editor, at, {
    edge: 'end'
  });
  return {
    anchor,
    focus
  };
};

/**
 * Get the start point of a location.
 */
const getStartPoint = (editor, at) => slate.Editor.start(editor, at);

/**
 * Get the range from the start of the block above a location (default: selection) to the location.
 */

const getRangeFromBlockStart = (editor, options = {}) => {
  var _getBlockAbove;

  const path = (_getBlockAbove = getBlockAbove(editor, options)) === null || _getBlockAbove === void 0 ? void 0 : _getBlockAbove[1];
  if (!path) return;
  const start = getStartPoint(editor, path);
  const focus = getPointFromLocation(editor, options);
  if (!focus) return;
  return {
    anchor: start,
    focus
  };
};

/**
 * Get the selected text.
 * Return empty string if no selection.
 */
const getSelectionText = editor => getEditorString(editor, editor.selection);

const hasSingleChild = node => {
  if (isText(node)) {
    return true;
  }

  return node.children.length === 1 && hasSingleChild(node.children[0]);
};

/**
 * Check if a value is an inline `Element` object.
 */
const isInline = (editor, value) => slate.Editor.isInline(editor, value);

/**
 * Get the concatenated text string of a node's content.
 *
 * Note that this will not include spaces or line breaks between block nodes.
 * It is not a user-facing string, but a string for performing offset-related
 * computations for a node.
 */
const getNodeString = node => slate.Node.string(node);

/**
 * Is an ancestor empty (empty text and no inline children).
 */
const isAncestorEmpty = (editor, node) => !getNodeString(node) && !node.children.some(n => isInline(editor, n));

/**
 * Is the block above the selection empty.
 */

const isBlockAboveEmpty = editor => {
  var _getBlockAbove;

  const block = (_getBlockAbove = getBlockAbove(editor)) === null || _getBlockAbove === void 0 ? void 0 : _getBlockAbove[0];
  if (!block) return false;
  return isAncestorEmpty(editor, block);
};

/**
 * Get the parent node of a location.
 * Returns undefined if there is no parent.
 */
const getParentNode = (editor, at, options) => {
  try {
    return slate.Editor.parent(editor, at, options);
  } catch (err) {}
};

/**
 * Check if a point is the end point of a location.
 * If point is null, return false.
 */
const isEndPoint = (editor, point, at) => !!point && slate.Editor.isEnd(editor, point, at);

/**
 * Is there empty text after the selection.
 * If there is no leaf after the selected leaf, return {@link isEndPoint}.
 * Else, check if the next leaves are empty.
 */

const isBlockTextEmptyAfterSelection = editor => {
  if (!editor.selection) return false;
  const blockAbove = getBlockAbove(editor);
  if (!blockAbove) return false;
  const cursor = editor.selection.focus;
  const selectionParentEntry = getParentNode(editor, editor.selection);
  if (!selectionParentEntry) return false;
  const [, selectionParentPath] = selectionParentEntry;
  if (!isEndPoint(editor, cursor, selectionParentPath)) return false;
  const siblingNodes = getNextSiblingNodes(blockAbove, cursor.path);

  if (siblingNodes.length) {
    for (const siblingNode of siblingNodes) {
      if (isText(siblingNode) && siblingNode.text) {
        return false;
      }
    }
  } else {
    return isEndPoint(editor, cursor, blockAbove[1]);
  }

  return true;
};

/**
 * Is it the first child of the parent
 */
const isFirstChild = path => path[path.length - 1] === 0;

/**
 * Is the mark defined in the selection.
 */

const isMarkActive = (editor, type) => {
  return isDefined(getMark(editor, type));
};

/**
 * Get a range of a location.
 */
const getRange = (editor, at, to) => slate.Editor.range(editor, at, to);

// Starts with whitespace char or nothing
const AFTER_MATCH_REGEX = /^(\s|$)/;
/**
 * Is a point at the end of a word
 */

const isPointAtWordEnd = (editor, {
  at
}) => {
  // Point after at
  const after = getPointAfter(editor, at); // From at to after

  const afterRange = getRange(editor, at, after);
  const afterText = getEditorString(editor, afterRange); // Match regex on after text

  return !!afterText.match(AFTER_MATCH_REGEX);
};

/**
 * Is the range in the same single text path.
 */

const isRangeInSingleText = at => {
  const [start, end] = slate.Range.edges(at);
  return slate.Path.equals(start.path, end.path);
};

/**
 * Is the selection focus at the end of its parent block.
 */

const isSelectionAtBlockEnd = editor => {
  var _getBlockAbove, _editor$selection;

  const path = (_getBlockAbove = getBlockAbove(editor)) === null || _getBlockAbove === void 0 ? void 0 : _getBlockAbove[1];
  return !!path && isEndPoint(editor, (_editor$selection = editor.selection) === null || _editor$selection === void 0 ? void 0 : _editor$selection.focus, path);
};

/**
 * Check if a point is the start point of a location.
 * If point is null, return false.
 */
const isStartPoint = (editor, point, at) => !!point && slate.Editor.isStart(editor, point, at);

/**
 * Is the selection focus at the start of its parent block.
 *
 * Supports the same options provided by {@link getBlockAbove}.
 */

const isSelectionAtBlockStart = (editor, options) => {
  var _getBlockAbove, _editor$selection;

  const path = (_getBlockAbove = getBlockAbove(editor, options)) === null || _getBlockAbove === void 0 ? void 0 : _getBlockAbove[1];
  return !!path && isStartPoint(editor, (_editor$selection = editor.selection) === null || _editor$selection === void 0 ? void 0 : _editor$selection.focus, path);
};

/**
 * See {@link Range.isExpanded}.
 * Return false if `range` is not defined.
 */

const isExpanded = range => !!range && slate.Range.isExpanded(range);

/**
 * Is the selection expanded.
 */

const isSelectionExpanded = editor => isExpanded(editor.selection);

/**
 * Get the descendant node referred to by a specific path.
 * If the path is an empty array, it refers to the root node itself.
 * If the node is not found, return null.
 */
const getNode = (root, path) => {
  try {
    return slate.Node.get(root, path);
  } catch (err) {
    return null;
  }
};

const isTextByPath = (editor, path) => {
  const node = getNode(editor, path);
  return isText(node);
};

/**
 * Does the node match the type provided.
 */

const isType = (editor, node, key) => {
  const keys = castArray_1(key);
  const types = [];
  keys.forEach(_key => types.push(getPluginType(editor, _key)));
  return types.includes(node === null || node === void 0 ? void 0 : node.type);
};

/**
 * Is the word at the point after a trigger (punctuation character)
 * https://github.com/ianstormtaylor/slate/blob/main/packages/slate/src/utils/string.ts#L6
 */

const isWordAfterTrigger = (editor, {
  at,
  trigger
}) => {
  // Point at the start of previous word (excluding punctuation)
  const wordBefore = getPointBefore(editor, at, {
    unit: 'word'
  }); // Point before wordBefore

  const before = wordBefore && getPointBefore(editor, wordBefore); // Range from before to start

  const beforeRange = before && getRange(editor, before, at); // Before text

  const beforeText = getEditorString(editor, beforeRange); // Starts with char and ends with word characters

  const escapedTrigger = escapeRegExp(trigger);
  const beforeRegex = new RegExp(`^${escapedTrigger}([\\w|À-ÖØ-öø-ÿ|а-яА-ЯёЁ]+)$`); // Match regex on before text

  const match = !!beforeText && beforeText.match(beforeRegex);
  return {
    range: beforeRange,
    match
  };
};

/**
 * Iterate through all of the nodes in the editor and break early for the first truthy match. Otherwise
 * returns false.
 */

const someNode = (editor, options) => {
  return !!findNode(editor, options);
};

/**
 * Query the editor state.
 */

const queryEditor = (editor, {
  filter,
  selectionAtBlockStart,
  selectionAtBlockEnd,
  allow,
  exclude,
  at = editor.selection || []
} = {}) => {
  if (filter && !filter(editor) || selectionAtBlockStart && !isSelectionAtBlockStart(editor) || selectionAtBlockEnd && !isSelectionAtBlockEnd(editor)) {
    return false;
  }

  const allows = castArray_1(allow);

  if (allows.length && !someNode(editor, {
    at,
    match: {
      type: allows
    }
  })) {
    return false;
  }

  const excludes = castArray_1(exclude);

  if (excludes.length && someNode(editor, {
    at,
    match: {
      type: excludes
    }
  })) {
    return false;
  }

  return true;
};

/**
 * Recursively apply an operation to children nodes with a query.
 */
const applyDeepToNodes = ({
  node,
  source,
  apply,
  query
}) => {
  const entry = [node, []];

  if (queryNode(entry, query)) {
    if (source instanceof Function) {
      apply(node, source());
    } else {
      apply(node, source);
    }
  }

  if (!isAncestor(node)) return;
  node.children.forEach(child => {
    applyDeepToNodes({
      node: child,
      source,
      apply,
      query
    });
  });
};

/**
 * Recursively merge a source object to children nodes with a query.
 */

const mergeDeepToNodes = options => {
  applyDeepToNodes({ ...options,
    apply: merge_1
  });
};

const pipeDeserializeHtmlLeaf = (editor, element) => {
  let node = {};
  [...editor.plugins].reverse().forEach(plugin => {
    const deserialized = pluginDeserializeHtml(editor, plugin, {
      element,
      deserializeLeaf: true
    });
    if (!deserialized) return;
    node = { ...node,
      ...deserialized.node
    };
  });
  return node;
};

/**
 * Deserialize HTML to TDescendant[] with marks on Text.
 * Build the leaf from the leaf deserializers of each plugin.
 */

const htmlElementToLeaf = (editor, element) => {
  const node = pipeDeserializeHtmlLeaf(editor, element);
  return deserializeHtmlNodeChildren(editor, element).reduce((arr, child) => {
    if (!child) return arr;

    if (isElement(child)) {
      if (Object.keys(node).length) {
        mergeDeepToNodes({
          node: child,
          source: node,
          query: {
            filter: ([n]) => isText(n)
          }
        });
      }

      arr.push(child);
    } else {
      const attributes = { ...node
      }; // attributes should not override child attributes

      if (isText(child) && child.text) {
        Object.keys(attributes).forEach(key => {
          if (attributes[key] && child[key]) {
            attributes[key] = child[key];
          }
        });
      }

      arr.push(jsx('text', attributes, child));
    }

    return arr;
  }, []);
};

const isHtmlText = node => node.nodeType === Node.TEXT_NODE;

/**
 * Deserialize HTML text node to text.
 */
//   if (isHtmlText(node)) {
//     return node.nodeValue === '\n' && null : node.textContent;
//   }
// };

const htmlTextNodeToString = node => {
  if (isHtmlText(node)) {
    return node.nodeValue === '\n' ? null : node.textContent;
  }
};

const isHtmlElement = node => node.nodeType === Node.ELEMENT_NODE;

/**
 * Deserialize HTML element or child node.
 */

const deserializeHtmlNode = editor => node => {
  const textNode = htmlTextNodeToString(node);
  if (textNode) return textNode;
  if (!isHtmlElement(node)) return null; // break line

  const breakLine = htmlBrToNewLine(node);
  if (breakLine) return breakLine; // body

  const fragment = htmlBodyToFragment(editor, node);
  if (fragment) return fragment; // element

  const element = htmlElementToElement(editor, node);
  if (element) return element; // leaf

  return htmlElementToLeaf(editor, node);
};

/**
 * Deserialize HTML element to fragment.
 */

const deserializeHtmlElement = (editor, element) => {
  return deserializeHtmlNode(editor)(element);
};

/**
 * Convert HTML string into HTML element.
 */
const htmlStringToDOMNode = (rawHtml, stripWhitespace = true) => {
  const node = document.createElement('body');
  node.innerHTML = rawHtml;

  if (stripWhitespace) {
    node.innerHTML = node.innerHTML.replace(/(\r\n|\n|\r|\t)/gm, '');
  }

  return node;
};

/**
 * Deserialize HTML element to a valid document fragment.
 */

const deserializeHtml = (editor, {
  element,
  stripWhitespace = true
}) => {
  // for serializer
  if (typeof element === 'string') {
    element = htmlStringToDOMNode(element, stripWhitespace);
  }

  const fragment = deserializeHtmlElement(editor, element);
  return normalizeDescendantsToDocumentFragment(editor, {
    descendants: fragment
  });
};

const parseHtmlDocument = html => {
  return new DOMParser().parseFromString(html, 'text/html');
};

const KEY_DESERIALIZE_HTML = 'deserializeHtml';
/**
 * Enables support for deserializing inserted content from HTML format to Slate format.
 */

const createDeserializeHtmlPlugin = createPluginFactory({
  key: KEY_DESERIALIZE_HTML,
  then: editor => ({
    editor: {
      insertData: {
        format: 'text/html',
        getFragment: ({
          data
        }) => {
          const document = parseHtmlDocument(data);
          return deserializeHtml(editor, {
            element: document.body
          });
        }
      }
    }
  })
});

const SCOPE_PLATE = Symbol('plate');
const plateIdAtom = jotai.atom(null);
/**
 * Get plate editor id provided by PlateProvider.
 */

const usePlateId = (scope = SCOPE_PLATE) => {
  const [plateId] = jotai.useAtom(plateIdAtom, scope);
  return plateId;
};

const getEventEditorId = id => {
  var _eventEditorSelectors;

  if (id) return id;
  const focus = eventEditorSelectors.focus();
  if (focus) return focus;
  const blur = eventEditorSelectors.blur();
  if (blur) return blur;
  return (_eventEditorSelectors = eventEditorSelectors.last()) !== null && _eventEditorSelectors !== void 0 ? _eventEditorSelectors : 'main';
};

const loadingStore = createPlateStore({
  id: 'loading'
});
const getPlateStore = id => {
  id = getEventEditorId(id);
  const store = platesStore.get.get(id);
  return store || loadingStore;
};
const usePlateStore = id => {
  var _ref, _id;

  const plateId = usePlateId();
  id = (_ref = (_id = id) !== null && _id !== void 0 ? _id : plateId) !== null && _ref !== void 0 ? _ref : 'main';
  const store = platesStore.use.get(id);

  if (store) {
    return store;
  }

  console.warn("The plate hooks must be used inside the <PlateProvider id={id}> component's context.");
  return store || loadingStore;
};

const setPlateState = (draft, state) => {
  if (!isUndefined(state.onChange)) draft.onChange = state.onChange;
  if (!isUndefined(state.plugins)) draft.plugins = state.plugins;
  if (!isUndefined(state.editableProps)) draft.editableProps = state.editableProps;
  if (!isUndefined(state.renderElement)) draft.renderElement = state.renderElement;
  if (!isUndefined(state.renderLeaf)) draft.renderLeaf = state.renderLeaf;
  if (!isUndefined(state.decorate)) draft.decorate = state.decorate;
  if (!isUndefined(state.enabled)) draft.enabled = state.enabled;

  if (!isUndefined(state.editor)) {
    draft.editor = state.editor;

    if (state.editor) {
      draft.value = state.editor.children;
    }
  }

  if (!isUndefined(state.initialValue)) draft.value = state.initialValue;
  if (!isUndefined(state.value)) draft.value = state.value;
  return draft;
};
/**
 * Plates store.
 */

const createPlatesStore = (initialState = {}) => zustood.createStore('plate')(initialState).extendActions(set => ({
  /**
   * Set state by id.
   * If the store is not yet initialized, it will be initialized.
   * If the store is already set, it will be updated.
   */
  // eslint-disable-next-line prettier/prettier
  set: (id, state) => {
    set.state(draft => {
      if (!id) return;
      let store = draft[id];

      if (!store) {
        store = createPlateStore({
          id,
          ...setPlateState({}, state !== null && state !== void 0 ? state : {})
        });
        draft[id] = store;
        eventEditorActions.last(id);
      }
    });
  },

  /**
   * Remove state by id. Called by `Plate` on unmount.
   */
  unset: id => {
    set.state(draft => {
      delete draft[id];
    });
  }
})).extendSelectors(state => ({
  // eslint-disable-next-line prettier/prettier
  get(id) {
    return state[id];
  },

  has(id) {
    const ids = castArray_1(id);

    return ids.every(_id => !!state[_id]);
  }

}));
const platesStore = createPlatesStore({});
const platesActions = platesStore.set;
const platesSelectors = platesStore.get;
const usePlatesSelectors = platesStore.use;
const getPlateActions = id => getPlateStore(id).set;
const getPlateSelectors = id => getPlateStore(id).get;
const usePlateSelectors = id => usePlateStore(id).use;

/**
 * A specialized version of `baseAggregator` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function arrayAggregator(array, setter, iteratee, accumulator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    var value = array[index];
    setter(accumulator, value, iteratee(value), array);
  }
  return accumulator;
}

var _arrayAggregator = arrayAggregator;

/**
 * Aggregates elements of `collection` on `accumulator` with keys transformed
 * by `iteratee` and values set by `setter`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function baseAggregator(collection, setter, iteratee, accumulator) {
  _baseEach(collection, function(value, key, collection) {
    setter(accumulator, value, iteratee(value), collection);
  });
  return accumulator;
}

var _baseAggregator = baseAggregator;

/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */
function createAggregator(setter, initializer) {
  return function(collection, iteratee) {
    var func = isArray_1(collection) ? _arrayAggregator : _baseAggregator,
        accumulator = initializer ? initializer() : {};

    return func(collection, setter, _baseIteratee(iteratee), accumulator);
  };
}

var _createAggregator = createAggregator;

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the last element responsible for generating the key. The
 * iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * var array = [
 *   { 'dir': 'left', 'code': 97 },
 *   { 'dir': 'right', 'code': 100 }
 * ];
 *
 * _.keyBy(array, function(o) {
 *   return String.fromCharCode(o.code);
 * });
 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
 *
 * _.keyBy(array, 'dir');
 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
 */
var keyBy = _createAggregator(function(result, value, key) {
  _baseAssignValue(result, key, value);
});

var keyBy_1 = keyBy;

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return _arrayMap(props, function(key) {
    return object[key];
  });
}

var _baseValues = baseValues;

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : _baseValues(object, keys_1(object));
}

var values_1 = values;

/**
 * Recursively merge nested plugins into the root plugins
 */
const mergeDeepPlugins = (editor, _plugin) => {
  const plugin = { ..._plugin
  };
  const {
    then
  } = plugin;

  if (then) {
    delete plugin.then;
    const {
      plugins: pluginPlugins
    } = plugin;
    const pluginThen = mergeDeepPlugins(editor, defaultsDeep_1(then(editor, plugin), plugin)); // merge plugins by key

    if (pluginPlugins && pluginThen.plugins) {
      const merged = merge_1(keyBy_1(pluginPlugins, 'key'), keyBy_1(pluginThen.plugins, 'key'));
      pluginThen.plugins = values_1(merged);
    }

    return pluginThen;
  }

  return plugin;
};

const setDefaultPlugin = plugin => {
  if (plugin.type === undefined) plugin.type = plugin.key;
  if (!plugin.options) plugin.options = {};
  if (!plugin.inject) plugin.inject = {};
  if (!plugin.editor) plugin.editor = {};
  return plugin;
};

/**
 * Recursively merge plugin.plugins into editor.plugins and editor.pluginsByKey
 */

const flattenDeepPlugins = (editor, plugins) => {
  if (!plugins) return;
  plugins.forEach(plugin => {
    let p = setDefaultPlugin(plugin);
    p = mergeDeepPlugins(editor, p);

    if (!editor.pluginsByKey[p.key]) {
      editor.plugins.push(p);
      editor.pluginsByKey[p.key] = p;
    } else {
      const index = editor.plugins.indexOf(editor.pluginsByKey[p.key]);
      const mergedPlugin = defaultsDeep_1(p, editor.pluginsByKey[p.key]);

      if (index >= 0) {
        editor.plugins[index] = mergedPlugin;
      }

      editor.pluginsByKey[p.key] = mergedPlugin;
    }

    flattenDeepPlugins(editor, p.plugins);
  });
};

/**
 * Flatten deep plugins then set editor.plugins and editor.pluginsByKey
 */

const setPlatePlugins = (editor, {
  disableCorePlugins,
  plugins: _plugins = []
}) => {
  let plugins = [];

  if (disableCorePlugins !== true) {
    const dcp = disableCorePlugins;

    if (typeof dcp !== 'object' || !dcp.react) {
      var _ref, _editor$pluginsByKey;

      plugins.push((_ref = (_editor$pluginsByKey = editor.pluginsByKey) === null || _editor$pluginsByKey === void 0 ? void 0 : _editor$pluginsByKey.react) !== null && _ref !== void 0 ? _ref : createReactPlugin());
    }

    if (typeof dcp !== 'object' || !dcp.history) {
      var _ref2, _editor$pluginsByKey2;

      plugins.push((_ref2 = (_editor$pluginsByKey2 = editor.pluginsByKey) === null || _editor$pluginsByKey2 === void 0 ? void 0 : _editor$pluginsByKey2.history) !== null && _ref2 !== void 0 ? _ref2 : createHistoryPlugin());
    }

    if (typeof dcp !== 'object' || !dcp.eventEditor) {
      var _ref3, _editor$pluginsByKey3;

      plugins.push((_ref3 = (_editor$pluginsByKey3 = editor.pluginsByKey) === null || _editor$pluginsByKey3 === void 0 ? void 0 : _editor$pluginsByKey3[KEY_EVENT_EDITOR]) !== null && _ref3 !== void 0 ? _ref3 : createEventEditorPlugin());
    }

    if (typeof dcp !== 'object' || !dcp.inlineVoid) {
      var _ref4, _editor$pluginsByKey4;

      plugins.push((_ref4 = (_editor$pluginsByKey4 = editor.pluginsByKey) === null || _editor$pluginsByKey4 === void 0 ? void 0 : _editor$pluginsByKey4[KEY_INLINE_VOID]) !== null && _ref4 !== void 0 ? _ref4 : createInlineVoidPlugin());
    }

    if (typeof dcp !== 'object' || !dcp.insertData) {
      var _ref5, _editor$pluginsByKey5;

      plugins.push((_ref5 = (_editor$pluginsByKey5 = editor.pluginsByKey) === null || _editor$pluginsByKey5 === void 0 ? void 0 : _editor$pluginsByKey5[KEY_INSERT_DATA]) !== null && _ref5 !== void 0 ? _ref5 : createInsertDataPlugin());
    }

    if (typeof dcp !== 'object' || !dcp.deserializeHtml) {
      var _ref6, _editor$pluginsByKey6;

      plugins.push((_ref6 = (_editor$pluginsByKey6 = editor.pluginsByKey) === null || _editor$pluginsByKey6 === void 0 ? void 0 : _editor$pluginsByKey6[KEY_DESERIALIZE_HTML]) !== null && _ref6 !== void 0 ? _ref6 : createDeserializeHtmlPlugin());
    }

    if (typeof dcp !== 'object' || !dcp.deserializeAst) {
      var _ref7, _editor$pluginsByKey7;

      plugins.push((_ref7 = (_editor$pluginsByKey7 = editor.pluginsByKey) === null || _editor$pluginsByKey7 === void 0 ? void 0 : _editor$pluginsByKey7[KEY_DESERIALIZE_AST]) !== null && _ref7 !== void 0 ? _ref7 : createDeserializeAstPlugin());
    }
  }

  plugins = [...plugins, ..._plugins];
  editor.plugins = [];
  editor.pluginsByKey = {};
  flattenDeepPlugins(editor, plugins); // override all the plugins one by one, so plugin.overrideByKey effects can be overridden by the next plugin

  editor.plugins.forEach(plugin => {
    if (plugin.overrideByKey) {
      const newPlugins = editor.plugins.map(p => {
        return overridePluginsByKey(p, plugin.overrideByKey);
      });
      editor.plugins = [];
      editor.pluginsByKey = {}; // flatten again the overrides

      flattenDeepPlugins(editor, newPlugins);
    }
  });
  getPlateActions(editor.id).incrementKey('keyPlugins');
};

/**
 * Apply `withInlineVoid` and all plate plugins `withOverrides`.
 * Overrides:
 * - `id`: id of the editor.
 * - `key`: random key for the <Slate> component so each time the editor is created, the component resets.
 * - `options`: Plate options
 */
const withPlate = (e, {
  id = 'main',
  plugins = [],
  disableCorePlugins
} = {}) => {
  let editor = e;
  editor.id = id;

  if (!editor.key) {
    editor.key = Math.random();
  }

  setPlatePlugins(editor, {
    plugins: plugins,
    disableCorePlugins
  }); // withOverrides

  editor.plugins.forEach(plugin => {
    if (plugin.withOverrides) {
      editor = plugin.withOverrides(editor, plugin);
    }
  });
  return editor;
};

/**
 * Normalize any dirty objects in the editor.
 */
const normalizeEditor = (editor, options) => slate.Editor.normalize(editor, options);

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

var _arrayEach = arrayEach;

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && _copyObject(source, keys_1(source), object);
}

var _baseAssign = baseAssign;

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && _copyObject(source, keysIn_1(source), object);
}

var _baseAssignIn = baseAssignIn;

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return _copyObject(source, _getSymbols(source), object);
}

var _copySymbols = copySymbols;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray_1 : function(object) {
  var result = [];
  while (object) {
    _arrayPush(result, _getSymbols(object));
    object = _getPrototype(object);
  }
  return result;
};

var _getSymbolsIn = getSymbolsIn;

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return _copyObject(source, _getSymbolsIn(source), object);
}

var _copySymbolsIn = copySymbolsIn;

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
}

var _getAllKeysIn = getAllKeysIn;

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty$1.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

var _initCloneArray = initCloneArray;

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

var _cloneDataView = cloneDataView;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

var _cloneRegExp = cloneRegExp;

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

var _cloneSymbol = cloneSymbol;

/** `Object#toString` result references. */
var boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    mapTag$2 = '[object Map]',
    numberTag$1 = '[object Number]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag$1 = '[object Symbol]';

var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag$1:
      return _cloneArrayBuffer(object);

    case boolTag$1:
    case dateTag$1:
      return new Ctor(+object);

    case dataViewTag$1:
      return _cloneDataView(object, isDeep);

    case float32Tag$1: case float64Tag$1:
    case int8Tag$1: case int16Tag$1: case int32Tag$1:
    case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
      return _cloneTypedArray(object, isDeep);

    case mapTag$2:
      return new Ctor;

    case numberTag$1:
    case stringTag$1:
      return new Ctor(object);

    case regexpTag$1:
      return _cloneRegExp(object);

    case setTag$2:
      return new Ctor;

    case symbolTag$1:
      return _cloneSymbol(object);
  }
}

var _initCloneByTag = initCloneByTag;

/** `Object#toString` result references. */
var mapTag$1 = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike_1(value) && _getTag(value) == mapTag$1;
}

var _baseIsMap = baseIsMap;

/* Node.js helper references. */
var nodeIsMap = _nodeUtil && _nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;

var isMap_1 = isMap;

/** `Object#toString` result references. */
var setTag$1 = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike_1(value) && _getTag(value) == setTag$1;
}

var _baseIsSet = baseIsSet;

/* Node.js helper references. */
var nodeIsSet = _nodeUtil && _nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;

var isSet_1 = isSet;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$2 = 1,
    CLONE_FLAT_FLAG$1 = 2,
    CLONE_SYMBOLS_FLAG$2 = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG$2,
      isFlat = bitmask & CLONE_FLAT_FLAG$1,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$2;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject_1(value)) {
    return value;
  }
  var isArr = isArray_1(value);
  if (isArr) {
    result = _initCloneArray(value);
    if (!isDeep) {
      return _copyArray(value, result);
    }
  } else {
    var tag = _getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer_1(value)) {
      return _cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : _initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? _copySymbolsIn(value, _baseAssignIn(result, value))
          : _copySymbols(value, _baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = _initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new _Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet_1(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap_1(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? _getAllKeysIn : _getAllKeys)
    : (isFlat ? keysIn_1 : keys_1);

  var props = isArr ? undefined : keysFunc(value);
  _arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

var _baseClone = baseClone;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG$1 = 1,
    CLONE_SYMBOLS_FLAG$1 = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return _baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
}

var cloneDeep_1 = cloneDeep;

/**
 * Creates a new array of plugins by overriding the plugins in the original array.
 * Components can be overridden by key using `components` in the second param.
 * Any other properties can be overridden by key using `overrideByKey` in the second param.
 */

const createPlugins = (plugins, {
  components,
  overrideByKey
} = {}) => {
  let allOverrideByKey = {};

  if (overrideByKey) {
    allOverrideByKey = cloneDeep_1(overrideByKey);
  }

  if (components) {
    Object.keys(components).forEach(key => {
      if (!allOverrideByKey[key]) allOverrideByKey[key] = {};
      allOverrideByKey[key].component = components[key];
    });
  }

  if (Object.keys(allOverrideByKey).length) {
    return plugins.map(plugin => {
      return overridePluginsByKey(plugin, allOverrideByKey);
    });
  }

  return plugins;
};

/**
 * Create a plate editor with:
 * - `createTEditor` or custom `editor`
 * - `withPlate`
 * - custom `components`
 */
const createPlateEditor = ({
  editor = createTEditor(),
  plugins = [],
  components,
  overrideByKey,
  normalizeInitialValue,
  ...withPlateOptions
} = {}) => {
  plugins = createPlugins(plugins, {
    components,
    overrideByKey
  });
  const e = withPlate(editor, {
    plugins,
    ...withPlateOptions
  });

  if (normalizeInitialValue) {
    normalizeEditor(e, {
      force: true
    });
  }

  return e;
};

/**
 * Get plugin keys by types
 */
const getKeysByTypes = (editor, type) => {
  const types = castArray_1(type);

  const found = Object.values(editor.pluginsByKey).filter(plugin => {
    return types.includes(plugin.type);
  });
  return found.map(p => p.key);
};

/**
 * Get plugin key by type
 */

const getKeyByType = (editor, type) => {
  return getKeysByTypes(editor, type)[0];
};

const getPluginInjectProps = (editor, key) => {
  var _getPlugin$inject$pro, _getPlugin$inject;

  return (_getPlugin$inject$pro = (_getPlugin$inject = getPlugin(editor, key).inject) === null || _getPlugin$inject === void 0 ? void 0 : _getPlugin$inject.props) !== null && _getPlugin$inject$pro !== void 0 ? _getPlugin$inject$pro : {};
};

const getPluginOptions = (editor, key) => {
  var _getPlugin$options;

  return (_getPlugin$options = getPlugin(editor, key).options) !== null && _getPlugin$options !== void 0 ? _getPlugin$options : {};
};

/**
 * Get plugin types option by plugin keys.
 */

const getPluginTypes = (editor, keys) => keys.map(key => getPluginType(editor, key));

/**
 * Get `editor.plugins`
 */
const getPlugins = editor => {
  var _ref;

  return (_ref = editor === null || editor === void 0 ? void 0 : editor.plugins) !== null && _ref !== void 0 ? _ref : [];
};

/**
 * Override node props with plugin props.
 * `props.element.attributes` are passed as `nodeProps`.
 * Extend the class name with the node type.
 */

const getRenderNodeProps = ({
  attributes,
  nodeProps,
  props,
  type
}) => {
  let newProps = {};

  if (props) {
    var _ref;

    newProps = (_ref = typeof props === 'function' ? props(nodeProps) : props) !== null && _ref !== void 0 ? _ref : {};
  }

  if (!newProps.nodeProps && attributes) {
    newProps.nodeProps = attributes;
  }

  nodeProps = { ...nodeProps,
    ...newProps
  };
  const {
    className
  } = nodeProps;
  return { ...nodeProps,
    className: clsx__default["default"](getSlateClass(type), className)
  };
};

/**
 * Map plugin inject props to injected plugin
 */

const mapInjectPropsToPlugin = (editor, plugin, injectedPlugin) => {
  var _plugin$inject$props;

  const validTypes = (_plugin$inject$props = plugin.inject.props) === null || _plugin$inject$props === void 0 ? void 0 : _plugin$inject$props.validTypes;
  if (!validTypes) return;
  const keys = getKeysByTypes(editor, validTypes);
  const injected = {};
  keys.forEach(key => {
    injected[key] = injectedPlugin;
  });
  return {
    inject: {
      pluginsByKey: injected
    }
  };
};

const mockPlugin = plugin => ({
  key: '',
  type: '',
  editor: {},
  inject: {},
  options: {},
  ...plugin
});

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return _baseIsEqual(value, other);
}

var isEqual_1 = isEqual;

/**
 * Get last event editor id: focus, blur or last.
 */

const useEventEditorId = () => {
  const focus = useEventEditorSelectors.focus();
  const blur = useEventEditorSelectors.blur();
  const last = useEventEditorSelectors.last();
  if (focus) return focus;
  if (blur) return blur;
  return last;
};

const useEventPlateId = (id, scope) => {
  var _ref, _ref2;

  const plateId = usePlateId(scope);
  const eventEditorId = useEventEditorId();
  return (_ref = (_ref2 = id !== null && id !== void 0 ? id : plateId) !== null && _ref2 !== void 0 ? _ref2 : eventEditorId) !== null && _ref !== void 0 ? _ref : 'main';
};

const getPlateEditorRef = id => getPlateSelectors(id).editor();
/**
 * Get editor ref which is never updated.
 */

const usePlateEditorRef = id => usePlateSelectors(id).editor();

/**
 * Get editor state which is updated on editor change.
 */

const usePlateEditorState = id => {
  usePlateSelectors(id).keyEditor();
  return usePlateEditorRef(id);
};

const getPlatePlugins = id => getPlugins(getPlateEditorRef(id));
const usePlatePlugins = id => {
  usePlateSelectors(id).keyPlugins();
  return getPlatePlugins(id);
};

/**
 * Get the editor selection which is updated on editor change.
 */

const usePlateSelection = id => {
  var _usePlateEditorRef;

  usePlateSelectors(id).keySelection();
  return (_usePlateEditorRef = usePlateEditorRef(id)) === null || _usePlateEditorRef === void 0 ? void 0 : _usePlateEditorRef.selection;
};

/**
 * Normalize initial value from editor plugins. Set into plate store if diff.
 */
const normalizeInitialValue = (editor, value) => {
  let normalizedValue = cloneDeep_1(value);

  editor.plugins.forEach(p => {
    var _p$normalizeInitialVa;

    const _normalizedValue = (_p$normalizeInitialVa = p.normalizeInitialValue) === null || _p$normalizeInitialVa === void 0 ? void 0 : _p$normalizeInitialVa.call(p, normalizedValue);

    if (_normalizedValue) {
      // eslint-disable-next-line react-hooks/exhaustive-deps
      normalizedValue = _normalizedValue;
    }
  });

  if (!isEqual_1(value, normalizedValue)) {
    getPlateActions(editor.id).value(normalizedValue);
    return normalizedValue;
  }
};

/**
 * @see {@link Decorate}.
 * Optimization: return undefined if empty list so Editable uses a memo.
 */
const pipeDecorate = (editor, decorateProp) => {
  const decorates = editor.plugins.flatMap(plugin => {
    var _plugin$decorate, _plugin$decorate2;

    return (_plugin$decorate = (_plugin$decorate2 = plugin.decorate) === null || _plugin$decorate2 === void 0 ? void 0 : _plugin$decorate2.call(plugin, editor, plugin)) !== null && _plugin$decorate !== void 0 ? _plugin$decorate : [];
  });

  if (decorateProp) {
    decorates.push(decorateProp);
  }

  if (!decorates.length) return;
  return entry => {
    let ranges = [];

    const addRanges = newRanges => {
      if (newRanges !== null && newRanges !== void 0 && newRanges.length) ranges = [...ranges, ...newRanges];
    };

    decorates.forEach(decorate => {
      addRanges(decorate(entry));
    });
    return ranges;
  };
};

/**
 * Check if an event is overrided by a handler.
 */
const isEventHandled = (event, handler) => {
  if (!handler) {
    return false;
  } // The custom event handler may return a boolean to specify whether the event
  // shall be treated as being handled or not.


  const shouldTreatEventAsHandled = handler(event);

  if (shouldTreatEventAsHandled != null) {
    return shouldTreatEventAsHandled;
  }

  return event.isPropagationStopped();
};
/**
 * Generic pipe for handlers.
 * - Get all the plugins handlers by `handlerKey`.
 * - If there is no plugin handler or editable prop handler for this key, return `undefined`.
 * - Return a handler calling all the plugins handlers then the prop handler.
 * - Any handler returning true will stop the next handlers to be called, including slate internal handler.
 */

const pipeHandler = (editor, {
  editableProps,
  handlerKey
}) => {
  let pluginsHandlers = [];
  pluginsHandlers = editor.plugins.flatMap(plugin => {
    var _plugin$handlers$hand, _plugin$handlers, _plugin$handlers$hand2;

    return (_plugin$handlers$hand = (_plugin$handlers = plugin.handlers) === null || _plugin$handlers === void 0 ? void 0 : (_plugin$handlers$hand2 = _plugin$handlers[handlerKey]) === null || _plugin$handlers$hand2 === void 0 ? void 0 : _plugin$handlers$hand2.call(_plugin$handlers, editor, plugin)) !== null && _plugin$handlers$hand !== void 0 ? _plugin$handlers$hand : [];
  });
  const propsHandler = editableProps === null || editableProps === void 0 ? void 0 : editableProps[handlerKey];
  if (!pluginsHandlers.length && !propsHandler) return;
  return event => {
    const eventIsHandled = pluginsHandlers.some(handler => isEventHandled(event, handler));
    if (eventIsHandled) return true;
    return isEventHandled(event, propsHandler);
  };
};

/**
 * Return if `element`, `text`, `nodeKey` is defined.
 * Return if `node.type` is not in `validTypes` (if defined).
 * Return if `value = node[nodeKey]` is not in `validNodeValues` (if defined).
 * If `classNames[value]` is defined, override `className` with it.
 * If `styleKey` is defined, override `style` with `[styleKey]: value`.
 */
const pluginInjectProps = (editor, {
  key,
  inject: {
    props
  }
}, nodeProps) => {
  var _transformNodeValue;

  const {
    element,
    text,
    className,
    style
  } = nodeProps;
  const node = element !== null && element !== void 0 ? element : text;
  if (!node) return;
  if (!props) return;
  const {
    nodeKey = key,
    styleKey = nodeKey,
    validTypes,
    classNames,
    transformClassName,
    transformNodeValue,
    transformStyle,
    validNodeValues,
    defaultNodeValue
  } = props;

  if (validTypes && isElement(node) && node.type && !validTypes.includes(node.type)) {
    return;
  }

  const nodeValue = node[nodeKey]; // early return if there is now reason to add styles

  if (!nodeValue || validNodeValues && !validNodeValues.includes(nodeValue) || nodeValue === defaultNodeValue) {
    return;
  }

  const res = {};
  const transformOptions = { ...nodeProps,
    nodeValue
  };
  const value = (_transformNodeValue = transformNodeValue === null || transformNodeValue === void 0 ? void 0 : transformNodeValue(transformOptions)) !== null && _transformNodeValue !== void 0 ? _transformNodeValue : nodeValue;

  if (element) {
    res.className = clsx__default["default"](className, `slate-${nodeKey}-${nodeValue}`);
  }

  if (classNames !== null && classNames !== void 0 && classNames[nodeValue] || transformClassName) {
    var _transformClassName;

    res.className = (_transformClassName = transformClassName === null || transformClassName === void 0 ? void 0 : transformClassName(transformOptions)) !== null && _transformClassName !== void 0 ? _transformClassName : clsx__default["default"](className, classNames === null || classNames === void 0 ? void 0 : classNames[value]);
  }

  if (styleKey) {
    var _transformStyle;

    res.style = (_transformStyle = transformStyle === null || transformStyle === void 0 ? void 0 : transformStyle(transformOptions)) !== null && _transformStyle !== void 0 ? _transformStyle : { ...style,
      [styleKey]: value
    };
  }

  return res;
};

/**
 * Inject plugin props, editor.
 */

const pipeInjectProps = (editor, nodeProps) => {
  editor.plugins.forEach(plugin => {
    if (plugin.inject.props) {
      const props = pluginInjectProps(editor, plugin, nodeProps);

      if (props) {
        nodeProps = { ...nodeProps,
          ...props
        };
      }
    }
  });
  return { ...nodeProps,
    editor
  };
};

const pipeOnChange = editor => {
  const onChanges = editor.plugins.flatMap(plugin => {
    var _plugin$handlers$onCh, _plugin$handlers, _plugin$handlers$onCh2;

    return (_plugin$handlers$onCh = (_plugin$handlers = plugin.handlers) === null || _plugin$handlers === void 0 ? void 0 : (_plugin$handlers$onCh2 = _plugin$handlers.onChange) === null || _plugin$handlers$onCh2 === void 0 ? void 0 : _plugin$handlers$onCh2.call(_plugin$handlers, editor, plugin)) !== null && _plugin$handlers$onCh !== void 0 ? _plugin$handlers$onCh : [];
  });
  return nodes => {
    return onChanges.some(handler => {
      if (!handler) {
        return false;
      } // The custom event handler may return a boolean to specify whether the event
      // shall be treated as being handled or not.


      const shouldTreatEventAsHandled = handler(nodes);

      if (shouldTreatEventAsHandled != null) {
        return shouldTreatEventAsHandled;
      }

      return false;
    });
  };
};

/**
 * Get a `Editable.renderElement` handler for `options.type`.
 * If the type is equals to the slate element type, render `options.component`.
 * Else, return `undefined` so the pipeline can check the next plugin.
 */

const pluginRenderElement = (editor, {
  key,
  type,
  component: _component,
  props
}) => nodeProps => {
  const {
    element,
    children: _children
  } = nodeProps;

  if (element.type === type) {
    const Element = _component !== null && _component !== void 0 ? _component : slateReact.DefaultElement;
    const injectAboveComponents = editor.plugins.flatMap(o => {
      var _o$inject$aboveCompon, _o$inject;

      return (_o$inject$aboveCompon = (_o$inject = o.inject) === null || _o$inject === void 0 ? void 0 : _o$inject.aboveComponent) !== null && _o$inject$aboveCompon !== void 0 ? _o$inject$aboveCompon : [];
    });
    const injectBelowComponents = editor.plugins.flatMap(o => {
      var _o$inject$belowCompon, _o$inject2;

      return (_o$inject$belowCompon = (_o$inject2 = o.inject) === null || _o$inject2 === void 0 ? void 0 : _o$inject2.belowComponent) !== null && _o$inject$belowCompon !== void 0 ? _o$inject$belowCompon : [];
    });
    nodeProps = getRenderNodeProps({
      attributes: element.attributes,
      nodeProps: nodeProps,
      props,
      type: type
    });
    let children = _children;
    injectBelowComponents.forEach(withHOC => {
      const hoc = withHOC({ ...nodeProps,
        key
      });

      if (hoc) {
        children = hoc({ ...nodeProps,
          children
        });
      }
    });
    let component = /*#__PURE__*/React__default["default"].createElement(Element, nodeProps, children);
    injectAboveComponents.forEach(withHOC => {
      const hoc = withHOC({ ...nodeProps,
        key
      });

      if (hoc) {
        component = hoc({ ...nodeProps,
          children: component
        });
      }
    });
    return /*#__PURE__*/React__default["default"].createElement(ElementProvider, {
      element: element,
      scope: key
    }, component);
  }
};

/**
 * @see {@link RenderElement}
 */

const pipeRenderElement = (editor, renderElementProp) => {
  const renderElements = [];
  editor.plugins.forEach(plugin => {
    if (plugin.isElement) {
      renderElements.push(pluginRenderElement(editor, plugin));
    }
  });
  return nodeProps => {
    const props = pipeInjectProps(editor, nodeProps);
    let element;
    renderElements.some(renderElement => {
      element = renderElement(props);
      return !!element;
    });
    if (element) return element;

    if (renderElementProp) {
      return renderElementProp(props);
    }

    return /*#__PURE__*/React__default["default"].createElement(slateReact.DefaultElement, props);
  };
};

const DefaultLeaf = ({
  attributes,
  children,
  text,
  leaf,
  editor,
  nodeProps,
  ...props
}) => /*#__PURE__*/React__default["default"].createElement("span", _extends({}, attributes, props), children);

/**
 * Get a `Editable.renderLeaf` handler for `options.type`.
 * If the type is equals to the slate leaf type, render `options.component`.
 * Else, return `children`.
 */

const pluginRenderLeaf = (editor, {
  key,
  type = key,
  component,
  props
}) => nodeProps => {
  const {
    leaf,
    children
  } = nodeProps;

  if (leaf[type]) {
    const Leaf = component !== null && component !== void 0 ? component : DefaultLeaf;
    nodeProps = getRenderNodeProps({
      attributes: leaf.attributes,
      props,
      nodeProps: nodeProps,
      type
    });
    return /*#__PURE__*/React__default["default"].createElement(Leaf, nodeProps, children);
  }

  return children;
};

/**
 * @see {@link RenderLeaf}
 */

const pipeRenderLeaf = (editor, renderLeafProp) => {
  const renderLeafs = [];
  editor.plugins.forEach(plugin => {
    if (plugin.isLeaf && plugin.key) {
      renderLeafs.push(pluginRenderLeaf(editor, plugin));
    }
  });
  return nodeProps => {
    const props = pipeInjectProps(editor, nodeProps);
    renderLeafs.forEach(renderLeaf => {
      const newChildren = renderLeaf(props);

      if (newChildren !== undefined) {
        props.children = newChildren;
      }
    });

    if (renderLeafProp) {
      return renderLeafProp(props);
    }

    return /*#__PURE__*/React__default["default"].createElement(DefaultLeaf, props);
  };
};

/**
 * @see https://github.com/radix-ui/primitives/blob/b324ec2d7ddf13a2a115cb5b11478e24d2f45b87/packages/core/primitive/src/primitive.tsx#L1
 */
const composeEventHandlers = (originalEventHandler, ourEventHandler, {
  checkForDefaultPrevented = true
} = {}) => event => {
  originalEventHandler === null || originalEventHandler === void 0 ? void 0 : originalEventHandler(event);

  if (checkForDefaultPrevented === false || !event.defaultPrevented) {
    return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
  }
};

/**
 * Creates a type-safe component with the `as` prop and `React.forwardRef`.
 * Also supports `asChild` prop.
 *
 * @see https://www.radix-ui.com/docs/primitives/overview/styling#changing-the-rendered-element
 * @see https://github.com/ariakit/ariakit/blob/ddd19e97a07a21e4d5fc93719d1fdc5bdab697f7/packages/ariakit-utils/src/system.tsx#L33
 *
 * @example
 * import { createComponent } from "ariakit-utils/system";
 *
 * type Props = {
 *   as?: "div";
 *   customProp?: boolean;
 * };
 *
 * const Component = createComponent<Props>(({ customProp, ...props }) => {
 *   return <div {...props} />;
 * });
 *
 * <Component as="button" customProp />
 */
const createComponentAs = render => {
  const Role = ({
    asChild,
    ...props
  }, ref) => {
    const Comp = asChild ? reactSlot.Slot : render;
    return Comp({
      ref,
      ...props
    });
  };

  return /*#__PURE__*/React.forwardRef(Role);
};

const isRenderProp = children => typeof children === 'function';
/**
 * Creates a React element that supports the `as` prop, children as a
 * function (render props) and a `wrapElement` function.
 *
 * @see https://github.com/ariakit/ariakit/blob/ddd19e97a07a21e4d5fc93719d1fdc5bdab697f7/packages/ariakit-utils/src/system.tsx#L57
 *
 * @example
 * import { createElement } from "ariakit-utils/system";
 *
 * function Component() {
 *   const props = {
 *     as: "button" as const,
 *     children: (htmlProps) => <button {...htmlProps} />,
 *     wrapElement: (element) => <div>{element}</div>,
 *   };
 *   return createElement("div", props);
 * }
 */


const createElementAs = (Type, props) => {
  const {
    as: As,
    wrapElement,
    ...rest
  } = props;
  let element;

  if (As && typeof As !== 'string') {
    element = /*#__PURE__*/React__default["default"].createElement(As, rest);
  } else if (isRenderProp(props.children)) {
    const {
      children,
      ...otherProps
    } = rest;
    element = props.children(otherProps);
  } else if (As) {
    element = /*#__PURE__*/React__default["default"].createElement(As, rest);
  } else {
    element = /*#__PURE__*/React__default["default"].createElement(Type, rest);
  }

  if (wrapElement) {
    return wrapElement(element);
  }

  return element;
};

const createNodeHOC = HOC => (Component, props) => childrenProps => /*#__PURE__*/React__default["default"].createElement(HOC, _extends({}, childrenProps, props), /*#__PURE__*/React__default["default"].createElement(Component, childrenProps));

const createHOC = withHOC => {
  return (components, options) => {
    const _components = { ...components
    };
    const optionsByKey = {};

    const optionsList = castArray_1(options);

    optionsList.forEach(({
      key,
      keys,
      ...opt
    }) => {
      const _keys = key ? [key] : keys !== null && keys !== void 0 ? keys : Object.keys(_components);

      _keys.forEach(_key => {
        optionsByKey[_key] = { ...optionsByKey[_key],
          ...opt
        };
      });
    });
    Object.keys(optionsByKey).forEach(key => {
      if (!_components[key]) return;
      _components[key] = withHOC(_components[key], optionsByKey[key]);
    });
    return _components;
  };
};
/**
 * Create components HOC by plugin key.
 */


const createNodesHOC = HOC => {
  return createHOC(createNodeHOC(HOC));
};
/**
 * Create components HOC by plugin key with a custom HOC.
 */

const createNodesWithHOC = withHOC => {
  return createHOC(withHOC);
};

/**
 * Prevent default and call a handler if defined
 */
const getPreventDefaultHandler = (cb, ...args) => event => {
  event.preventDefault();
  cb === null || cb === void 0 ? void 0 : cb(...args);
};

const withHOC = (HOC, Component, hocProps) => props => /*#__PURE__*/React__default["default"].createElement(HOC, hocProps, /*#__PURE__*/React__default["default"].createElement(Component, props));

/**
 * HOC adding props.
 */

const withProps = (Component, props) => _props => /*#__PURE__*/React__default["default"].createElement(Component, _extends({}, _props, props));

/**
 * Wrap a component into multiple providers.
 * If there are any props that you want a provider to receive,
 * you can simply pass an array.
 */

const withProviders = (...providers) => WrappedComponent => props => providers.reduceRight((acc, prov) => {
  let Provider = prov;

  if (Array.isArray(prov)) {
    [Provider] = prov;
    return /*#__PURE__*/React__default["default"].createElement(Provider, prov[1], acc);
  }

  return /*#__PURE__*/React__default["default"].createElement(Provider, null, acc);
}, /*#__PURE__*/React__default["default"].createElement(WrappedComponent, props));

const createDocumentNode = (type = 'p', text = '', remaining = []) => [{
  children: [{
    type,
    children: [{
      text
    }]
  }, ...remaining]
}];

const createNode = (type = 'p', text = '') => ({
  type,
  children: [{
    text
  }]
});

const {
  elementStore,
  useElementStore
} = createAtomStore({
  element: null
}, {
  name: 'element'
});
const useElement = pluginKey => {
  const value = useElementStore().get.element(pluginKey);
  if (!value) throw new Error(`The \`useElement(pluginKey)\` hook must be used inside the node component's context`);
  return value;
};
const ElementProviderChild = ({
  element,
  scope,
  children
}) => {
  const setElement = useElementStore().set.element(scope);
  React.useEffect(() => {
    setElement(element);
  }, [element, setElement]);
  return children;
};
const ElementProvider = ({
  element,
  scope,
  children,
  ...props
}) => /*#__PURE__*/React__default["default"].createElement(JotaiProvider, _extends({
  initialValues: [[elementStore.atom.element, element]],
  scope: scope
}, props), /*#__PURE__*/React__default["default"].createElement(ElementProviderChild, {
  element: element,
  scope: scope
}, children));

const Box = createComponentAs(props => createElementAs('div', props));

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

var last_1 = last;

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

var _baseSlice = baseSlice;

/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */
function parent(object, path) {
  return path.length < 2 ? object : _baseGet(object, _baseSlice(path, 0, -1));
}

var _parent = parent;

/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */
function baseUnset(object, path) {
  path = _castPath(path, object);
  object = _parent(object, path);
  return object == null || delete object[_toKey(last_1(path))];
}

var _baseUnset = baseUnset;

/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */
function customOmitClone(value) {
  return isPlainObject_1(value) ? undefined : value;
}

var _customOmitClone = customOmitClone;

/** Built-in value references. */
var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray_1(value) || isArguments_1(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

var _isFlattenable = isFlattenable;

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = _isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        _arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

var _baseFlatten = baseFlatten;

/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */
function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? _baseFlatten(array, 1) : [];
}

var flatten_1 = flatten;

/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */
function flatRest(func) {
  return _setToString(_overRest(func, undefined, flatten_1), func + '');
}

var _flatRest = flatRest;

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */
var omit = _flatRest(function(object, paths) {
  var result = {};
  if (object == null) {
    return result;
  }
  var isDeep = false;
  paths = _arrayMap(paths, function(path) {
    path = _castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  _copyObject(object, _getAllKeysIn(object), result);
  if (isDeep) {
    result = _baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, _customOmitClone);
  }
  var length = paths.length;
  while (length--) {
    _baseUnset(result, paths[length]);
  }
  return result;
});

var omit_1 = omit;

const useEditableProps = ({
  id = 'main'
}) => {
  const editor = usePlateEditorRef(id);
  const keyPlugins = usePlateSelectors(id).keyPlugins();
  const keyDecorate = usePlateSelectors(id).keyDecorate();
  const editableProps = usePlateSelectors(id).editableProps();
  const storeDecorate = usePlateSelectors(id).decorate();
  const storeRenderLeaf = usePlateSelectors(id).renderLeaf();
  const storeRenderElement = usePlateSelectors(id).renderElement();
  const isValid = editor && !!keyPlugins;
  const decorateMemo = React.useMemo(() => {
    if (!isValid) return;
    return pipeDecorate(editor, storeDecorate !== null && storeDecorate !== void 0 ? storeDecorate : editableProps === null || editableProps === void 0 ? void 0 : editableProps.decorate);
  }, [editableProps === null || editableProps === void 0 ? void 0 : editableProps.decorate, editor, isValid, storeDecorate]);
  const decorate = React.useMemo(() => {
    if (!keyDecorate || !decorateMemo) return;
    return entry => decorateMemo(entry);
  }, [decorateMemo, keyDecorate]);
  const renderElement = React.useMemo(() => {
    if (!isValid) return;
    return pipeRenderElement(editor, storeRenderElement !== null && storeRenderElement !== void 0 ? storeRenderElement : editableProps === null || editableProps === void 0 ? void 0 : editableProps.renderElement);
  }, [editableProps === null || editableProps === void 0 ? void 0 : editableProps.renderElement, editor, isValid, storeRenderElement]);
  const renderLeaf = React.useMemo(() => {
    if (!isValid) return;
    return pipeRenderLeaf(editor, storeRenderLeaf !== null && storeRenderLeaf !== void 0 ? storeRenderLeaf : editableProps === null || editableProps === void 0 ? void 0 : editableProps.renderLeaf);
  }, [editableProps === null || editableProps === void 0 ? void 0 : editableProps.renderLeaf, editor, isValid, storeRenderLeaf]);
  const props = useDeepCompare.useDeepCompareMemo(() => {
    if (!isValid) return {};
    const _props = {
      decorate,
      renderElement,
      renderLeaf
    };
    DOM_HANDLERS.forEach(handlerKey => {
      const handler = pipeHandler(editor, {
        editableProps,
        handlerKey
      });

      if (handler) {
        _props[handlerKey] = handler;
      }
    });
    return _props;
  }, [decorate, editableProps, isValid, renderElement, renderLeaf]);
  return useDeepCompare.useDeepCompareMemo(() => ({ ...omit_1(editableProps, [...DOM_HANDLERS, 'renderElement', 'renderLeaf']),
    ...props
  }), [editableProps, props]);
};

const usePlateStoreEffects = ({
  id,
  value: valueProp,
  enabled: enabledProp = true,
  onChange,
  editableProps,
  plugins,
  decorate,
  renderElement,
  renderLeaf
}) => {
  const plateActions = getPlateActions(id); // Store Slate.value

  React.useEffect(() => {
    if (!isUndefined(valueProp)) {
      valueProp && plateActions.value(valueProp);
    }
  }, [valueProp, plateActions]); // Store enabled

  React.useEffect(() => {
    if (!isUndefined(enabledProp)) {
      plateActions.enabled(enabledProp);
    }
  }, [enabledProp, plateActions]); // Store onChange

  React.useEffect(() => {
    if (!isUndefined(onChange)) {
      plateActions.onChange(onChange);
    }
  }, [onChange, plateActions]); // Store editableProps

  useDeepCompare.useDeepCompareEffect(() => {
    if (!isUndefined(editableProps)) {
      plateActions.editableProps(editableProps);
    }
  }, [editableProps, plateActions]); // Store decorate

  React.useEffect(() => {
    if (!isUndefined(decorate)) {
      plateActions.decorate(decorate);
    }
  }, [decorate, plateActions]); // Store plugins

  React.useEffect(() => {
    if (!isUndefined(renderElement)) {
      plateActions.renderElement(renderElement);
    }
  }, [renderElement, plateActions]); // Store plugins

  React.useEffect(() => {
    if (!isUndefined(renderLeaf)) {
      plateActions.renderLeaf(renderLeaf);
    }
  }, [renderLeaf, plateActions]); // Store plugins

  React.useEffect(() => {
    if (!isUndefined(plugins)) {
      plateActions.plugins(plugins);
    }
  }, [plugins, plateActions]);
};

/**
 * Effects to update the plate store from the options.
 * Dynamically updating the options will update the store state.
 */

const usePlateEffects = ({
  id = 'main',
  editor: editorProp,
  initialValue,
  normalizeInitialValue: normalizeInitialValueProp,
  plugins: pluginsProp,
  disableCorePlugins,
  editableProps,
  onChange,
  value: valueProp,
  enabled: enabledProp
}) => {
  const editor = usePlateEditorRef(id);
  const enabled = usePlateSelectors(id).enabled();
  const plugins = usePlateSelectors(id).plugins();
  const value = usePlateSelectors(id).value();
  const isReady = usePlateSelectors(id).isReady();
  const prevEditor = React.useRef(editor);
  const prevPlugins = React.useRef(plugins);
  const plateActions = getPlateActions(id); // Set initialValue once

  React.useEffect(() => {
    initialValue && plateActions.value(initialValue); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [plateActions]);
  usePlateStoreEffects({
    editableProps,
    onChange,
    id,
    value: valueProp,
    enabled: enabledProp,
    plugins: pluginsProp
  });
  React.useEffect(() => {
    if (!editor || !value || isReady) return;
    normalizeInitialValue === null || normalizeInitialValue === void 0 ? void 0 : normalizeInitialValue(editor, value);
    plateActions.isReady(true);
  }, [editor, isReady, plateActions, value]); // Unset the editor if enabled gets false

  React.useEffect(() => {
    if (editor && !enabled) {
      plateActions.editor(null);
    }
  }, [enabled, editor, plateActions]); // Set the editor if enabled and editor are defined

  React.useEffect(() => {
    if (!editor && enabled) {
      plateActions.editor(editorProp !== null && editorProp !== void 0 ? editorProp : withPlate(createTEditor(), {
        id,
        plugins: pluginsProp,
        disableCorePlugins
      }));
    }
  }, [editorProp, id, plugins, editor, enabled, disableCorePlugins, plateActions, pluginsProp]); // Dynamic plugins

  React.useEffect(() => {
    if (editor && prevEditor.current === editor && prevPlugins.current !== plugins) {
      setPlatePlugins(editor, {
        plugins,
        disableCorePlugins
      });
      prevPlugins.current = plugins;
    }
  }, [plugins, editor, disableCorePlugins]); // Force editor normalization

  React.useEffect(() => {
    if (editor && normalizeInitialValueProp && isReady) {
      normalizeEditor(editor, {
        force: true
      });
    }
  }, [editor, isReady, normalizeInitialValueProp]);
  React.useEffect(() => {
    prevEditor.current = editor;
  }, [editor]);
};

/**
 * Get Slate props stored in a global store.
 */

const useSlateProps = ({
  id
} = {}) => {
  const editor = usePlateEditorRef(id);
  const keyPlugins = usePlateSelectors(id).keyPlugins();
  const value = usePlateSelectors(id).value();
  const isReady = usePlateSelectors(id).isReady();
  const onChangeProp = usePlateSelectors(id).onChange();
  const onChange = React.useCallback(newValue => {
    if (!editor || !keyPlugins) return;
    const eventIsHandled = pipeOnChange(editor)(newValue);

    if (!eventIsHandled) {
      onChangeProp === null || onChangeProp === void 0 ? void 0 : onChangeProp(newValue);
    }

    getPlateActions(id).value(newValue);
  }, [onChangeProp, editor, id, keyPlugins]);
  return React.useMemo(() => {
    if (!editor || !isReady) return {};
    return {
      key: editor.key,
      editor,
      onChange,
      value
    };
  }, [editor, isReady, onChange, value]);
};

/**
 * Run `usePlateEffects` and props getter for `Slate` and `Editable` components.
 * Use `usePlateStore` to select store state.
 */

const usePlate = options => {
  const {
    id
  } = options;
  usePlateEffects(options);
  return {
    slateProps: useSlateProps({
      id
    }),
    editableProps: useEditableProps({
      id
    })
  };
};

/**
 * {@link Editable} with plugins support.
 */
const EditablePlugins = props => {
  const {
    editableProps
  } = usePlate(props);
  return /*#__PURE__*/React__default["default"].createElement(slateReact.Editable, editableProps);
};

/**
 * Typed {@link useSlateStatic} & PlateEditor.
 * Needs to be called in a child component of `Plate`.
 * Else, use `usePlateEditorRef`.
 */
const useEditorRef = () => slateReact.useSlateStatic();

const EditorRefPluginEffect = ({
  plugin
}) => {
  var _plugin$useHooks;

  const editor = useEditorRef();
  (_plugin$useHooks = plugin.useHooks) === null || _plugin$useHooks === void 0 ? void 0 : _plugin$useHooks.call(plugin, editor, plugin);
  return null;
};
const EditorRefEffect = ({
  id
}) => {
  const editor = useEditorRef();
  usePlateSelectors(id).keyPlugins();
  React.useEffect(() => {
    const plateActions = getPlateActions(editor.id);
    plateActions.isRendered(true);
    return () => {
      plateActions.isRendered(false);
    };
  }, [editor.id]);
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, editor.plugins.map(plugin => /*#__PURE__*/React__default["default"].createElement(EditorRefPluginEffect, {
    key: plugin.key,
    plugin: plugin
  })));
};

/**
 * Typed {@link useSlate} & PlateEditor.
 * Needs to be called in a child component of `Plate`.
 * Else, use `usePlateEditorState`.
 */
const useEditorState = () => slateReact.useSlate();

const EditorStateEffect = /*#__PURE__*/React.memo(({
  id
}) => {
  const editorState = useEditorState();
  React.useEffect(() => {
    getPlateActions(id).incrementKey('keyEditor');
  });
  React.useEffect(() => {
    getPlateActions(id).incrementKey('keySelection');
  }, [editorState.selection, id]);
  return null;
});

/**
 * On mount: create plate store and set it to the plates store.
 * If id is not defined, event id is used.
 */

const usePlatesStoreEffect = (id, props) => {
  React.useEffect(() => {
    if (!platesSelectors.has(id)) {
      platesActions.set(id, props);
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [id]);
};

const PlateContent = ({
  children,
  renderEditable,
  editableRef,
  firstChildren,
  ...options
}) => {
  const {
    slateProps,
    editableProps
  } = usePlate(options);
  if (!slateProps.editor) return null;
  const editable = /*#__PURE__*/React__default["default"].createElement(slateReact.Editable, _extends({
    ref: editableRef
  }, editableProps));
  return /*#__PURE__*/React__default["default"].createElement(slateReact.Slate, slateProps, firstChildren, renderEditable ? renderEditable(editable) : editable, /*#__PURE__*/React__default["default"].createElement(EditorStateEffect, {
    id: options.id
  }), /*#__PURE__*/React__default["default"].createElement(EditorRefEffect, {
    id: options.id
  }), children);
};
const Plate = props => {
  const {
    id = 'main',
    scope = SCOPE_PLATE,
    ...state
  } = props;
  const hasId = usePlatesSelectors.has(id); // Clear the state on unmount.

  React.useEffect(() => () => {
    platesActions.unset(id);
  }, [id]); // Set initial state on mount

  usePlatesStoreEffect(id, state);
  if (!hasId) return null;
  return /*#__PURE__*/React__default["default"].createElement(JotaiProvider, {
    initialValues: [[plateIdAtom, id]],
    scope: scope
  }, /*#__PURE__*/React__default["default"].createElement(PlateContent, props));
};

const PlateProvider = ({
  id = 'main',
  children,
  scope = SCOPE_PLATE
}) => {
  const hasId = usePlatesSelectors.has(id);
  usePlatesStoreEffect(id);
  if (!hasId) return null;
  return /*#__PURE__*/React__default["default"].createElement(JotaiProvider, {
    key: id,
    initialValues: [[plateIdAtom, id]],
    scope: scope
  }, children);
};
const withPlateProvider = (Component, hocProps) => withHOC(PlateProvider, Component, hocProps);

const PlateEventProvider = ({
  id,
  children,
  scope
}) => {
  id = useEventPlateId(id, scope);
  return /*#__PURE__*/React__default["default"].createElement(PlateProvider, {
    id: id,
    scope: scope
  }, children);
};
const withPlateEventProvider = (Component, hocProps) => withHOC(PlateEventProvider, Component, hocProps);

const PlateTest = ({
  variant = 'wordProcessor',
  editableProps,
  normalizeInitialValue,
  ...props
}) => {
  const {
    editor: _editor,
    id,
    plugins
  } = props;
  let editor = _editor;

  if (editor && !editor.plugins) {
    editor = createPlateEditor({
      editor,
      plugins,
      id,
      normalizeInitialValue
    });
  }

  return /*#__PURE__*/React__default["default"].createElement(Plate, _extends({}, props, {
    editor: editor,
    editableProps: {
      'data-variant': variant,
      'data-testid': 'slate-content-editable',
      autoFocus: true,
      ...editableProps
    }
  }));
};

/**
 * Set a given ref to a given value
 * This utility takes care of different types of refs: callback refs and RefObject(s)
 */
const setRef = (ref, value) => {
  if (typeof ref === 'function') {
    ref(value);
  } else if (ref !== null && ref !== undefined) {
    ref.current = value;
  }
};
/**
 * A utility to compose multiple refs together
 * Accepts callback refs and RefObject(s)
 */


const composeRefs = (...refs) => node => refs.forEach(ref => setRef(ref, node));
/**
 * A custom hook that composes multiple refs
 * Accepts callback refs and RefObject(s)
 */

const useComposedRef = (...refs) => {
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return React.useCallback(composeRefs(...refs), refs);
};

/**
 * Returns props with an additional `wrapElement` prop.
 * @see https://github.com/ariakit/ariakit/blob/3c74257c9e/packages/ariakit-utils/src/hooks.ts
 */
const useWrapElement = (props, callback, deps = []) => {
  const wrapElement = React.useCallback(element => {
    if (props.wrapElement) {
      element = props.wrapElement(element);
    }

    return callback(element);
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [...deps, props.wrapElement]);
  return { ...props,
    wrapElement
  };
};

/**
 * Set new properties on the nodes at a location.
 */
const setNodes = (editor, props, options) => slate.Transforms.setNodes(editor, props, options);

const setElements = (editor, props, options) => setNodes(editor, props, options);

/**
 * Toggle the type of the selected node.
 * Don't do anything if activeType === inactiveType.
 */
const toggleNodeType = (editor, options, editorNodesOptions) => {
  const {
    activeType,
    inactiveType = getPluginType(editor, ELEMENT_DEFAULT)
  } = options;
  if (!activeType || !editor.selection) return;
  const isActive = someNode(editor, { ...editorNodesOptions,
    match: {
      type: activeType
    }
  });
  if (isActive && activeType === inactiveType) return;
  setElements(editor, {
    type: isActive ? inactiveType : activeType
  });
};

const onKeyDownToggleElement = (editor, {
  type,
  options: {
    hotkey
  }
}) => e => {
  const defaultType = getPluginType(editor, ELEMENT_DEFAULT);
  if (!hotkey) return;

  const hotkeys = castArray_1(hotkey);

  for (const _hotkey of hotkeys) {
    if (isHotkey(_hotkey, e)) {
      e.preventDefault();
      toggleNodeType(editor, {
        activeType: type,
        inactiveType: defaultType
      });
      return;
    }
  }
};

/**
 * Unset properties on the nodes at a location.
 */
const unsetNodes = (editor, props, options) => {
  return slate.Transforms.unsetNodes(editor, props, options);
};

/**
 * Remove mark and trigger `onChange` if collapsed selection.
 */
const removeMark = (editor, {
  key,
  at,
  shouldChange = true,
  ...rest
}) => {
  const selection = at !== null && at !== void 0 ? at : editor.selection;
  key = castArray_1(key);

  if (selection) {
    if (slate.Range.isRange(selection) && slate.Range.isExpanded(selection)) {
      unsetNodes(editor, key, {
        at: selection,
        match: isText,
        split: true,
        ...rest
      });
    } else if (editor.selection) {
      const marks = { ...(getMarks(editor) || {})
      };
      key.forEach(k => {
        delete marks[k];
      });
      editor.marks = marks;
      shouldChange && editor.onChange();
    }
  }
};

/**
 * Add/remove marks in the selection.
 * @param editor
 * @param key mark to toggle
 * @param clear marks to clear when adding mark
 */
const toggleMark = (editor, {
  key,
  clear
}) => {
  if (!editor.selection) return;
  withoutNormalizing(editor, () => {
    const isActive = isMarkActive(editor, key);

    if (isActive) {
      removeMark(editor, {
        key
      });
      return;
    }

    if (clear) {
      const clears = castArray_1(clear);
      removeMark(editor, {
        key: clears
      });
    }

    editor.addMark(key, true);
  });
};

const onKeyDownToggleMark = (editor, {
  type,
  options: {
    hotkey,
    clear
  }
}) => e => {
  if (!hotkey) return;

  if (isHotkey(hotkey, e)) {
    e.preventDefault();
    toggleMark(editor, {
      key: type,
      clear
    });
  }
};

const CARRIAGE_RETURN = '\u000D';
const LINE_FEED = '\u000A';
const NO_BREAK_SPACE = '\u00A0';
const SPACE = '\u0020';
const TAB = '\u0009';
const ZERO_WIDTH_SPACE = '\u200B';

/**
 * Depth-first pre-order tree traverse the given HTML node and calls the given callback for each node.
 * see: https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR)
 *
 * @param callback returns a boolean indicating whether traversal should be continued
 */
const traverseHtmlNode = (node, callback) => {
  const keepTraversing = callback(node);

  if (!keepTraversing) {
    return;
  }

  let child = node.firstChild;

  while (child) {
    const currentChild = child;
    const previousChild = child.previousSibling;
    child = child.nextSibling;
    traverseHtmlNode(currentChild, callback);

    if ( // An unwrap was made. Need to compute the next child again.
    !currentChild.previousSibling && !currentChild.nextSibling && !currentChild.parentNode && child && previousChild !== child.previousSibling && child.parentNode) {
      if (previousChild) {
        child = previousChild.nextSibling;
      } else {
        child = node.firstChild;
      }
    } else if ( // A list was created. Need to compute the next child again.
    !currentChild.previousSibling && !currentChild.nextSibling && !currentChild.parentNode && child && !child.previousSibling && !child.nextSibling && !child.parentNode) {
      if (previousChild) {
        if (previousChild.nextSibling) {
          child = previousChild.nextSibling.nextSibling;
        } else {
          child = null;
        }
      } else if (node.firstChild) {
        child = node.firstChild.nextSibling;
      }
    }
  }
};

/**
 * Traverse the HTML elements of the given HTML node.
 * @param rootNode The root HTML node to traverse.
 * @param callback The callback to call for each HTML element.
 */
const traverseHtmlElements = (rootNode, callback) => {
  traverseHtmlNode(rootNode, node => {
    if (!isHtmlElement(node)) {
      return true;
    }

    return callback(node);
  });
};

/**
 * Replace BR elements with line feeds.
 */

const cleanHtmlBrElements = rootNode => {
  traverseHtmlElements(rootNode, element => {
    if (element.tagName !== 'BR') {
      return true;
    }

    const replacementTextNode = document.createTextNode(LINE_FEED);

    if (element.parentElement) {
      element.parentElement.replaceChild(replacementTextNode, element);
    }

    return false;
  });
};

/**
 * Replace \r\n and \r with \n
 */
const cleanHtmlCrLf = html => {
  return html.replace(/(\r\n|\r)/gm, '\n');
};

const ALLOWED_EMPTY_ELEMENTS = ['BR', 'IMG'];

const isEmpty = element => {
  return !ALLOWED_EMPTY_ELEMENTS.includes(element.nodeName) && !element.innerHTML.trim();
};

const removeIfEmpty = element => {
  if (isEmpty(element)) {
    const {
      parentElement
    } = element;
    element.remove();

    if (parentElement) {
      removeIfEmpty(parentElement);
    }
  }
};
/**
 * Remove empty elements from rootNode.
 * Allowed empty elements: BR, IMG.
 */


const cleanHtmlEmptyElements = rootNode => {
  traverseHtmlElements(rootNode, element => {
    removeIfEmpty(element);
    return true;
  });
};

/**
 * Replace `element` tag name by `tagName`.
 * Attributes, innerHTML and parent relationship is kept.
 */
const replaceTagName = (element, tagName) => {
  const newElement = document.createElement(tagName);
  newElement.innerHTML = element.innerHTML;

  for (const {
    name
  } of element.attributes) {
    const value = element.getAttribute(name);

    if (value) {
      newElement.setAttribute(name, value);
    }
  }

  if (element.parentNode) {
    element.parentNode.replaceChild(newElement, element);
  }

  return newElement;
};

/**
 * Replace FONT elements with SPAN elements if there is textContent (remove otherwise).
 */

const cleanHtmlFontElements = rootNode => {
  traverseHtmlElements(rootNode, element => {
    if (element.tagName === 'FONT') {
      if (element.textContent) {
        replaceTagName(element, 'span');
      } else {
        element.remove();
      }
    }

    return true;
  });
};

/**
 * If href starts with '#'.
 */
const isHtmlFragmentHref = href => href.startsWith('#');

/**
 * Unwrap the given HTML element.
 */
const unwrapHtmlElement = element => {
  element.outerHTML = element.innerHTML;
};

/**
 * Remove fragment hrefs and spans without inner text.
 */

const cleanHtmlLinkElements = rootNode => {
  traverseHtmlElements(rootNode, element => {
    if (element.tagName !== 'A') {
      return true;
    }

    const href = element.getAttribute('href');

    if (!href || isHtmlFragmentHref(href)) {
      unwrapHtmlElement(element);
    }

    if (href && element.querySelector('img')) {
      for (const span of element.querySelectorAll('span')) {
        if (!span.innerText) {
          unwrapHtmlElement(span);
        }
      }
    }

    return true;
  });
};

const traverseHtmlTexts = (rootNode, callback) => {
  traverseHtmlNode(rootNode, node => {
    if (!isHtmlText(node)) {
      return true;
    }

    return callback(node);
  });
};

const cleanHtmlTextNodes = rootNode => {
  traverseHtmlTexts(rootNode, textNode => {
    if (/^\n\s*$/.test(textNode.data) && (textNode.previousElementSibling || textNode.nextElementSibling)) {
      textNode.remove();
      return true;
    }

    textNode.data = textNode.data.replace(/\n\s*/g, '\n');

    if (textNode.data.includes(CARRIAGE_RETURN) || textNode.data.includes(LINE_FEED) || textNode.data.includes(NO_BREAK_SPACE)) {
      const hasSpace = textNode.data.includes(SPACE);
      const hasNonWhitespace = /\S/.test(textNode.data);
      const hasLineFeed = textNode.data.includes(LINE_FEED);

      if (!(hasSpace || hasNonWhitespace) && !hasLineFeed) {
        if (textNode.data === NO_BREAK_SPACE) {
          textNode.data = SPACE;
          return true;
        }

        textNode.remove();
        return true;
      }

      if (textNode.previousSibling && textNode.previousSibling.nodeName === 'BR' && textNode.parentElement) {
        textNode.parentElement.removeChild(textNode.previousSibling);
        const matches = textNode.data.match(/^[\r\n]+/);
        const offset = matches ? matches[0].length : 0;
        textNode.data = textNode.data.substring(offset).replace(new RegExp(LINE_FEED, 'g'), SPACE).replace(new RegExp(CARRIAGE_RETURN, 'g'), SPACE);
        textNode.data = `\n${textNode.data}`;
      } else {
        textNode.data = textNode.data.replace(new RegExp(LINE_FEED, 'g'), SPACE).replace(new RegExp(CARRIAGE_RETURN, 'g'), SPACE);
      }
    }

    return true;
  });
};

/**
 * Is the element a block element?
 */
const isHtmlBlockElement = element => {
  const blockRegex = /^(address|blockquote|body|center|dir|div|dl|fieldset|form|h[1-6]|hr|isindex|menu|noframes|noscript|ol|p|pre|table|ul|dd|dt|frameset|li|tbody|td|tfoot|th|thead|tr|html)$/i;
  return blockRegex.test(element.nodeName);
};

/**
 * Set HTML blocks mark styles to a new child span element if any.
 * This allows Plate to use block marks.
 */

const copyBlockMarksToSpanChild = rootNode => {
  traverseHtmlElements(rootNode, element => {
    const el = element;
    const styleAttribute = element.getAttribute('style');
    if (!styleAttribute) return true;

    if (isHtmlBlockElement(el)) {
      const {
        style: {
          backgroundColor,
          color,
          fontFamily,
          fontSize,
          fontStyle,
          fontWeight,
          textDecoration
        }
      } = el;

      if (backgroundColor || color || fontFamily || fontSize || fontStyle || fontWeight || textDecoration) {
        const span = document.createElement('span');

        if (!['initial', 'inherit'].includes(color)) {
          span.style.color = color;
        }

        span.style.fontFamily = fontFamily;
        span.style.fontSize = fontSize;

        if (!['normal', 'initial', 'inherit'].includes(color)) {
          span.style.fontStyle = fontStyle;
        }

        if (!['normal', 400].includes(fontWeight)) {
          span.style.fontWeight = fontWeight;
        }

        span.style.textDecoration = textDecoration;
        span.innerHTML = el.innerHTML;
        element.innerHTML = span.outerHTML;
      }
    }

    return true;
  });
};

/**
 * Find the first HTML element that matches the given selector.
 * @param rootNode
 * @param predicate
 */

const findHtmlElement = (rootNode, predicate) => {
  let res = null;
  traverseHtmlElements(rootNode, node => {
    if (predicate(node)) {
      res = node;
      return false;
    }

    return true;
  });
  return res;
};
const someHtmlElement = (rootNode, predicate) => {
  return !!findHtmlElement(rootNode, predicate);
};

const acceptNode = () => NodeFilter.FILTER_ACCEPT;

const getHtmlComments = node => {
  const comments = [];
  const iterator = document.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {
    acceptNode
  });
  let currentNode = iterator.nextNode();

  while (currentNode) {
    if (currentNode.nodeValue) {
      comments.push(currentNode.nodeValue);
    }

    currentNode = iterator.nextNode();
  }

  return comments;
};

const isHtmlComment = node => node.nodeType === Node.COMMENT_NODE;

const isOlSymbol = symbol => {
  return /[0-9a-np-z]\S/g.test(symbol.toLowerCase());
};

const parseHtmlElement = html => {
  const {
    body
  } = parseHtmlDocument(html);
  return body.firstElementChild;
};

/**
 * Trim the html and remove zero width spaces,
 * then wrap it with a body element.
 */

const postCleanHtml = html => {
  const cleanHtml = html.trim().replace(new RegExp(ZERO_WIDTH_SPACE, 'g'), '');
  return `<body>${cleanHtml}</body>`;
};

/**
 * Remove string before <html
 */
const removeBeforeHtml = html => {
  const index = html.indexOf('<html');

  if (index === -1) {
    return html;
  }

  return html.substring(index);
};
/**
 * Remove string after </html>
 */


const removeAfterHtml = html => {
  const index = html.lastIndexOf('</html>');

  if (index === -1) {
    return html;
  }

  return html.substring(0, index + '</html>'.length);
};
/**
 * Remove string before <html and after </html>
 */


const removeHtmlSurroundings = html => {
  return removeBeforeHtml(removeAfterHtml(html));
};

const cleaners = [removeHtmlSurroundings, cleanHtmlCrLf];
/**
 * Remove HTML surroundings and clean HTML from CR/LF
 */

const preCleanHtml = html => {
  return cleaners.reduce((result, clean) => clean(result), html);
};

/**
 * Traverse HTML comments.
 */
const traverseHtmlComments = (rootNode, callback) => {
  traverseHtmlNode(rootNode, node => {
    if (!isHtmlComment(node)) {
      return true;
    }

    return callback(node);
  });
};

/**
 * Removes HTML nodes between HTML comments.
 */

const removeHtmlNodesBetweenComments = (rootNode, start, end) => {
  const isClosingComment = node => isHtmlComment(node) && node.data === end;

  traverseHtmlComments(rootNode, comment => {
    if (comment.data === start) {
      let node = comment.nextSibling;
      comment.remove();

      while (node && !isClosingComment(node)) {
        const {
          nextSibling
        } = node;
        node.remove();
        node = nextSibling;
      }

      if (node && isClosingComment(node)) {
        node.remove();
      }
    }

    return true;
  });
};

/**
 * A helper type for getting the value of an editor.
 */

/**
 * Get editor with typed methods and operations.
 * Note that it can't be used as a parameter of type TEditor.
 */
const getTEditor = editor => editor;

/**
 * Add a custom property to the leaf text nodes in the current selection.
 *
 * If the selection is currently collapsed, the marks will be added to the
 * `editor.marks` property instead, and applied when text is inserted next.
 */
const addMark = (editor, key, value) => slate.Editor.addMark(editor, key, value);

/**
 * Create a mutable ref for a `Path` object, which will stay in sync as new
 * operations are applied to the editor.
 */
const createPathRef = (editor, at, options) => slate.Editor.pathRef(editor, at, options);

/**
 * Create a mutable ref for a `Point` object, which will stay in sync as new
 * operations are applied to the editor.
 */
const createPointRef = (editor, point, options) => slate.Editor.pointRef(editor, point, options);

/**
 * Create a mutable ref for a `Range` object, which will stay in sync as new
 * operations are applied to the editor.
 */
const createRangeRef = (editor, range, options) => slate.Editor.rangeRef(editor, range, options);

/**
 * Delete content in the editor backward from the current selection.
 */
const deleteBackward = (editor, options) => slate.Editor.deleteBackward(editor, options);

/**
 * Delete content in the editor forward from the current selection.
 */
const deleteForward = (editor, options) => slate.Editor.deleteForward(editor, options);

/**
 * Delete the content in the current selection.
 */
const deleteFragment = (editor, options) => slate.Editor.deleteFragment(editor, options);

/**
 * Check if an element is empty, accounting for void nodes.
 */
const isElementEmpty = (editor, element) => slate.Editor.isEmpty(editor, element);

/**
 * Delete content in the editor.
 */
const deleteText = (editor, options) => {
  slate.Transforms.delete(editor, options);
};

/**
 * Move the nodes at a location to a new location.
 */
const moveNodes = (editor, options) => slate.Transforms.moveNodes(editor, options);

/**
 * Remove the nodes at a specific location in the document.
 */
const removeNodes = (editor, options) => slate.Transforms.removeNodes(editor, options);

/**
 * Set the selection to a new value.
 */
const select = (editor, target) => {
  slate.Transforms.select(editor, target);
};

/**
 * Merge a node at a location with the previous node of the same depth,
 * removing any empty containing nodes after the merge if necessary.
 */
const mergeNodes = (editor, options = {}) => {
  withoutNormalizing(editor, () => {
    let {
      match,
      at = editor.selection
    } = options;
    const {
      mergeNode,
      removeEmptyAncestor,
      hanging = false,
      voids = false,
      mode = 'lowest'
    } = options;

    if (!at) {
      return;
    }

    if (match == null) {
      if (slate.Path.isPath(at)) {
        const [parent] = getParentNode(editor, at);

        match = n => parent.children.includes(n);
      } else {
        match = n => isBlock(editor, n);
      }
    }

    if (!hanging && slate.Range.isRange(at)) {
      at = slate.Editor.unhangRange(editor, at);
    }

    if (slate.Range.isRange(at)) {
      if (slate.Range.isCollapsed(at)) {
        at = at.anchor;
      } else {
        const [, end] = slate.Range.edges(at);
        const pointRef = createPointRef(editor, end);
        deleteText(editor, {
          at
        });
        at = pointRef.unref();

        if (options.at == null) {
          select(editor, at);
        }
      }
    }

    const _nodes = getNodeEntries(editor, {
      at,
      match,
      voids,
      mode
    });

    const [current] = Array.from(_nodes);
    const prev = getPreviousNode(editor, {
      at,
      match,
      voids,
      mode
    });

    if (!current || !prev) {
      return;
    }

    const [node, path] = current;
    const [prevNode, prevPath] = prev;

    if (path.length === 0 || prevPath.length === 0) {
      return;
    }

    const newPath = slate.Path.next(prevPath);
    const commonPath = slate.Path.common(path, prevPath);
    const isPreviousSibling = slate.Path.isSibling(path, prevPath);

    const _levels = slate.Editor.levels(editor, {
      at: path
    });

    const levels = Array.from(_levels, ([n]) => n).slice(commonPath.length).slice(0, -1); // Determine if the merge will leave an ancestor of the path empty as a
    // result, in which case we'll want to remove it after merging.

    const emptyAncestor = getAboveNode(editor, {
      at: path,
      mode: 'highest',
      match: n => levels.includes(n) && isElement(n) && hasSingleChild(n)
    });
    const emptyRef = emptyAncestor && createPathRef(editor, emptyAncestor[1]);
    let properties;
    let position; // Ensure that the nodes are equivalent, and figure out what the position
    // and extra properties of the merge will be.

    if (isText(node) && isText(prevNode)) {
      const {
        text,
        ...rest
      } = node;
      position = prevNode.text.length;
      properties = rest;
    } else if (isElement(node) && isElement(prevNode)) {
      const {
        children,
        ...rest
      } = node;
      position = prevNode.children.length;
      properties = rest;
    } else {
      throw new Error(`Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(node)} ${JSON.stringify(prevNode)}`);
    } // If the node isn't already the next sibling of the previous node, move
    // it so that it is before merging.


    if (!isPreviousSibling) {
      // DIFF
      if (!mergeNode) {
        moveNodes(editor, {
          at: path,
          to: newPath,
          voids
        });
      }
    } // If there was going to be an empty ancestor of the node that was merged,
    // we remove it from the tree.


    if (emptyRef) {
      // DIFF: start
      if (!removeEmptyAncestor) {
        removeNodes(editor, {
          at: emptyRef.current,
          voids
        });
      } else {
        const emptyPath = emptyRef.current;
        emptyPath && removeEmptyAncestor(editor, {
          at: emptyPath
        });
      } // DIFF: end

    } // If the target node that we're merging with is empty, remove it instead
    // of merging the two. This is a common rich text editor behavior to
    // prevent losing formatting when deleting entire nodes when you have a
    // hanging selection.
    // DIFF: start


    if (mergeNode) {
      mergeNode(editor, {
        at: path,
        to: newPath
      }); // DIFF: end
    } else if (isElement(prevNode) && isElementEmpty(editor, prevNode) || isText(prevNode) && prevNode.text === '') {
      removeNodes(editor, {
        at: prevPath,
        voids
      });
    } else {
      editor.apply({
        type: 'merge_node',
        path: newPath,
        position,
        properties
      });
    }

    if (emptyRef) {
      emptyRef.unref();
    }
  });
};

/**
 * Get the end point of a location.
 */
const getEndPoint = (editor, at) => slate.Editor.end(editor, at);

/**
 * Get the leaf text node at a location.
 */
const getLeafNode = (editor, at, options) => slate.Editor.leaf(editor, at, options);

const deleteMerge = (editor, options = {}) => {
  withoutNormalizing(editor, () => {
    const {
      reverse = false,
      unit = 'character',
      distance = 1,
      voids = false
    } = options;
    let {
      at = editor.selection,
      hanging = false
    } = options;

    if (!at) {
      return;
    }

    if (slate.Range.isRange(at) && slate.Range.isCollapsed(at)) {
      at = at.anchor;
    }

    if (slate.Point.isPoint(at)) {
      const furthestVoid = getVoidNode(editor, {
        at,
        mode: 'highest'
      });

      if (!voids && furthestVoid) {
        const [, voidPath] = furthestVoid;
        at = voidPath;
      } else {
        const opts = {
          unit,
          distance
        };
        const target = reverse ? getPointBefore(editor, at, opts) || getStartPoint(editor, []) : getPointAfter(editor, at, opts) || getEndPoint(editor, []);
        at = {
          anchor: at,
          focus: target
        };
        hanging = true;
      }
    }

    if (slate.Path.isPath(at)) {
      removeNodes(editor, {
        at,
        voids
      });
      return;
    }

    if (slate.Range.isCollapsed(at)) {
      return;
    }

    if (!hanging) {
      at = slate.Editor.unhangRange(editor, at, {
        voids
      });
    }

    let [start, end] = slate.Range.edges(at);
    const startBlock = getAboveNode(editor, {
      match: n => isBlock(editor, n),
      at: start,
      voids
    });
    const endBlock = getAboveNode(editor, {
      match: n => isBlock(editor, n),
      at: end,
      voids
    });
    const isAcrossBlocks = startBlock && endBlock && !slate.Path.equals(startBlock[1], endBlock[1]);
    const isSingleText = slate.Path.equals(start.path, end.path);
    const startVoid = voids ? null : getVoidNode(editor, {
      at: start,
      mode: 'highest'
    });
    const endVoid = voids ? null : getVoidNode(editor, {
      at: end,
      mode: 'highest'
    }); // If the start or end points are inside an inline void, nudge them out.

    if (startVoid) {
      const before = getPointBefore(editor, start);

      if (before && startBlock && slate.Path.isAncestor(startBlock[1], before.path)) {
        start = before;
      }
    }

    if (endVoid) {
      const after = getPointAfter(editor, end);

      if (after && endBlock && slate.Path.isAncestor(endBlock[1], after.path)) {
        end = after;
      }
    } // Get the highest nodes that are completely inside the range, as well as
    // the start and end nodes.


    const matches = [];
    let lastPath;

    const _nodes = getNodeEntries(editor, {
      at,
      voids
    });

    for (const entry of _nodes) {
      const [node, path] = entry;

      if (lastPath && slate.Path.compare(path, lastPath) === 0) {
        continue;
      }

      if (!voids && isVoid(editor, node) || !slate.Path.isCommon(path, start.path) && !slate.Path.isCommon(path, end.path)) {
        matches.push(entry);
        lastPath = path;
      }
    }

    const pathRefs = Array.from(matches, ([, p]) => createPathRef(editor, p));
    const startRef = createPointRef(editor, start);
    const endRef = createPointRef(editor, end);

    if (!isSingleText && !startVoid) {
      const point = startRef.current;
      const [node] = getLeafNode(editor, point);
      const {
        path
      } = point;
      const {
        offset
      } = start;
      const text = node.text.slice(offset);
      editor.apply({
        type: 'remove_text',
        path,
        offset,
        text
      });
    }

    for (const pathRef of pathRefs) {
      const path = pathRef.unref();
      removeNodes(editor, {
        at: path,
        voids
      });
    }

    if (!endVoid) {
      const point = endRef.current;
      const [node] = getLeafNode(editor, point);
      const {
        path
      } = point;
      const offset = isSingleText ? start.offset : 0;
      const text = node.text.slice(offset, end.offset);
      editor.apply({
        type: 'remove_text',
        path,
        offset,
        text
      });
    }

    if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {
      // DIFF: allow custom mergeNodes
      mergeNodes(editor, {
        at: endRef.current,
        hanging: true,
        voids
      });
    }

    const point = endRef.unref() || startRef.unref();

    if (options.at == null && point) {
      select(editor, point);
    }
  });
};

/**
 * Get the first node at a location.
 */
const getFirstNode = (editor, at) => slate.Editor.first(editor, at);

/**
 * Get the fragment at a location.
 */
const getFragment = (editor, at) => slate.Editor.fragment(editor, at);

/**
 * Iterate through all of the levels at a location.
 */
const getLevels = (editor, options) => slate.Editor.levels(editor, options);

/**
 * Get the matching node in the branch of the document after a location.
 */
const getNextNode = (editor, options) => slate.Editor.next(editor, options);

/**
 * Get the set of currently tracked path refs of the editor.
 */
const getPathRefs = editor => slate.Editor.pathRefs(editor);

/**
 * Get the set of currently tracked point refs of the editor.
 */
const getPointRefs = editor => slate.Editor.pointRefs(editor);

/**
 * Iterate through all of the positions in the document where a `Point` can be
 * placed.
 *
 * By default it will move forward by individual offsets at a time,  but you
 * can pass the `unit: 'character'` option to moved forward one character, word,
 * or line at at time.
 *
 * Note: By default void nodes are treated as a single point and iteration
 * will not happen inside their content unless you pass in true for the
 * voids option, then iteration will occur.
 */
const getPositions = (editor, options) => slate.Editor.positions(editor, options);

/**
 * Get the set of currently tracked range refs of the editor.
 */
const getRangeRefs = editor => slate.Editor.rangeRefs(editor);

/**
 * Check if a node has block children.
 */
const hasBlocks = (editor, element) => slate.Editor.hasBlocks(editor, element);

/**
 * Check if a node has inline and text children.
 */
const hasInlines = (editor, element) => slate.Editor.hasInlines(editor, element);

/**
 * Check if a node has text children.
 */
const hasTexts = (editor, element) => slate.Editor.hasTexts(editor, element);

/**
 * Insert a block break at the current selection.
 *
 * If the selection is currently expanded, it will be deleted first.
 */
const insertBreak = editor => slate.Editor.insertBreak(editor);

/**
 * Insert a node at the current selection.
 *
 * If the selection is currently expanded, it will be deleted first.
 */
const insertNode = (editor, node) => slate.Editor.insertNode(editor, node);

/**
 * Check if a point is an edge of a location.
 */
const isEdgePoint = (editor, point, at) => slate.Editor.isEdge(editor, point, at);

/**
 * Check if a value is an `Editor` object.
 */
const isEditor = value => slate.Editor.isEditor(value);

/**
 * Check if the editor is currently normalizing after each operation.
 */
const isEditorNormalizing = editor => slate.Editor.isNormalizing(editor);

/**
 * Remove a custom property from all of the leaf text nodes in the current
 * selection.
 *
 * If the selection is currently collapsed, the removal will be stored on
 * `editor.marks` and applied to the text inserted next.
 */
const removeEditorMark = (editor, key) => slate.Editor.removeMark(editor, key);

/**
 * Check if an element matches set of properties.
 *
 * Note: this checks custom properties, and it does not ensure that any
 * children are equivalent.
 */
const elementMatches = (element, props) => slate.Element.matches(element, props);

/**
 * Check if a value is an array of `Element` objects.
 */
const isElementList = value => slate.Element.isElementList(value);

/**
 * {@link HistoryEditor.isHistoryEditor}
 */
const isHistoryEditor = value => slateHistory.HistoryEditor.isHistoryEditor(value);

/**
 * {@link HistoryEditor.isMerging}
 */
const isHistoryMerging = editor => slateHistory.HistoryEditor.isMerging(editor);

/**
 * {@link HistoryEditor.isSaving}
 */
const isHistorySaving = editor => slateHistory.HistoryEditor.isSaving(editor);

/**
 * {@link HistoryEditor.withoutMerging}
 */
const withoutMergingHistory = (editor, fn) => slateHistory.HistoryEditor.withoutMerging(editor, fn);

/**
 * {@link HistoryEditor.withoutSaving}
 */
const withoutSavingHistory = (editor, fn) => slateHistory.HistoryEditor.withoutSaving(editor, fn);

const isDescendant = node => isElement(node) || isText(node);

/**
 * Get an entry for the common ancesetor node of two paths.
 */
const getCommonNode = (root, path, another) => slate.Node.common(root, path, another);

/**
 * Get the node at a specific path, asserting that it's an ancestor node.
 */
const getNodeAncestor = (root, path) => slate.Node.ancestor(root, path);

/**
 * Return a generator of all the ancestor nodes above a specific path.
 *
 * By default the order is bottom-up, from lowest to highest ancestor in
 * the tree, but you can pass the `reverse: true` option to go top-down.
 */
const getNodeAncestors = (root, path, options) => slate.Node.ancestors(root, path, options);

/**
 * Get the child of a node at a specific index.
 */
const getNodeChild = (root, index) => slate.Node.child(root, index);

/**
 * Iterate over the children of a node at a specific path.
 */
const getNodeChildren = (root, path, options) => slate.Node.children(root, path, options);

/**
 * Get the node at a specific path, asserting that it's a descendant node.
 */
const getNodeDescendant = (root, path) => slate.Node.descendant(root, path);

/**
 * Return a generator of all the element nodes inside a root node. Each iteration
 * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the
 * root node is an element it will be included in the iteration as well.
 */
const getNodeElements = (root, options) => slate.Node.elements(root, options);

/**
 * Get the first node entry in a root node from a path.
 */
const getNodeFirstNode = (root, path) => slate.Node.first(root, path);

/**
 * Get the sliced fragment represented by a range inside a root node.
 */
const getNodeFragment = (root, range) => slate.Node.fragment(root, range);

/**
 * Get the last node entry in a root node from a path.
 */
const getNodeLastNode = (root, path) => slate.Node.last(root, path);

/**
 * Get the node at a specific path, ensuring it's a leaf text node.
 */
const getNodeLeaf = (root, path) => slate.Node.leaf(root, path);

/**
 * Return a generator of the in a branch of the tree, from a specific path.
 *
 * By default the order is top-down, from lowest to highest node in the tree,
 * but you can pass the `reverse: true` option to go bottom-up.
 */
const getNodeLevels = (root, path, options) => slate.Node.levels(root, path, options);

/**
 * Get the parent of a node at a specific path.
 */
const getNodeParent = (root, path) => slate.Node.parent(root, path);

/**
 * Extract the custom properties from a node.
 */
const getNodeProps = node => slate.Node.extractProps(node);

/**
 * Return a generator of all leaf text nodes in a root node.
 */
const getNodeTexts = (root, options) => slate.Node.texts(root, options);

/**
 * Return a generator of all the node entries of a root node. Each entry is
 * returned as a `[Node, Path]` tuple, with the path referring to the node's
 * position inside the root node.
 */
const getNodes = (root, options) => slate.Node.nodes(root, options);

/**
 * Check if a descendant node exists at a specific path.
 */
const hasNode = (root, path) => slate.Node.has(root, path);

/**
 * Check if a value implements the `Node` interface.
 */
const isNode = value => slate.Node.isNode(value);

/**
 * Check if a value is a list of `Node` objects.
 */
const isNodeList = value => slate.Node.isNodeList(value);

/**
 * Check if a node matches a set of props.
 */
const nodeMatches = (node, props) => slate.Node.matches(node, props);

/**
 * See {@link Range.isCollapsed}.
 * Return false if `range` is not defined.
 */

const isCollapsed = range => !!range && slate.Range.isCollapsed(range);

/**
 * Blur the editor.
 */
const blurEditor = editor => slateReact.ReactEditor.blur(editor);

/**
 * Deselect the editor.
 */
const deselectEditor = editor => slateReact.ReactEditor.deselect(editor);

/**
 * Find the DOM node that implements DocumentOrShadowRoot for the editor.
 */
const findEditorDocumentOrShadowRoot = editor => {
  try {
    return slateReact.ReactEditor.findDocumentOrShadowRoot(editor);
  } catch (e) {}
};

/**
 * {@link ReactEditor.findEventRange}
 */
const findEventRange = (editor, event) => {
  try {
    return slateReact.ReactEditor.findEventRange(editor, event);
  } catch (e) {}
};

/**
 * Find a key for a Slate node.
 */
const findNodeKey = (editor, node) => {
  try {
    return slateReact.ReactEditor.findKey(editor, node);
  } catch (e) {}
};

/**
 * Find the path of Slate node.
 */
const findNodePath = (editor, node) => {
  try {
    return slateReact.ReactEditor.findPath(editor, node);
  } catch (e) {}
};

/**
 * Collapse the selection.
 */
const collapseSelection = (editor, options) => {
  slate.Transforms.collapse(editor, options);
};

/**
 * Unset the selection.
 */
const deselect = editor => {
  slate.Transforms.deselect(editor);
};

/**
 * Insert a fragment at a specific location in the editor.
 */
const insertFragment = (editor, fragment, options) => {
  slate.Transforms.insertFragment(editor, fragment, options);
};

/**
 * Insert nodes at a specific location in the Editor.
 */
const insertNodes = (editor, nodes, options) => slate.Transforms.insertNodes(editor, nodes, options);

/**
 * Insert a string of text in the Editor.
 */
const insertText = (editor, text, options) => {
  slate.Transforms.insertText(editor, text, options);
};

/**
 * Lift nodes at a specific location upwards in the document tree, splitting
 * their parent in two if necessary.
 */
const liftNodes = (editor, options) => slate.Transforms.liftNodes(editor, options);

/**
 * Move the selection's point forward or backward.
 */
const moveSelection = (editor, options) => {
  slate.Transforms.move(editor, options);
};

/**
 * Set new properties on one of the selection's points.
 */
const setPoint = (editor, props, options) => {
  slate.Transforms.setPoint(editor, props, options);
};

/**
 * Set new properties on the selection.
 */
const setSelection = (editor, props) => {
  slate.Transforms.setSelection(editor, props);
};

/**
 * Split the nodes at a specific location.
 */
const splitNodes = (editor, options) => slate.Transforms.splitNodes(editor, options);

/**
 * Unwrap the nodes at a location from a parent node, splitting the parent if
 * necessary to ensure that only the content in the range is unwrapped.
 */
const unwrapNodes = (editor, options) => {
  slate.Transforms.unwrapNodes(editor, getQueryOptions(editor, options));
};

/**
 * Wrap the nodes at a location in a new container node, splitting the edges
 * of the range first to ensure that only the content in the range is wrapped.
 */
const wrapNodes = (editor, element, options) => {
  unhangRange(editor, options === null || options === void 0 ? void 0 : options.at, options);
  slate.Transforms.wrapNodes(editor, element, options);
};

/**
 * Focus the editor. Extension:
 *
 * If `target` is defined:
 * - deselect the editor (otherwise it will focus the start of the editor)
 * - select the editor
 * - focus the editor
 */
const focusEditor = (editor, target) => {
  if (target) {
    withoutNormalizing(editor, () => {
      deselect(editor);
      select(editor, target);
    });
  }

  slateReact.ReactEditor.focus(editor);
};

/**
 * Return the host window of the current editor.
 */
const getEditorWindow = editor => {
  try {
    return slateReact.ReactEditor.getWindow(editor);
  } catch (e) {}
};

/**
 * Check if a DOM node is within the editor.
 */
const hasEditorDOMNode = (editor, target, options) => {
  try {
    return slateReact.ReactEditor.hasDOMNode(editor, target, options);
  } catch (e) {}

  return false;
};

/**
 * Insert data from a `DataTransfer` into the editor.
 */
const insertData = (editor, data) => slateReact.ReactEditor.insertData(editor, data);

/**
 * Check if the editor is focused.
 */
const isEditorFocused = editor => slateReact.ReactEditor.isFocused(editor);

/**
 * Check if the editor is in read-only mode.
 */
const isEditorReadOnly = editor => slateReact.ReactEditor.isReadOnly(editor);

/**
 * Sets data from the currently selected fragment on a `DataTransfer`.
 */
const setFragmentData = (editor, data) => slateReact.ReactEditor.setFragmentData(editor, data);

/**
 * Find the native DOM element from a Slate node.
 */
const toDOMNode = (editor, node) => {
  try {
    return slateReact.ReactEditor.toDOMNode(editor, node);
  } catch (e) {}
};

/**
 * Find a native DOM selection point from a Slate point.
 */
const toDOMPoint = (editor, point) => {
  try {
    return slateReact.ReactEditor.toDOMPoint(editor, point);
  } catch (e) {}
};

/**
 * {@link ReactEditor.toDOMRange}
 */
const toDOMRange = (editor, range) => {
  try {
    return slateReact.ReactEditor.toDOMRange(editor, range);
  } catch (e) {}
};

/**
 * {@link ReactEditor.toSlateNode}
 */
const toSlateNode = (editor, domNode) => {
  try {
    return slateReact.ReactEditor.toSlateNode(editor, domNode);
  } catch (e) {}
};

/**
 * {@link ReactEditor.toSlatePoint}
 */
const toSlatePoint = (editor, domPoint, options) => {
  try {
    return slateReact.ReactEditor.toSlatePoint(editor, domPoint, options);
  } catch (e) {}
};

/**
 * {@link ReactEditor.toSlateRange}
 */
const toSlateRange = (editor, domRange, options) => {
  try {
    return slateReact.ReactEditor.toSlateRange(editor, domRange, options);
  } catch (e) {}
};

/**
 * Check if a value is a list of `Text` objects.
 */
const isTextList = value => slate.Text.isTextList(value);

/**
 * Check if two text nodes are equal.
 */
const textEquals = (text, another) => slate.Text.equals(text, another);

/**
 * Check if an text matches set of properties.
 *
 * Note: this is for matching custom properties, and it does not ensure that
 * the `text` property are two nodes equal.
 */
const textMatches = (text, props) => slate.Text.matches(text, props);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns own and inherited enumerable string keyed properties of source
 * objects to the destination object for all destination properties that
 * resolve to `undefined`. Source objects are applied from left to right.
 * Once a property is set, additional values of the same property are ignored.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaultsDeep
 * @example
 *
 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var defaults = _baseRest(function(object, sources) {
  object = Object(object);

  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : undefined;

  if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
    length = 1;
  }

  while (++index < length) {
    var source = sources[index];
    var props = keysIn_1(source);
    var propsIndex = -1;
    var propsLength = props.length;

    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];

      if (value === undefined ||
          (eq_1(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        object[key] = source[key];
      }
    }
  }

  return object;
});

var defaults_1 = defaults;

/**
 * Recursively merge a source object to children nodes with a query.
 */

const defaultsDeepToNodes = options => {
  applyDeepToNodes({ ...options,
    apply: defaults_1
  });
};

const insertElements = (editor, nodes, options) => insertNodes(editor, nodes, options);

const insertEmptyElement = (editor, type, options) => {
  insertElements(editor, {
    type,
    children: [{
      text: ''
    }]
  }, getQueryOptions(editor, options));
};

/**
 * Move the children of a node to a path.
 * Returns the number of children moved.
 */
const moveChildren = (editor, {
  at,
  to,
  match,
  fromStartIndex = 0
}) => {
  let moved = 0;
  const parentPath = slate.Path.isPath(at) ? at : at[1];
  const parentNode = slate.Path.isPath(at) ? getNode(editor, parentPath) : at[0];
  if (!isBlock(editor, parentNode)) return moved;

  for (let i = parentNode.children.length - 1; i >= fromStartIndex; i--) {
    const childPath = [...parentPath, i];
    const childNode = getNode(editor, childPath);

    if (!match || childNode && match([childNode, childPath])) {
      moveNodes(editor, {
        at: childPath,
        to
      });
      moved++;
    }
  }

  return moved;
};

/**
 * Select an editor at a target or an edge (start, end).
 */
const selectEditor = (editor, {
  at,
  edge,
  focus
}) => {
  if (focus) {
    focusEditor(editor);
  }

  let location = at;

  if (edge === 'start') {
    location = getStartPoint(editor, []);
  }

  if (edge === 'end') {
    location = getEndPoint(editor, []);
  }

  if (location) {
    select(editor, location);
  }
};

/**
 * Select the end point of the block above the selection.
 */

const selectEndOfBlockAboveSelection = editor => {
  var _getBlockAbove;

  const path = (_getBlockAbove = getBlockAbove(editor)) === null || _getBlockAbove === void 0 ? void 0 : _getBlockAbove[1];
  path && select(editor, getEndPoint(editor, path));
};

/**
 * Set marks to selected text.
 */

const setMarks = (editor, marks, clear = []) => {
  if (!editor.selection) return;
  withoutNormalizing(editor, () => {
    const clears = castArray_1(clear);
    removeMark(editor, {
      key: clears
    });
    removeMark(editor, {
      key: Object.keys(marks)
    });
    Object.keys(marks).forEach(key => {
      editor.addMark(key, marks[key]);
    });
  });
};

/**
 * Unwrap if the node type is in selection.
 * Wrap otherwise.
 */

const toggleWrapNodes = (editor, type) => {
  if (someNode(editor, {
    match: {
      type
    }
  })) {
    unwrapNodes(editor, {
      match: {
        type
      }
    });
  } else {
    wrapNodes(editor, {
      type,
      children: []
    });
  }
};

Object.defineProperty(exports, 'atom', {
  enumerable: true,
  get: function () { return jotai.atom; }
});
Object.defineProperty(exports, 'useAtom', {
  enumerable: true,
  get: function () { return jotai.useAtom; }
});
Object.defineProperty(exports, 'useAtomValue', {
  enumerable: true,
  get: function () { return jotai.useAtomValue; }
});
Object.defineProperty(exports, 'createStore', {
  enumerable: true,
  get: function () { return zustood.createStore; }
});
exports.Box = Box;
exports.CARRIAGE_RETURN = CARRIAGE_RETURN;
exports.DOM_HANDLERS = DOM_HANDLERS;
exports.DefaultLeaf = DefaultLeaf;
exports.ELEMENT_DEFAULT = ELEMENT_DEFAULT;
exports.EditablePlugins = EditablePlugins;
exports.EditorRefEffect = EditorRefEffect;
exports.EditorRefPluginEffect = EditorRefPluginEffect;
exports.EditorStateEffect = EditorStateEffect;
exports.ElementProvider = ElementProvider;
exports.ElementProviderChild = ElementProviderChild;
exports.Hotkeys = Hotkeys;
exports.IS_APPLE = IS_APPLE;
exports.JotaiProvider = JotaiProvider;
exports.KEY_DESERIALIZE_AST = KEY_DESERIALIZE_AST;
exports.KEY_DESERIALIZE_HTML = KEY_DESERIALIZE_HTML;
exports.KEY_EVENT_EDITOR = KEY_EVENT_EDITOR;
exports.KEY_INLINE_VOID = KEY_INLINE_VOID;
exports.KEY_INSERT_DATA = KEY_INSERT_DATA;
exports.LINE_FEED = LINE_FEED;
exports.NO_BREAK_SPACE = NO_BREAK_SPACE;
exports.Plate = Plate;
exports.PlateContent = PlateContent;
exports.PlateEventProvider = PlateEventProvider;
exports.PlateProvider = PlateProvider;
exports.PlateTest = PlateTest;
exports.SCOPE_PLATE = SCOPE_PLATE;
exports.SPACE = SPACE;
exports.TAB = TAB;
exports.ZERO_WIDTH_SPACE = ZERO_WIDTH_SPACE;
exports.addMark = addMark;
exports.applyDeepToNodes = applyDeepToNodes;
exports.blurEditor = blurEditor;
exports.cleanHtmlBrElements = cleanHtmlBrElements;
exports.cleanHtmlCrLf = cleanHtmlCrLf;
exports.cleanHtmlEmptyElements = cleanHtmlEmptyElements;
exports.cleanHtmlFontElements = cleanHtmlFontElements;
exports.cleanHtmlLinkElements = cleanHtmlLinkElements;
exports.cleanHtmlTextNodes = cleanHtmlTextNodes;
exports.collapseSelection = collapseSelection;
exports.composeEventHandlers = composeEventHandlers;
exports.composeRefs = composeRefs;
exports.copyBlockMarksToSpanChild = copyBlockMarksToSpanChild;
exports.createAtomStore = createAtomStore;
exports.createComponentAs = createComponentAs;
exports.createDeserializeAstPlugin = createDeserializeAstPlugin;
exports.createDeserializeHtmlPlugin = createDeserializeHtmlPlugin;
exports.createDocumentNode = createDocumentNode;
exports.createElementAs = createElementAs;
exports.createEventEditorPlugin = createEventEditorPlugin;
exports.createHistoryPlugin = createHistoryPlugin;
exports.createInlineVoidPlugin = createInlineVoidPlugin;
exports.createInsertDataPlugin = createInsertDataPlugin;
exports.createNode = createNode;
exports.createNodeHOC = createNodeHOC;
exports.createNodesHOC = createNodesHOC;
exports.createNodesWithHOC = createNodesWithHOC;
exports.createPathRef = createPathRef;
exports.createPlateEditor = createPlateEditor;
exports.createPlateStore = createPlateStore;
exports.createPlatesStore = createPlatesStore;
exports.createPluginFactory = createPluginFactory;
exports.createPlugins = createPlugins;
exports.createPointRef = createPointRef;
exports.createRangeRef = createRangeRef;
exports.createReactPlugin = createReactPlugin;
exports.createTEditor = createTEditor;
exports.defaultsDeepToNodes = defaultsDeepToNodes;
exports.deleteBackward = deleteBackward;
exports.deleteForward = deleteForward;
exports.deleteFragment = deleteFragment;
exports.deleteMerge = deleteMerge;
exports.deleteText = deleteText;
exports.deselect = deselect;
exports.deselectEditor = deselectEditor;
exports.deserializeHtml = deserializeHtml;
exports.deserializeHtmlElement = deserializeHtmlElement;
exports.deserializeHtmlNode = deserializeHtmlNode;
exports.deserializeHtmlNodeChildren = deserializeHtmlNodeChildren;
exports.elementMatches = elementMatches;
exports.elementStore = elementStore;
exports.escapeRegExp = escapeRegExp;
exports.eventEditorActions = eventEditorActions;
exports.eventEditorSelectors = eventEditorSelectors;
exports.eventEditorStore = eventEditorStore;
exports.findDescendant = findDescendant;
exports.findEditorDocumentOrShadowRoot = findEditorDocumentOrShadowRoot;
exports.findEventRange = findEventRange;
exports.findHtmlElement = findHtmlElement;
exports.findHtmlParentElement = findHtmlParentElement;
exports.findNode = findNode;
exports.findNodeKey = findNodeKey;
exports.findNodePath = findNodePath;
exports.flattenDeepPlugins = flattenDeepPlugins;
exports.focusEditor = focusEditor;
exports.getAboveNode = getAboveNode;
exports.getBlockAbove = getBlockAbove;
exports.getChildren = getChildren;
exports.getCommonNode = getCommonNode;
exports.getEdgeBlocksAbove = getEdgeBlocksAbove;
exports.getEdgePoints = getEdgePoints;
exports.getEditorString = getEditorString;
exports.getEditorWindow = getEditorWindow;
exports.getEndPoint = getEndPoint;
exports.getEventEditorId = getEventEditorId;
exports.getFirstNode = getFirstNode;
exports.getFragment = getFragment;
exports.getHandler = getHandler;
exports.getHtmlComments = getHtmlComments;
exports.getInjectedPlugins = getInjectedPlugins;
exports.getKeyByType = getKeyByType;
exports.getKeysByTypes = getKeysByTypes;
exports.getLastChild = getLastChild$1;
exports.getLastChildPath = getLastChildPath;
exports.getLastNode = getLastNode;
exports.getLastNodeByLevel = getLastNodeByLevel;
exports.getLeafNode = getLeafNode;
exports.getLevels = getLevels;
exports.getMark = getMark;
exports.getMarks = getMarks;
exports.getNextNode = getNextNode;
exports.getNextSiblingNodes = getNextSiblingNodes;
exports.getNode = getNode;
exports.getNodeAncestor = getNodeAncestor;
exports.getNodeAncestors = getNodeAncestors;
exports.getNodeChild = getNodeChild;
exports.getNodeChildren = getNodeChildren;
exports.getNodeDescendant = getNodeDescendant;
exports.getNodeDescendants = getNodeDescendants;
exports.getNodeElements = getNodeElements;
exports.getNodeEntries = getNodeEntries;
exports.getNodeEntry = getNodeEntry;
exports.getNodeFirstNode = getNodeFirstNode;
exports.getNodeFragment = getNodeFragment;
exports.getNodeLastNode = getNodeLastNode;
exports.getNodeLeaf = getNodeLeaf;
exports.getNodeLevels = getNodeLevels;
exports.getNodeParent = getNodeParent;
exports.getNodeProps = getNodeProps;
exports.getNodeString = getNodeString;
exports.getNodeTexts = getNodeTexts;
exports.getNodes = getNodes;
exports.getOperations = getOperations;
exports.getParentNode = getParentNode;
exports.getPath = getPath;
exports.getPathRefs = getPathRefs;
exports.getPlateActions = getPlateActions;
exports.getPlateEditorRef = getPlateEditorRef;
exports.getPlatePlugins = getPlatePlugins;
exports.getPlateSelectors = getPlateSelectors;
exports.getPlateStore = getPlateStore;
exports.getPlugin = getPlugin;
exports.getPluginInjectProps = getPluginInjectProps;
exports.getPluginOptions = getPluginOptions;
exports.getPluginType = getPluginType;
exports.getPluginTypes = getPluginTypes;
exports.getPlugins = getPlugins;
exports.getPluginsByKey = getPluginsByKey;
exports.getPoint = getPoint;
exports.getPointAfter = getPointAfter;
exports.getPointBefore = getPointBefore;
exports.getPointBeforeLocation = getPointBeforeLocation;
exports.getPointFromLocation = getPointFromLocation;
exports.getPointNextToVoid = getPointNextToVoid;
exports.getPointRefs = getPointRefs;
exports.getPositions = getPositions;
exports.getPreventDefaultHandler = getPreventDefaultHandler;
exports.getPreviousBlockById = getPreviousBlockById;
exports.getPreviousNode = getPreviousNode;
exports.getPreviousPath = getPreviousPath;
exports.getQueryOptions = getQueryOptions;
exports.getRange = getRange;
exports.getRangeBefore = getRangeBefore;
exports.getRangeFromBlockStart = getRangeFromBlockStart;
exports.getRangeRefs = getRangeRefs;
exports.getRenderNodeProps = getRenderNodeProps;
exports.getSelectionText = getSelectionText;
exports.getSlateClass = getSlateClass;
exports.getStartPoint = getStartPoint;
exports.getTEditor = getTEditor;
exports.getVoidNode = getVoidNode;
exports.hasBlocks = hasBlocks;
exports.hasEditorDOMNode = hasEditorDOMNode;
exports.hasInlines = hasInlines;
exports.hasNode = hasNode;
exports.hasSingleChild = hasSingleChild;
exports.hasTexts = hasTexts;
exports.hexToBase64 = hexToBase64;
exports.htmlBodyToFragment = htmlBodyToFragment;
exports.htmlBrToNewLine = htmlBrToNewLine;
exports.htmlElementToElement = htmlElementToElement;
exports.htmlElementToLeaf = htmlElementToLeaf;
exports.htmlStringToDOMNode = htmlStringToDOMNode;
exports.htmlTextNodeToString = htmlTextNodeToString;
exports.insertBreak = insertBreak;
exports.insertData = insertData;
exports.insertElements = insertElements;
exports.insertEmptyElement = insertEmptyElement;
exports.insertFragment = insertFragment;
exports.insertNode = insertNode;
exports.insertNodes = insertNodes;
exports.insertText = insertText;
exports.isAncestor = isAncestor;
exports.isAncestorEmpty = isAncestorEmpty;
exports.isBlock = isBlock;
exports.isBlockAboveEmpty = isBlockAboveEmpty;
exports.isBlockTextEmptyAfterSelection = isBlockTextEmptyAfterSelection;
exports.isCollapsed = isCollapsed;
exports.isComposing = isComposing;
exports.isDefined = isDefined;
exports.isDescendant = isDescendant;
exports.isEdgePoint = isEdgePoint;
exports.isEditor = isEditor;
exports.isEditorFocused = isEditorFocused;
exports.isEditorNormalizing = isEditorNormalizing;
exports.isEditorReadOnly = isEditorReadOnly;
exports.isElement = isElement;
exports.isElementEmpty = isElementEmpty;
exports.isElementList = isElementList;
exports.isEndPoint = isEndPoint;
exports.isEventHandled = isEventHandled;
exports.isExpanded = isExpanded;
exports.isFirstChild = isFirstChild;
exports.isHistoryEditor = isHistoryEditor;
exports.isHistoryMerging = isHistoryMerging;
exports.isHistorySaving = isHistorySaving;
exports.isHtmlBlockElement = isHtmlBlockElement;
exports.isHtmlComment = isHtmlComment;
exports.isHtmlElement = isHtmlElement;
exports.isHtmlFragmentHref = isHtmlFragmentHref;
exports.isHtmlText = isHtmlText;
exports.isInline = isInline;
exports.isLastChild = isLastChild;
exports.isMarkActive = isMarkActive;
exports.isNode = isNode;
exports.isNodeList = isNodeList;
exports.isNull = isNull;
exports.isOlSymbol = isOlSymbol;
exports.isPointAtWordEnd = isPointAtWordEnd;
exports.isRangeAcrossBlocks = isRangeAcrossBlocks;
exports.isRangeInSingleText = isRangeInSingleText;
exports.isSelectionAtBlockEnd = isSelectionAtBlockEnd;
exports.isSelectionAtBlockStart = isSelectionAtBlockStart;
exports.isSelectionExpanded = isSelectionExpanded;
exports.isStartPoint = isStartPoint;
exports.isText = isText;
exports.isTextByPath = isTextByPath;
exports.isTextList = isTextList;
exports.isType = isType;
exports.isUndefined = isUndefined;
exports.isUndefinedOrNull = isUndefinedOrNull;
exports.isUrl = isUrl;
exports.isVoid = isVoid;
exports.isWordAfterTrigger = isWordAfterTrigger;
exports.liftNodes = liftNodes;
exports.mapInjectPropsToPlugin = mapInjectPropsToPlugin;
exports.match = match;
exports.mergeDeepPlugins = mergeDeepPlugins;
exports.mergeDeepToNodes = mergeDeepToNodes;
exports.mergeNodes = mergeNodes;
exports.mockPlugin = mockPlugin;
exports.moveChildren = moveChildren;
exports.moveNodes = moveNodes;
exports.moveSelection = moveSelection;
exports.nodeMatches = nodeMatches;
exports.normalizeDescendantsToDocumentFragment = normalizeDescendantsToDocumentFragment;
exports.normalizeEditor = normalizeEditor;
exports.normalizeInitialValue = normalizeInitialValue;
exports.onKeyDownToggleElement = onKeyDownToggleElement;
exports.onKeyDownToggleMark = onKeyDownToggleMark;
exports.overridePluginsByKey = overridePluginsByKey;
exports.parseHtmlDocument = parseHtmlDocument;
exports.parseHtmlElement = parseHtmlElement;
exports.pipeDecorate = pipeDecorate;
exports.pipeDeserializeHtmlElement = pipeDeserializeHtmlElement;
exports.pipeDeserializeHtmlLeaf = pipeDeserializeHtmlLeaf;
exports.pipeHandler = pipeHandler;
exports.pipeInjectProps = pipeInjectProps;
exports.pipeInsertDataQuery = pipeInsertDataQuery;
exports.pipeInsertFragment = pipeInsertFragment;
exports.pipeOnChange = pipeOnChange;
exports.pipeRenderElement = pipeRenderElement;
exports.pipeRenderLeaf = pipeRenderLeaf;
exports.pipeTransformData = pipeTransformData;
exports.pipeTransformFragment = pipeTransformFragment;
exports.plateIdAtom = plateIdAtom;
exports.platesActions = platesActions;
exports.platesSelectors = platesSelectors;
exports.platesStore = platesStore;
exports.pluginDeserializeHtml = pluginDeserializeHtml;
exports.pluginInjectProps = pluginInjectProps;
exports.pluginRenderElement = pluginRenderElement;
exports.pluginRenderLeaf = pluginRenderLeaf;
exports.postCleanHtml = postCleanHtml;
exports.preCleanHtml = preCleanHtml;
exports.queryEditor = queryEditor;
exports.queryNode = queryNode;
exports.removeEditorMark = removeEditorMark;
exports.removeHtmlNodesBetweenComments = removeHtmlNodesBetweenComments;
exports.removeHtmlSurroundings = removeHtmlSurroundings;
exports.removeMark = removeMark;
exports.removeNodes = removeNodes;
exports.replaceTagName = replaceTagName;
exports.select = select;
exports.selectEditor = selectEditor;
exports.selectEndOfBlockAboveSelection = selectEndOfBlockAboveSelection;
exports.setDefaultPlugin = setDefaultPlugin;
exports.setElements = setElements;
exports.setFragmentData = setFragmentData;
exports.setMarks = setMarks;
exports.setNodes = setNodes;
exports.setPlatePlugins = setPlatePlugins;
exports.setPlateState = setPlateState;
exports.setPoint = setPoint;
exports.setSelection = setSelection;
exports.someHtmlElement = someHtmlElement;
exports.someNode = someNode;
exports.splitNodes = splitNodes;
exports.textEquals = textEquals;
exports.textMatches = textMatches;
exports.toDOMNode = toDOMNode;
exports.toDOMPoint = toDOMPoint;
exports.toDOMRange = toDOMRange;
exports.toSlateNode = toSlateNode;
exports.toSlatePoint = toSlatePoint;
exports.toSlateRange = toSlateRange;
exports.toggleMark = toggleMark;
exports.toggleNodeType = toggleNodeType;
exports.toggleWrapNodes = toggleWrapNodes;
exports.traverseHtmlComments = traverseHtmlComments;
exports.traverseHtmlElements = traverseHtmlElements;
exports.traverseHtmlNode = traverseHtmlNode;
exports.traverseHtmlTexts = traverseHtmlTexts;
exports.unhangRange = unhangRange;
exports.unsetNodes = unsetNodes;
exports.unwrapHtmlElement = unwrapHtmlElement;
exports.unwrapNodes = unwrapNodes;
exports.useComposedRef = useComposedRef;
exports.useEditableProps = useEditableProps;
exports.useEditorRef = useEditorRef;
exports.useEditorState = useEditorState;
exports.useElement = useElement;
exports.useElementStore = useElementStore;
exports.useEventEditorId = useEventEditorId;
exports.useEventEditorSelectors = useEventEditorSelectors;
exports.useEventPlateId = useEventPlateId;
exports.usePlate = usePlate;
exports.usePlateEditorRef = usePlateEditorRef;
exports.usePlateEditorState = usePlateEditorState;
exports.usePlateEffects = usePlateEffects;
exports.usePlateId = usePlateId;
exports.usePlatePlugins = usePlatePlugins;
exports.usePlateSelection = usePlateSelection;
exports.usePlateSelectors = usePlateSelectors;
exports.usePlateStore = usePlateStore;
exports.usePlateStoreEffects = usePlateStoreEffects;
exports.usePlatesSelectors = usePlatesSelectors;
exports.usePlatesStoreEffect = usePlatesStoreEffect;
exports.useSlateProps = useSlateProps;
exports.useWrapElement = useWrapElement;
exports.withHOC = withHOC;
exports.withInlineVoid = withInlineVoid;
exports.withInsertData = withInsertData;
exports.withPlate = withPlate;
exports.withPlateEventProvider = withPlateEventProvider;
exports.withPlateProvider = withPlateProvider;
exports.withProps = withProps;
exports.withProviders = withProviders;
exports.withTHistory = withTHistory;
exports.withTReact = withTReact;
exports.withoutMergingHistory = withoutMergingHistory;
exports.withoutNormalizing = withoutNormalizing;
exports.withoutSavingHistory = withoutSavingHistory;
exports.wrapNodes = wrapNodes;
//# sourceMappingURL=index.js.map
