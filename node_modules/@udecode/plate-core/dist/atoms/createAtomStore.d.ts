import { Atom, Scope, SetAtom } from 'jotai/core/atom';
export declare type GetRecord<O> = {
    [K in keyof O]: (scope?: Scope) => O[K];
};
export declare type SetRecord<O> = {
    [K in keyof O]: (scope?: Scope) => (value: O[K]) => void;
};
export declare type UseRecord<O> = {
    [K in keyof O]: (scope?: Scope) => [O[K], SetAtom<O[K], void>];
};
declare type AtomRecord<O> = {
    [K in keyof O]: Atom<O[K]>;
};
declare type UseNameStore<N extends string = ''> = `use${Capitalize<N>}Store`;
declare type NameStore<N extends string = ''> = N extends '' ? 'store' : `${N}Store`;
export declare type AtomStoreApi<T, N extends string = ''> = {
    name: N;
} & {
    [key in keyof Record<NameStore<N>, {}>]: {
        atom: AtomRecord<T>;
        scope?: Scope;
        extend: <ET, EN>(extendedState: ET, options?: Omit<CreateAtomStoreOptions<{}, EN extends string ? EN : N>, 'initialStore'>) => AtomStoreApi<T & ET, EN extends string ? EN : N>;
    };
} & {
    [key in keyof Record<UseNameStore<N>, {}>]: (scope?: Scope) => {
        get: GetRecord<T>;
        set: SetRecord<T>;
        use: UseRecord<T>;
    };
};
export interface CreateAtomStoreOptions<U, N extends string> {
    scope?: Scope;
    initialStore?: AtomStoreApi<U, N>;
    name?: N;
}
/**
 * Create an atom store from an initial value.
 * Each property will have a getter and setter.
 *
 * @example
 * const { exampleStore, useExampleStore } = createAtomStore({ count: 1, say: 'hello' }, { name: 'example' as const })
 * const [count, setCount] = useExampleStore().use.count()
 * const say = useExampleStore().get.say()
 * const setSay = useExampleStore().set.say()
 * setSay('world')
 * const countAtom = exampleStore.atom.count
 */
export declare const createAtomStore: <T, IT, N extends string = "">(initialState: T, { scope: storeScope, initialStore, name, }?: CreateAtomStoreOptions<IT, N>) => AtomStoreApi<T & IT, N>;
export {};
//# sourceMappingURL=createAtomStore.d.ts.map