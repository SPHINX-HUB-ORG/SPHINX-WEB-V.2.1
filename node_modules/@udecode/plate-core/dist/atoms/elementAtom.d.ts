import React from 'react';
import { TElement } from '@udecode/slate';
import { Scope } from 'jotai/core/atom';
import { JotaiProviderProps } from '../libs';
export declare const SCOPE_ELEMENT = "element";
export declare const elementStore: {
    atom: {
        element: import("jotai/core/atom").Atom<TElement>;
    };
    scope?: Scope | undefined;
    extend: <ET, EN>(extendedState: ET, options?: Omit<import("./createAtomStore").CreateAtomStoreOptions<{}, EN extends string ? EN : "element">, "initialStore"> | undefined) => import("./createAtomStore").AtomStoreApi<{
        element: TElement;
    } & ET, EN extends string ? EN : "element">;
}, useElementStore: (scope?: Scope | undefined) => {
    get: import("./createAtomStore").GetRecord<{
        element: TElement;
    }>;
    set: import("./createAtomStore").SetRecord<{
        element: TElement;
    }>;
    use: import("./createAtomStore").UseRecord<{
        element: TElement;
    }>;
};
export declare const ElementProviderChild: ({ element, scope, children, }: {
    element: TElement;
    scope: Scope;
    children: any;
}) => any;
/**
 * Global and scoped provider above element.
 */
export declare const ElementProvider: ({ element, scope, children, ...props }: {
    initialValues?: Iterable<readonly [import("jotai/core/atom").Atom<unknown>, unknown]> | undefined;
    scope?: Scope | undefined;
    unstable_createStore?: ((initialValues?: Iterable<readonly [{
        toString: () => string;
        debugLabel?: string | undefined;
        read: (get: {
            <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
            <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
            <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
        }) => unknown;
    }, unknown]> | undefined) => {
        get: <Value_3>(atom: import("jotai/core/atom").Atom<Value_3>) => (Value_3 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? any : V_1 : V_1 : V_1 : V_1 : V_1 : V_1 : V_1 : V_1 : V_1 : V_1 : Value_3) | undefined;
        asyncGet: <Value_1>(atom: import("jotai/core/atom").Atom<Value_1>) => Promise<Value_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? V_1 extends Promise<infer V_1> ? any : V_1 : V_1 : V_1 : V_1 : V_1 : V_1 : V_1 : V_1 : V_1 : V_1 : Value_1>;
        set: <Value_2, Update, Result extends void | Promise<void>>(atom: import("jotai/core/atom").WritableAtom<Value_2, Update, Result>, update: Update) => Result;
        sub: (atom: {
            toString: () => string;
            debugLabel?: string | undefined;
            read: (get: {
                <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
                <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
                <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
            }) => unknown;
        }, callback: () => void) => () => void;
        SECRET_INTERNAL_store: {
            r: <Value_4>(readingAtom: import("jotai/core/atom").Atom<Value_4>, version?: import("jotai/core/store").VersionObject | undefined) => import("jotai/core/store").AtomState<Value_4>;
            w: <Value_1_1, Update_1, Result_1 extends void | Promise<void>>(writingAtom: import("jotai/core/atom").WritableAtom<Value_1_1, Update_1, Result_1>, update: Update_1, version?: import("jotai/core/store").VersionObject | undefined) => Result_1;
            c: (_atom: {
                toString: () => string;
                debugLabel?: string | undefined;
                read: (get: {
                    <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
                    <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
                    <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
                }) => unknown;
            } | null, version?: import("jotai/core/store").VersionObject | undefined) => void;
            s: (atom: {
                toString: () => string;
                debugLabel?: string | undefined;
                read: (get: {
                    <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
                    <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
                    <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
                }) => unknown;
            }, callback: (version?: import("jotai/core/store").VersionObject | undefined) => void) => () => void;
            h: (values: Iterable<readonly [{
                toString: () => string;
                debugLabel?: string | undefined;
                read: (get: {
                    <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
                    <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
                    <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
                }) => unknown;
            }, unknown]>, version?: import("jotai/core/store").VersionObject | undefined) => void;
            n: (l: () => void) => () => void;
            l: () => IterableIterator<{
                toString: () => string;
                debugLabel?: string | undefined;
                read: (get: {
                    <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
                    <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
                    <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
                }) => unknown;
            }>;
            a: (a: {
                toString: () => string;
                debugLabel?: string | undefined;
                read: (get: {
                    <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
                    <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
                    <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
                }) => unknown;
            }) => import("jotai/core/store").AtomState<unknown> | undefined;
            m: (a: {
                toString: () => string;
                debugLabel?: string | undefined;
                read: (get: {
                    <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
                    <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
                    <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
                }) => unknown;
            }) => {
                l: Set<(version?: import("jotai/core/store").VersionObject | undefined) => void>;
                t: Set<{
                    toString: () => string;
                    debugLabel?: string | undefined;
                    read: (get: {
                        <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
                        <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
                        <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
                    }) => unknown;
                }>;
                u?: (() => void) | undefined;
            } | undefined;
        } | {
            r: <Value_5>(readingAtom: import("jotai/core/atom").Atom<Value_5>, version?: import("jotai/core/store").VersionObject | undefined) => import("jotai/core/store").AtomState<Value_5>;
            w: <Value_1_2, Update_2, Result_2 extends void | Promise<void>>(writingAtom: import("jotai/core/atom").WritableAtom<Value_1_2, Update_2, Result_2>, update: Update_2, version?: import("jotai/core/store").VersionObject | undefined) => Result_2;
            c: (_atom: {
                toString: () => string;
                debugLabel?: string | undefined;
                read: (get: {
                    <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
                    <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
                    <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
                }) => unknown;
            } | null, version?: import("jotai/core/store").VersionObject | undefined) => void;
            s: (atom: {
                toString: () => string;
                debugLabel?: string | undefined;
                read: (get: {
                    <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
                    <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
                    <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
                }) => unknown;
            }, callback: (version?: import("jotai/core/store").VersionObject | undefined) => void) => () => void;
            h: (values: Iterable<readonly [{
                toString: () => string;
                debugLabel?: string | undefined;
                read: (get: {
                    <Value>(atom: import("jotai/core/atom").Atom<Value | Promise<Value>>): Value;
                    <Value_1>(atom: import("jotai/core/atom").Atom<Promise<Value_1>>): Value_1;
                    <Value_2>(atom: import("jotai/core/atom").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;
                }) => unknown;
            }, unknown]>, version?: import("jotai/core/store").VersionObject | undefined) => void;
            n?: undefined;
            l?: undefined;
            a?: undefined;
            m?: undefined;
        };
    }) | undefined;
    unstable_enableVersionedWrite?: boolean | undefined;
} & {
    children?: React.ReactNode;
} & {
    element: TElement;
}) => JSX.Element;
//# sourceMappingURL=elementAtom.d.ts.map