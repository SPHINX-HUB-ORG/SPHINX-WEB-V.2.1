import React, { Ref } from 'react';
import { Value } from '../../slate/editor/TEditor';
import { PlateEditor } from '../../types/plate/PlateEditor';
import { PlateStoreState } from '../../types/plate/PlateStore';
import { Scope } from '../../utils/misc/jotai';
export interface PlateProps<V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>> extends Partial<Omit<PlateStoreState<V, E>, 'keyEditor' | 'keyPlugins' | 'keySelection'>> {
    /**
     * The children rendered inside `Slate`, after `Editable`.
     */
    children?: React.ReactNode;
    /**
     * If `true`, disable all the core plugins.
     * If an object, disable the core plugin properties that are `true` in the object.
     */
    disableCorePlugins?: {
        deserializeAst?: boolean;
        deserializeHtml?: boolean;
        eventEditor?: boolean;
        inlineVoid?: boolean;
        insertData?: boolean;
        history?: boolean;
        react?: boolean;
    } | boolean;
    /**
     * Ref to the `Editable` component.
     */
    editableRef?: Ref<HTMLDivElement>;
    /**
     * The first children rendered inside `Slate`, before `Editable`.
     * Slate DOM is not yet resolvable on first render, for that case use `children` instead.
     */
    firstChildren?: React.ReactNode;
    /**
     * Initial value of the editor.
     * @default [{ children: [{ text: '' }]}]
     */
    initialValue?: PlateStoreState<V>['value'];
    /**
     * When `true`, it will normalize the initial value passed to the `editor` once it gets created.
     * This is useful when adding normalization rules on already existing content.
     * @default false
     */
    normalizeInitialValue?: boolean;
    /**
     * Custom `Editable` node.
     */
    renderEditable?: (editable: React.ReactNode) => React.ReactNode;
    scope?: Scope;
}
export declare const PlateContent: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>({ children, renderEditable, editableRef, firstChildren, ...options }: PlateProps<V, E>) => JSX.Element | null;
export declare const Plate: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(props: PlateProps<V, E>) => JSX.Element | null;
//# sourceMappingURL=Plate.d.ts.map