import { Value } from '@udecode/slate';
import { PlateEditor } from '../types/PlateEditor';
import { PlatePlugin, PluginOptions, WithPlatePlugin } from '../types/plugin/PlatePlugin';
export declare type InjectedPlugin<P = PluginOptions, V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>> = Partial<PlatePlugin<P, V, E>>;
/**
 * Get all plugins having a defined `inject.pluginsByKey[plugin.key]`.
 * It includes `plugin` itself.
 */
export declare const getInjectedPlugins: <P = import("@udecode/utils").AnyObject, V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: PlateEditor<V>, plugin: WithPlatePlugin<P, V, E>) => Partial<PlatePlugin<P, V, E>>[];
//# sourceMappingURL=getInjectedPlugins.d.ts.map