import { ReactElement } from 'react';
import { AsProps, Component, Props } from '../../types/index';
/**
 * Creates a type-safe component with the `as` prop and `React.forwardRef`.
 * Also supports `asChild` prop.
 *
 * @see https://www.radix-ui.com/docs/primitives/overview/styling#changing-the-rendered-element
 * @see https://github.com/ariakit/ariakit/blob/ddd19e97a07a21e4d5fc93719d1fdc5bdab697f7/packages/ariakit-utils/src/system.tsx#L33
 *
 * @example
 * import { createComponent } from "ariakit-utils/system";
 *
 * type Props = {
 *   as?: "div";
 *   customProp?: boolean;
 * };
 *
 * const Component = createComponent<Props>(({ customProp, ...props }) => {
 *   return <div {...props} />;
 * });
 *
 * <Component as="button" customProp />
 */
export declare const createComponentAs: <O extends AsProps<import("../../types/index").As<any>>>(render: (props: Omit<Props<O>, "asChild">) => ReactElement | null) => Component<O>;
//# sourceMappingURL=createComponentAs.d.ts.map