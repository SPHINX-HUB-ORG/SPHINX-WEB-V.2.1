import { WithPlateOptions } from '../../plugins/withPlate';
import { TEditor, Value } from '../../slate/editor/TEditor';
import { OverrideByKey } from '../../types/plate/OverrideByKey';
import { PlateEditor } from '../../types/plate/PlateEditor';
import { PlatePlugin, PluginOptions } from '../../types/plugin/PlatePlugin';
import { PlatePluginComponent } from '../../types/plugin/PlatePluginComponent';
export interface CreatePlateEditorOptions<V extends Value = Value, E extends TEditor<V> = TEditor<V>> extends Omit<WithPlateOptions<V, E & PlateEditor<V>>, 'plugins'> {
    editor?: E;
    plugins?: PlatePlugin<PluginOptions, V>[];
    components?: Record<string, PlatePluginComponent>;
    overrideByKey?: OverrideByKey<V>;
    normalizeInitialValue?: boolean;
}
/**
 * Create a plate editor with:
 * - `createTEditor` or custom `editor`
 * - `withPlate`
 * - custom `components`
 */
export declare const createPlateEditor: <V extends Value = Value, E extends TEditor<V> = TEditor<V>>({ editor, plugins, components, overrideByKey, normalizeInitialValue, ...withPlateOptions }?: CreatePlateEditorOptions<V, E>) => E & Omit<import("slate").BaseEditor, "children" | "operations" | "marks" | "isInline" | "isVoid" | "normalizeNode" | "apply" | "getFragment" | "insertFragment" | "insertNode"> & {
    children: V;
    operations: import("../..").TOperation<import("../..").TDescendant>[];
    marks: Record<string, any> | null;
    isInline: <N extends import("../..").TElement>(element: N) => boolean;
    isVoid: <N_1 extends import("../..").TElement>(element: N_1) => boolean;
    normalizeNode: <N_2 extends import("../..").TNode>(entry: import("../..").TNodeEntry<N_2>) => void;
    apply: <N_3 extends import("../..").TDescendant>(operation: import("../..").TOperation<N_3>) => void;
    getFragment: <N_4 extends import("../..").TDescendant>() => N_4[];
    insertFragment: <N_5 extends import("../..").TDescendant>(fragment: N_5[]) => void;
    insertNode: <N_6 extends import("../..").TDescendant>(node: N_6 | N_6[]) => void;
} & import("../..").UnknownObject & Pick<import("slate-history").HistoryEditor, "history" | "undo" | "redo"> & Pick<import("slate-react").ReactEditor, "insertData" | "insertFragmentData" | "setFragmentData" | "insertTextData" | "hasRange"> & {
    key: any;
    id: string;
    plugins: import("../../types/plugin/PlatePlugin").WithPlatePlugin<{}, V, PlateEditor<V>>[];
    pluginsByKey: Record<string, import("../../types/plugin/PlatePlugin").WithPlatePlugin<{}, V, PlateEditor<V>>>;
};
//# sourceMappingURL=createPlateEditor.d.ts.map