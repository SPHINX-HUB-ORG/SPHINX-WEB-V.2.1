import { Value } from '../../slate/editor/TEditor';
import { PlateEditor } from '../../types/plate/PlateEditor';
import { PlateStoreApi } from '../../types/plate/PlateStore';
export declare const getPlateStore: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(id?: string | undefined) => import("@udecode/zustood").StoreApi<`plate-${string}`, import("../../types/plate/PlateStore").PlateStoreState<V, E>, import("@udecode/zustood").SetRecord<import("../../types/plate/PlateStore").PlateStoreState<V, E>> & {
    state: import("@udecode/zustood").SetImmerState<import("../../types/plate/PlateStore").PlateStoreState<V, E>>;
    mergeState: import("@udecode/zustood").MergeState<import("../../types/plate/PlateStore").PlateStoreState<V, E>>;
} & {
    resetEditor: () => void;
    incrementKey: (key: import("../../types/plate/PlateStore").PlateChangeKey) => void;
} & {
    redecorate: () => void;
}, {}>;
export declare const usePlateStore: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(id?: string | undefined) => import("@udecode/zustood").StoreApi<`plate-${string}`, import("../../types/plate/PlateStore").PlateStoreState<V, E>, import("@udecode/zustood").SetRecord<import("../../types/plate/PlateStore").PlateStoreState<V, E>> & {
    state: import("@udecode/zustood").SetImmerState<import("../../types/plate/PlateStore").PlateStoreState<V, E>>;
    mergeState: import("@udecode/zustood").MergeState<import("../../types/plate/PlateStore").PlateStoreState<V, E>>;
} & {
    resetEditor: () => void;
    incrementKey: (key: import("../../types/plate/PlateStore").PlateChangeKey) => void;
} & {
    redecorate: () => void;
}, {}>;
//# sourceMappingURL=usePlateStore.d.ts.map