import { Value } from '../../slate/editor/TEditor';
import { PlateEditor } from '../../types/plate/PlateEditor';
import { PlateChangeKey, PlateStoreState } from '../../types/plate/PlateStore';
export declare const createPlateStore: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(state?: Partial<PlateStoreState<V, E>>) => import("@udecode/zustood/dist/types").StoreApi<`plate-${string}`, PlateStoreState<V, E>, import("@udecode/zustood").SetRecord<PlateStoreState<V, E>> & {
    state: import("@udecode/zustood").SetImmerState<PlateStoreState<V, E>>;
    mergeState: import("@udecode/zustood").MergeState<PlateStoreState<V, E>>;
} & {
    /**
     * Set a new editor with plate.
     */
    resetEditor: () => void;
    incrementKey: (key: PlateChangeKey) => void;
} & {
    /**
     * Redecorate the editor.
     */
    redecorate: () => void;
}, {}>;
//# sourceMappingURL=createPlateStore.d.ts.map