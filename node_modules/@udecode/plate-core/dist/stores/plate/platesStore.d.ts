import { PlateProps } from '../../components/plate/Plate';
import { Value } from '../../slate/editor/TEditor';
import { PlateEditor } from '../../types/plate/PlateEditor';
import { PlatesStoreState, PlateStoreState } from '../../types/plate/PlateStore';
export declare const setPlateState: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(draft: Partial<PlateStoreState<V, E>>, state: PlateProps<V, E>) => Partial<PlateStoreState<V, E>>;
/**
 * Plates store.
 */
export declare const createPlatesStore: (initialState?: Partial<PlatesStoreState>) => import("@udecode/zustood/dist/types").StoreApi<"plate", PlatesStoreState<Value>, import("@udecode/zustood").SetRecord<PlatesStoreState<Value>> & {
    state: import("@udecode/zustood").SetImmerState<PlatesStoreState<Value>>;
    mergeState: import("@udecode/zustood").MergeState<PlatesStoreState<Value>>;
} & {
    /**
     * Set state by id.
     * If the store is not yet initialized, it will be initialized.
     * If the store is already set, it will be updated.
     */
    set: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(id: string, state?: PlateProps<V, E> | undefined) => void;
    /**
     * Remove state by id. Called by `Plate` on unmount.
     */
    unset: (id: string) => void;
}, {
    get(id: string): import("@udecode/zustood/dist/types").StoreApi<`plate-${string}`, PlateStoreState<Value, PlateEditor<Value>>, import("@udecode/zustood").SetRecord<PlateStoreState<Value, PlateEditor<Value>>> & {
        state: import("@udecode/zustood").SetImmerState<PlateStoreState<Value, PlateEditor<Value>>>;
        mergeState: import("@udecode/zustood").MergeState<PlateStoreState<Value, PlateEditor<Value>>>;
    } & {
        resetEditor: () => void;
        incrementKey: (key: import("../../types/plate/PlateStore").PlateChangeKey) => void;
    } & {
        redecorate: () => void;
    }, {}>;
    has(id?: string | string[] | undefined): boolean;
}>;
export declare const platesStore: import("@udecode/zustood/dist/types").StoreApi<"plate", PlatesStoreState<Value>, import("@udecode/zustood").SetRecord<PlatesStoreState<Value>> & {
    state: import("@udecode/zustood").SetImmerState<PlatesStoreState<Value>>;
    mergeState: import("@udecode/zustood").MergeState<PlatesStoreState<Value>>;
} & {
    /**
     * Set state by id.
     * If the store is not yet initialized, it will be initialized.
     * If the store is already set, it will be updated.
     */
    set: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(id: string, state?: PlateProps<V, E> | undefined) => void;
    /**
     * Remove state by id. Called by `Plate` on unmount.
     */
    unset: (id: string) => void;
}, {
    get(id: string): import("@udecode/zustood/dist/types").StoreApi<`plate-${string}`, PlateStoreState<Value, PlateEditor<Value>>, import("@udecode/zustood").SetRecord<PlateStoreState<Value, PlateEditor<Value>>> & {
        state: import("@udecode/zustood").SetImmerState<PlateStoreState<Value, PlateEditor<Value>>>;
        mergeState: import("@udecode/zustood").MergeState<PlateStoreState<Value, PlateEditor<Value>>>;
    } & {
        resetEditor: () => void;
        incrementKey: (key: import("../../types/plate/PlateStore").PlateChangeKey) => void;
    } & {
        redecorate: () => void;
    }, {}>;
    has(id?: string | string[] | undefined): boolean;
}>;
export declare const platesActions: import("@udecode/zustood").SetRecord<PlatesStoreState<Value>> & {
    state: import("@udecode/zustood").SetImmerState<PlatesStoreState<Value>>;
    mergeState: import("@udecode/zustood").MergeState<PlatesStoreState<Value>>;
} & {
    /**
     * Set state by id.
     * If the store is not yet initialized, it will be initialized.
     * If the store is already set, it will be updated.
     */
    set: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(id: string, state?: PlateProps<V, E> | undefined) => void;
    /**
     * Remove state by id. Called by `Plate` on unmount.
     */
    unset: (id: string) => void;
};
export declare const platesSelectors: import("@udecode/zustood").StoreApiGet<PlatesStoreState<Value>, {
    get(id: string): import("@udecode/zustood/dist/types").StoreApi<`plate-${string}`, PlateStoreState<Value, PlateEditor<Value>>, import("@udecode/zustood").SetRecord<PlateStoreState<Value, PlateEditor<Value>>> & {
        state: import("@udecode/zustood").SetImmerState<PlateStoreState<Value, PlateEditor<Value>>>;
        mergeState: import("@udecode/zustood").MergeState<PlateStoreState<Value, PlateEditor<Value>>>;
    } & {
        resetEditor: () => void;
        incrementKey: (key: import("../../types/plate/PlateStore").PlateChangeKey) => void;
    } & {
        redecorate: () => void;
    }, {}>;
    has(id?: string | string[] | undefined): boolean;
}>;
export declare const usePlatesSelectors: import("@udecode/zustood").StoreApiUse<PlatesStoreState<Value>, {
    get(id: string): import("@udecode/zustood/dist/types").StoreApi<`plate-${string}`, PlateStoreState<Value, PlateEditor<Value>>, import("@udecode/zustood").SetRecord<PlateStoreState<Value, PlateEditor<Value>>> & {
        state: import("@udecode/zustood").SetImmerState<PlateStoreState<Value, PlateEditor<Value>>>;
        mergeState: import("@udecode/zustood").MergeState<PlateStoreState<Value, PlateEditor<Value>>>;
    } & {
        resetEditor: () => void;
        incrementKey: (key: import("../../types/plate/PlateStore").PlateChangeKey) => void;
    } & {
        redecorate: () => void;
    }, {}>;
    has(id?: string | string[] | undefined): boolean;
}>;
export declare const getPlateActions: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(id?: string | undefined) => import("@udecode/zustood").SetRecord<PlateStoreState<V, E>> & {
    state: import("@udecode/zustood").SetImmerState<PlateStoreState<V, E>>;
    mergeState: import("@udecode/zustood").MergeState<PlateStoreState<V, E>>;
} & {
    resetEditor: () => void;
    incrementKey: (key: import("../../types/plate/PlateStore").PlateChangeKey) => void;
} & {
    redecorate: () => void;
};
export declare const getPlateSelectors: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(id?: string | undefined) => import("@udecode/zustood").StoreApiGet<PlateStoreState<V, E>, {}>;
export declare const usePlateSelectors: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(id?: string | undefined) => import("@udecode/zustood").GetRecord<PlateStoreState<V, E>>;
//# sourceMappingURL=platesStore.d.ts.map