import { Value } from '@udecode/slate';
import { PlateEditor } from '../types/PlateEditor';
export declare const KEY_INLINE_VOID = "inline-void";
/**
 * Merge and register all the inline types and void types from the plugins and options,
 * using `editor.isInline` and `editor.isVoid`
 */
export declare const withInlineVoid: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E) => E;
/**
 * @see {@link withInlineVoid}
 */
export declare const createInlineVoidPlugin: <OP = import("@udecode/utils").AnyObject, OV extends Value = Value, OE extends PlateEditor<OV> = PlateEditor<OV>>(override?: Partial<import("..").PlatePlugin<import("..").NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: import("..").OverrideByKey<OV, OE>) => import("..").PlatePlugin<import("..").NoInfer<OP>, OV, OE>;
//# sourceMappingURL=createInlineVoidPlugin.d.ts.map