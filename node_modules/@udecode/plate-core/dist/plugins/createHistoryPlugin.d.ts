import { TEditor, Value } from '../slate/editor/TEditor';
export declare const withTHistory: <V extends Value = Value, E extends TEditor<V> = TEditor<V>, EE extends E = E & Omit<import("slate").BaseEditor, "children" | "operations" | "marks" | "isInline" | "isVoid" | "normalizeNode" | "apply" | "getFragment" | "insertFragment" | "insertNode"> & {
    children: V;
    operations: import("..").TOperation<import("..").TDescendant>[];
    marks: Record<string, any> | null;
    isInline: <N extends import("..").TElement>(element: N) => boolean;
    isVoid: <N_1 extends import("..").TElement>(element: N_1) => boolean;
    normalizeNode: <N_2 extends import("..").TNode>(entry: import("..").TNodeEntry<N_2>) => void;
    apply: <N_3 extends import("..").TDescendant>(operation: import("..").TOperation<N_3>) => void;
    getFragment: <N_4 extends import("..").TDescendant>() => N_4[];
    insertFragment: <N_5 extends import("..").TDescendant>(fragment: N_5[]) => void;
    insertNode: <N_6 extends import("..").TDescendant>(node: N_6 | N_6[]) => void;
} & import("..").UnknownObject & Pick<import("slate-history").HistoryEditor, "history" | "undo" | "redo">>(editor: E) => EE;
/**
 * @see {@link withHistory}
 */
export declare const createHistoryPlugin: <OP = import("..").AnyObject, OV extends Value = Value, OE extends import("..").PlateEditor<OV> = import("..").PlateEditor<OV>>(override?: Partial<import("..").PlatePlugin<import("..").NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: import("..").OverrideByKey<OV, OE>) => import("..").PlatePlugin<import("..").NoInfer<OP>, OV, OE>;
//# sourceMappingURL=createHistoryPlugin.d.ts.map