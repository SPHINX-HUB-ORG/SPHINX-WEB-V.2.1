'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var plateCommon = require('@udecode/plate-common');
var slate = require('slate');

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var lib = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

/**
 * Constants.
 */

// We make this a function so it can be tested in describe block mocks with Jest.
var IS_MAC = () => typeof window != 'undefined' && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);

var MODIFIERS = {
  alt: 'altKey',
  control: 'ctrlKey',
  meta: 'metaKey',
  shift: 'shiftKey'
};

// We make this a function so it can be tested in describe block mocks with Jest.
var ALIASES = () => ({
  add: '+',
  break: 'pause',
  cmd: 'meta',
  command: 'meta',
  ctl: 'control',
  ctrl: 'control',
  del: 'delete',
  down: 'arrowdown',
  esc: 'escape',
  ins: 'insert',
  left: 'arrowleft',
  mod: IS_MAC() ? 'meta' : 'control',
  opt: 'alt',
  option: 'alt',
  return: 'enter',
  right: 'arrowright',
  space: ' ',
  spacebar: ' ',
  up: 'arrowup',
  win: 'meta',
  windows: 'meta'
});

var CODES = {
  backspace: 8,
  tab: 9,
  enter: 13,
  shift: 16,
  control: 17,
  alt: 18,
  pause: 19,
  capslock: 20,
  escape: 27,
  ' ': 32,
  pageup: 33,
  pagedown: 34,
  end: 35,
  home: 36,
  arrowleft: 37,
  arrowup: 38,
  arrowright: 39,
  arrowdown: 40,
  insert: 45,
  delete: 46,
  meta: 91,
  numlock: 144,
  scrolllock: 145,
  ';': 186,
  '=': 187,
  ',': 188,
  '-': 189,
  '.': 190,
  '/': 191,
  '`': 192,
  '[': 219,
  '\\': 220,
  ']': 221,
  '\'': 222
};

for (var f = 1; f < 20; f++) {
  CODES['f' + f] = 111 + f;
}

/**
 * Is hotkey?
 */

function isHotkey(hotkey, options, event) {
  if (options && !('byKey' in options)) {
    event = options;
    options = null;
  }

  if (!Array.isArray(hotkey)) {
    hotkey = [hotkey];
  }

  var array = hotkey.map(function (string) {
    return parseHotkey(string, options);
  });
  var check = function check(e) {
    return array.some(function (object) {
      return compareHotkey(object, e);
    });
  };
  var ret = event == null ? check : check(event);
  return ret;
}

function isCodeHotkey(hotkey, event) {
  return isHotkey(hotkey, event);
}

function isKeyHotkey(hotkey, event) {
  return isHotkey(hotkey, { byKey: true }, event);
}

/**
 * Parse.
 */

function parseHotkey(hotkey, options) {
  var byKey = options && options.byKey;
  var ret = {};

  // Special case to handle the `+` key since we use it as a separator.
  hotkey = hotkey.replace('++', '+add');
  var values = hotkey.split('+');
  var length = values.length;

  // Ensure that all the modifiers are set to false unless the hotkey has them.

  for (var k in MODIFIERS) {
    ret[MODIFIERS[k]] = false;
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var value = _step.value;

      var optional = value.endsWith('?') && value.length > 1;

      if (optional) {
        value = value.slice(0, -1);
      }

      var name = toKeyName(value);
      var modifier = MODIFIERS[name];

      if (length === 1 || !modifier) {
        if (byKey) {
          ret.key = name;
        } else {
          ret.which = toKeyCode(value);
        }
      }

      if (modifier) {
        ret[modifier] = optional ? null : true;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return ret;
}

/**
 * Compare.
 */

function compareHotkey(object, event) {
  for (var key in object) {
    var expected = object[key];
    var actual = void 0;

    if (expected == null) {
      continue;
    }

    if (key === 'key' && event.key != null) {
      actual = event.key.toLowerCase();
    } else if (key === 'which') {
      actual = expected === 91 && event.which === 93 ? 91 : event.which;
    } else {
      actual = event[key];
    }

    if (actual == null && expected === false) {
      continue;
    }

    if (actual !== expected) {
      return false;
    }
  }

  return true;
}

/**
 * Utils.
 */

function toKeyCode(name) {
  name = toKeyName(name);
  var code = CODES[name] || name.toUpperCase().charCodeAt(0);
  return code;
}

function toKeyName(name) {
  name = name.toLowerCase();
  name = ALIASES()[name] || name;
  return name;
}

/**
 * Export.
 */

exports.default = isHotkey;
exports.isHotkey = isHotkey;
exports.isCodeHotkey = isCodeHotkey;
exports.isKeyHotkey = isKeyHotkey;
exports.parseHotkey = parseHotkey;
exports.compareHotkey = compareHotkey;
exports.toKeyCode = toKeyCode;
exports.toKeyName = toKeyName;
});

var isHotkey = unwrapExports(lib);
lib.isHotkey;
lib.isCodeHotkey;
lib.isKeyHotkey;
lib.parseHotkey;
lib.compareHotkey;
lib.toKeyCode;
lib.toKeyName;

const onKeyDownAutoformat = (editor, {
  options: {
    rules,
    enableUndoOnDelete
  }
}) => e => {
  if (e.defaultPrevented) return false; // Abort quicky if hotKey was not pressed.

  if (!isHotkey('backspace', {
    byKey: true
  }, e)) return false;
  if (!rules) return false;
  if (!enableUndoOnDelete) return false; // Abort if selection is not collapsed i.e. we're not deleting single character.

  const {
    selection
  } = editor;
  if (!selection || !slate.Range.isCollapsed(selection)) return; // Get start and end point of selection.
  // For example: Text|
  //                  ^ cursor at the moment of pressing the hotkey
  // start, end will be equal to the location of the |

  const [start, end] = slate.Range.edges(selection); // Get location before the cursor.
  // before will be a point one character before | so:
  // Text|
  //    ^

  const before = plateCommon.getPointBefore(editor, end, {
    unit: 'character',
    distance: 1
  });
  if (!start) return false;
  if (!before) return false; // Abort if there doesn't exist a valid character to replace.

  const charRange = {
    anchor: before,
    focus: start
  };
  if (!charRange) return false; // Text|
  //    ^
  // Between ^ and | is t

  const char = plateCommon.getEditorString(editor, charRange);
  if (!char) return false;
  const matchers = [...rules].filter(rule => {
    const textRule = rule;

    if (textRule) {
      return textRule.mode === 'text' && textRule.format === char;
    }

    return false;
  }); // abort if no matching substitution is found.

  if (!matchers || matchers.length === 0) return false;
  e.preventDefault(); // remove the shorthand character.

  plateCommon.deleteBackward(editor, {
    unit: 'character'
  }); // put back the orignal characters. This could match to a single string or an array.

  const rule = matchers[0];

  if (rule && typeof rule.match === 'string') {
    plateCommon.insertText(editor, rule.match);
  } else {
    const matchArray = rule.match;

    if (matchArray && matchArray.length > 0) {
      plateCommon.insertText(editor, matchArray[0]);
    }
  }

  return true;
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

var isArray_1 = isArray;

/**
 * Casts `value` as an array if it's not one.
 *
 * @static
 * @memberOf _
 * @since 4.4.0
 * @category Lang
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast array.
 * @example
 *
 * _.castArray(1);
 * // => [1]
 *
 * _.castArray({ 'a': 1 });
 * // => [{ 'a': 1 }]
 *
 * _.castArray('abc');
 * // => ['abc']
 *
 * _.castArray(null);
 * // => [null]
 *
 * _.castArray(undefined);
 * // => [undefined]
 *
 * _.castArray();
 * // => []
 *
 * var array = [1, 2, 3];
 * console.log(_.castArray(array) === array);
 * // => true
 */
function castArray() {
  if (!arguments.length) {
    return [];
  }
  var value = arguments[0];
  return isArray_1(value) ? value : [value];
}

var castArray_1 = castArray;

const getMatchRange = ({
  match,
  trigger
}) => {
  let start;
  let end;

  if (typeof match === 'object') {
    start = match.start;
    end = match.end;
  } else {
    start = match;
    end = start.split('').reverse().join('');
  }

  const triggers = trigger ? castArray_1(trigger) : [end.slice(-1)];
  end = trigger ? end : end.slice(0, -1);
  return {
    start,
    end,
    triggers
  };
};

const autoformatBlock = (editor, {
  text,
  trigger,
  match: _match,
  type = plateCommon.ELEMENT_DEFAULT,
  allowSameTypeAbove = false,
  preFormat,
  format,
  triggerAtBlockStart = true
}) => {
  const matches = castArray_1(_match);

  for (const match of matches) {
    const {
      end,
      triggers
    } = getMatchRange({
      match: {
        start: '',
        end: match
      },
      trigger
    });
    if (!triggers.includes(text)) continue;
    let matchRange;

    if (triggerAtBlockStart) {
      matchRange = plateCommon.getRangeFromBlockStart(editor); // Don't autoformat if there is void nodes.

      const hasVoidNode = plateCommon.someNode(editor, {
        at: matchRange,
        match: n => plateCommon.isVoid(editor, n)
      });
      if (hasVoidNode) continue;
      const textFromBlockStart = plateCommon.getEditorString(editor, matchRange);
      if (end !== textFromBlockStart) continue;
    } else {
      matchRange = plateCommon.getRangeBefore(editor, editor.selection, {
        matchString: end
      });
      if (!matchRange) continue;
    }

    if (!allowSameTypeAbove) {
      // Don't autoformat if already in a block of the same type.
      const isBelowSameBlockType = plateCommon.someNode(editor, {
        match: {
          type
        }
      });
      if (isBelowSameBlockType) continue;
    } // if the trigger is only 1 char there is nothing to delete, so we'd delete unrelated text


    if (match.length > 1) {
      plateCommon.deleteText(editor, {
        at: matchRange
      });
    }

    if (preFormat) {
      preFormat(editor);
    }

    if (!format) {
      plateCommon.setElements(editor, {
        type
      }, {
        match: n => plateCommon.isBlock(editor, n)
      });
    } else {
      format(editor);
    }

    return true;
  }

  return false;
};

const isPreviousCharacterEmpty = (editor, at) => {
  const range = plateCommon.getRangeBefore(editor, at);

  if (range) {
    const text = plateCommon.getEditorString(editor, range);

    if (text) {
      const noWhiteSpaceRegex = new RegExp(`\\S+`);
      return !text.match(noWhiteSpaceRegex);
    }
  }

  return true;
};

const getMatchPoints = (editor, {
  start,
  end
}) => {
  const selection = editor.selection;
  let beforeEndMatchPoint = selection.anchor;

  if (end) {
    beforeEndMatchPoint = plateCommon.getPointBeforeLocation(editor, selection, {
      matchString: end
    });
    if (!beforeEndMatchPoint) return;
  }

  let afterStartMatchPoint;
  let beforeStartMatchPoint;

  if (start) {
    afterStartMatchPoint = plateCommon.getPointBeforeLocation(editor, beforeEndMatchPoint, {
      matchString: start,
      skipInvalid: true,
      afterMatch: true
    });
    if (!afterStartMatchPoint) return;
    beforeStartMatchPoint = plateCommon.getPointBeforeLocation(editor, beforeEndMatchPoint, {
      matchString: start,
      skipInvalid: true
    });
    if (!isPreviousCharacterEmpty(editor, beforeStartMatchPoint)) return;
  }

  return {
    afterStartMatchPoint,
    beforeStartMatchPoint,
    beforeEndMatchPoint
  };
};

const autoformatMark = (editor, {
  type,
  text,
  trigger,
  match: _match,
  ignoreTrim
}) => {
  if (!type) return false;
  const selection = editor.selection;
  const matches = castArray_1(_match);

  for (const match of matches) {
    const {
      start,
      end,
      triggers
    } = getMatchRange({
      match,
      trigger
    });
    if (!triggers.includes(text)) continue;
    const matched = getMatchPoints(editor, {
      start,
      end
    });
    if (!matched) continue;
    const {
      afterStartMatchPoint,
      beforeEndMatchPoint,
      beforeStartMatchPoint
    } = matched;
    const matchRange = {
      anchor: afterStartMatchPoint,
      focus: beforeEndMatchPoint
    };

    if (!ignoreTrim) {
      const matchText = plateCommon.getEditorString(editor, matchRange);
      if (matchText.trim() !== matchText) continue;
    } // delete end match


    if (end) {
      plateCommon.deleteText(editor, {
        at: {
          anchor: beforeEndMatchPoint,
          focus: selection.anchor
        }
      });
    }

    const marks = castArray_1(type); // add mark to the text between the matches

    plateCommon.select(editor, matchRange);
    marks.forEach(mark => {
      editor.addMark(mark, true);
    });
    plateCommon.collapseSelection(editor, {
      edge: 'end'
    });
    plateCommon.removeMark(editor, {
      key: marks,
      shouldChange: false
    });
    plateCommon.deleteText(editor, {
      at: {
        anchor: beforeStartMatchPoint,
        focus: afterStartMatchPoint
      }
    });
    return true;
  }

  return false;
};

const autoformatText = (editor, {
  text,
  match: _match,
  trigger,
  format
}) => {
  const selection = editor.selection;
  const matches = castArray_1(_match); // dup

  for (const match of matches) {
    const {
      start,
      end,
      triggers
    } = getMatchRange({
      match: Array.isArray(format) ? match : {
        start: '',
        end: match
      },
      trigger
    });
    if (!triggers.includes(text)) continue;
    const matched = getMatchPoints(editor, {
      start,
      end
    });
    if (!matched) continue;
    const {
      afterStartMatchPoint,
      beforeEndMatchPoint,
      beforeStartMatchPoint
    } = matched;

    if (end) {
      plateCommon.deleteText(editor, {
        at: {
          anchor: beforeEndMatchPoint,
          focus: selection.anchor
        }
      });
    }

    if (typeof format === 'function') {
      format(editor, matched);
    } else {
      const formatEnd = Array.isArray(format) ? format[1] : format;
      editor.insertText(formatEnd);

      if (beforeStartMatchPoint) {
        const formatStart = Array.isArray(format) ? format[0] : format;
        plateCommon.deleteText(editor, {
          at: {
            anchor: beforeStartMatchPoint,
            focus: afterStartMatchPoint
          }
        });
        plateCommon.insertText(editor, formatStart, {
          at: beforeStartMatchPoint
        });
      }
    }

    return true;
  }

  return false;
};

/**
 * Enables support for autoformatting actions.
 * Once a match rule is validated, it does not check the following rules.
 */
const withAutoformat = (editor, {
  options: {
    rules
  }
}) => {
  const {
    insertText
  } = editor;

  editor.insertText = text => {
    if (!plateCommon.isCollapsed(editor.selection)) return insertText(text);

    for (const rule of rules) {
      var _autoformatter$mode;

      const {
        mode = 'text',
        insertTrigger,
        query
      } = rule;
      if (query && !query(editor, { ...rule,
        text
      })) continue;
      const autoformatter = {
        block: autoformatBlock,
        mark: autoformatMark,
        text: autoformatText
      };

      if ((_autoformatter$mode = autoformatter[mode]) !== null && _autoformatter$mode !== void 0 && _autoformatter$mode.call(autoformatter, editor, { ...rule,
        text
      })) {
        return insertTrigger && insertText(text);
      }
    }

    insertText(text);
  };

  return editor;
};

const KEY_AUTOFORMAT = 'autoformat';
/**
 * @see {@link withAutoformat}
 */

const createAutoformatPlugin = plateCommon.createPluginFactory({
  key: KEY_AUTOFORMAT,
  withOverrides: withAutoformat,
  handlers: {
    onKeyDown: onKeyDownAutoformat
  },
  options: {
    rules: []
  }
});

const autoformatArrow = [{
  mode: 'text',
  match: '->',
  format: '→'
}, {
  mode: 'text',
  match: '<-',
  format: '←'
}, {
  mode: 'text',
  match: '=>',
  format: '⇒'
}, {
  mode: 'text',
  match: ['<=', '≤='],
  format: '⇐'
}];

const autoformatLegal = [{
  mode: 'text',
  match: ['(tm)', '(TM)'],
  format: '™'
}, {
  mode: 'text',
  match: ['(r)', '(R)'],
  format: '®'
}, {
  mode: 'text',
  match: ['(c)', '(C)'],
  format: '©'
}];
const autoformatLegalHtml = [{
  mode: 'text',
  match: '&trade;',
  format: '™'
}, {
  mode: 'text',
  match: '&reg;',
  format: '®'
}, {
  mode: 'text',
  match: '&copy;',
  format: '©'
}, {
  mode: 'text',
  match: '&sect;',
  format: '§'
}];

const autoformatPunctuation = [{
  mode: 'text',
  match: '--',
  format: '\u2014'
}, {
  mode: 'text',
  match: '...',
  format: '…'
}, {
  mode: 'text',
  match: '>>',
  format: '»'
}, {
  mode: 'text',
  match: '<<',
  format: '«'
}];

const autoformatSmartQuotes = [{
  mode: 'text',
  match: '"',
  format: ['“', '”']
}, {
  mode: 'text',
  match: "'",
  format: ['‘', '’']
}];

const autoformatComparison = [{
  mode: 'text',
  match: '!>',
  format: '≯'
}, {
  mode: 'text',
  match: '!<',
  format: '≮'
}, {
  mode: 'text',
  match: '>=',
  format: '≥'
}, {
  mode: 'text',
  match: '<=',
  format: '≤'
}, {
  mode: 'text',
  match: '!>=',
  format: '≱'
}, {
  mode: 'text',
  match: '!<=',
  format: '≰'
}];

const autoformatEquality = [{
  mode: 'text',
  match: '!=',
  format: '≠'
}, {
  mode: 'text',
  match: '==',
  format: '≡'
}, {
  mode: 'text',
  match: ['!==', '≠='],
  format: '≢'
}, {
  mode: 'text',
  match: '~=',
  format: '≈'
}, {
  mode: 'text',
  match: '!~=',
  format: '≉'
}];

const autoformatFraction = [{
  mode: 'text',
  match: '1/2',
  format: '½'
}, {
  mode: 'text',
  match: '1/3',
  format: '⅓'
}, {
  mode: 'text',
  match: '1/4',
  format: '¼'
}, {
  mode: 'text',
  match: '1/5',
  format: '⅕'
}, {
  mode: 'text',
  match: '1/6',
  format: '⅙'
}, {
  mode: 'text',
  match: '1/7',
  format: '⅐'
}, {
  mode: 'text',
  match: '1/8',
  format: '⅛'
}, {
  mode: 'text',
  match: '1/9',
  format: '⅑'
}, {
  mode: 'text',
  match: '1/10',
  format: '⅒'
}, {
  mode: 'text',
  match: '2/3',
  format: '⅔'
}, {
  mode: 'text',
  match: '2/5',
  format: '⅖'
}, {
  mode: 'text',
  match: '3/4',
  format: '¾'
}, {
  mode: 'text',
  match: '3/5',
  format: '⅗'
}, {
  mode: 'text',
  match: '3/8',
  format: '⅜'
}, {
  mode: 'text',
  match: '4/5',
  format: '⅘'
}, {
  mode: 'text',
  match: '5/6',
  format: '⅚'
}, {
  mode: 'text',
  match: '5/8',
  format: '⅝'
}, {
  mode: 'text',
  match: '7/8',
  format: '⅞'
}];

const autoformatDivision = [{
  mode: 'text',
  match: '//',
  format: '÷'
}];
const autoformatOperation = [{
  mode: 'text',
  match: '+-',
  format: '±'
}, {
  mode: 'text',
  match: '%%',
  format: '‰'
}, {
  mode: 'text',
  match: ['%%%', '‰%'],
  format: '‱'
}, ...autoformatDivision];

const autoformatSubscriptNumbers = [{
  mode: 'text',
  match: '~0',
  format: '₀'
}, {
  mode: 'text',
  match: '~1',
  format: '₁'
}, {
  mode: 'text',
  match: '~2',
  format: '₂'
}, {
  mode: 'text',
  match: '~3',
  format: '₃'
}, {
  mode: 'text',
  match: '~4',
  format: '₄'
}, {
  mode: 'text',
  match: '~5',
  format: '₅'
}, {
  mode: 'text',
  match: '~6',
  format: '₆'
}, {
  mode: 'text',
  match: '~7',
  format: '₇'
}, {
  mode: 'text',
  match: '~8',
  format: '₈'
}, {
  mode: 'text',
  match: '~9',
  format: '₉'
}];
const autoformatSubscriptSymbols = [{
  mode: 'text',
  match: '~+',
  format: '₊'
}, {
  mode: 'text',
  match: '~-',
  format: '₋'
}];

const autoformatSuperscriptNumbers = [{
  mode: 'text',
  match: '^0',
  format: '⁰'
}, {
  mode: 'text',
  match: '^1',
  format: '¹'
}, {
  mode: 'text',
  match: '^2',
  format: '²'
}, {
  mode: 'text',
  match: '^3',
  format: '³'
}, {
  mode: 'text',
  match: '^4',
  format: '⁴'
}, {
  mode: 'text',
  match: '^5',
  format: '⁵'
}, {
  mode: 'text',
  match: '^6',
  format: '⁶'
}, {
  mode: 'text',
  match: '^7',
  format: '⁷'
}, {
  mode: 'text',
  match: '^8',
  format: '⁸'
}, {
  mode: 'text',
  match: '^9',
  format: '⁹'
}];
const autoformatSuperscriptSymbols = [{
  mode: 'text',
  match: '^o',
  format: '°'
}, {
  mode: 'text',
  match: '^+',
  format: '⁺'
}, {
  mode: 'text',
  match: '^-',
  format: '⁻'
}];

const autoformatMath = [...autoformatComparison, ...autoformatEquality, ...autoformatOperation, ...autoformatFraction, ...autoformatSuperscriptSymbols, ...autoformatSubscriptSymbols, ...autoformatSuperscriptNumbers, ...autoformatSubscriptNumbers];

exports.KEY_AUTOFORMAT = KEY_AUTOFORMAT;
exports.autoformatArrow = autoformatArrow;
exports.autoformatBlock = autoformatBlock;
exports.autoformatComparison = autoformatComparison;
exports.autoformatDivision = autoformatDivision;
exports.autoformatEquality = autoformatEquality;
exports.autoformatFraction = autoformatFraction;
exports.autoformatLegal = autoformatLegal;
exports.autoformatLegalHtml = autoformatLegalHtml;
exports.autoformatMark = autoformatMark;
exports.autoformatMath = autoformatMath;
exports.autoformatOperation = autoformatOperation;
exports.autoformatPunctuation = autoformatPunctuation;
exports.autoformatSmartQuotes = autoformatSmartQuotes;
exports.autoformatSubscriptNumbers = autoformatSubscriptNumbers;
exports.autoformatSubscriptSymbols = autoformatSubscriptSymbols;
exports.autoformatSuperscriptNumbers = autoformatSuperscriptNumbers;
exports.autoformatSuperscriptSymbols = autoformatSuperscriptSymbols;
exports.autoformatText = autoformatText;
exports.createAutoformatPlugin = createAutoformatPlugin;
exports.getMatchPoints = getMatchPoints;
exports.getMatchRange = getMatchRange;
exports.isPreviousCharacterEmpty = isPreviousCharacterEmpty;
exports.onKeyDownAutoformat = onKeyDownAutoformat;
exports.withAutoformat = withAutoformat;
//# sourceMappingURL=index.js.map
