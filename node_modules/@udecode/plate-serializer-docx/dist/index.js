'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var plateCommon = require('@udecode/plate-common');
var plateHeading = require('@udecode/plate-heading');
var plateIndent = require('@udecode/plate-indent');
var plateIndentList = require('@udecode/plate-indent-list');
var plateMedia = require('@udecode/plate-media');
var plateParagraph = require('@udecode/plate-paragraph');

/**
 * Remove HTML nodes between comments in the next sibling after BR.
 */

const cleanDocxBrComments = rootNode => {
  plateCommon.traverseHtmlElements(rootNode, element => {
    if (element.tagName !== 'BR') {
      return true;
    }

    if (element.nextSibling && plateCommon.isHtmlComment(element.nextSibling) && element.nextSibling.data === '[if !supportLineBreakNewLine]') {
      plateCommon.removeHtmlNodesBetweenComments(element.nextSibling, '[if !supportLineBreakNewLine]', '[endif]');
    }

    return false;
  });
};

const isHtmlOpEmpty = element => element.nodeName === 'O:P' && element.textContent === plateCommon.NO_BREAK_SPACE;

const isHtmlElementEmpty = element => element.children.length === 1 && element.firstElementChild !== null && (isHtmlOpEmpty(element.firstElementChild) || isHtmlElementEmpty(element.firstElementChild));
/**
 * Remove paragraph innerHTML if its child is 'O:P' with NO_BREAK_SPACE.
 */


const cleanDocxEmptyParagraphs = rootNode => {
  plateCommon.traverseHtmlElements(rootNode, element => {
    if (element.tagName === 'P' && isHtmlElementEmpty(element)) {
      element.innerHTML = '';
    }

    return true;
  });
};

/**
 * Is element a docx footnote.
 */
const isDocxFootnote = element => {
  return element.tagName === 'SPAN' && element.classList.contains('MsoFootnoteReference');
};

/**
 * Gets "4" from "[4]", "A" from "[A]", etc.
 */

const extractFootnoteNumber = footnote => {
  return (footnote.textContent || '').trim().replace(/[[\]]/g, '');
};
/**
 * Replace docx footnotes with sup element.
 */


const cleanDocxFootnotes = rootNode => {
  plateCommon.traverseHtmlElements(rootNode, element => {
    if (isDocxFootnote(element)) {
      const footnoteReplacement = document.createElement('sup');
      footnoteReplacement.textContent = extractFootnoteNumber(element);

      if (element.parentElement) {
        element.parentElement.replaceChild(footnoteReplacement, element);
      }

      return true;
    }

    return true;
  });
};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var assertString_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = assertString;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function assertString(input) {
  var isString = typeof input === 'string' || input instanceof String;

  if (!isString) {
    var invalidType = _typeof(input);

    if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;
    throw new TypeError("Expected a string but received a ".concat(invalidType));
  }
}

module.exports = exports.default;
module.exports.default = exports.default;
});

unwrapExports(assertString_1);

var merge_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = merge;

function merge() {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaults = arguments.length > 1 ? arguments[1] : undefined;

  for (var key in defaults) {
    if (typeof obj[key] === 'undefined') {
      obj[key] = defaults[key];
    }
  }

  return obj;
}

module.exports = exports.default;
module.exports.default = exports.default;
});

unwrapExports(merge_1);

var isFQDN_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isFQDN;

var _assertString = _interopRequireDefault(assertString_1);

var _merge = _interopRequireDefault(merge_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var default_fqdn_options = {
  require_tld: true,
  allow_underscores: false,
  allow_trailing_dot: false,
  allow_numeric_tld: false,
  allow_wildcard: false
};

function isFQDN(str, options) {
  (0, _assertString.default)(str);
  options = (0, _merge.default)(options, default_fqdn_options);
  /* Remove the optional trailing dot before checking validity */

  if (options.allow_trailing_dot && str[str.length - 1] === '.') {
    str = str.substring(0, str.length - 1);
  }
  /* Remove the optional wildcard before checking validity */


  if (options.allow_wildcard === true && str.indexOf('*.') === 0) {
    str = str.substring(2);
  }

  var parts = str.split('.');
  var tld = parts[parts.length - 1];

  if (options.require_tld) {
    // disallow fqdns without tld
    if (parts.length < 2) {
      return false;
    }

    if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
      return false;
    } // disallow spaces


    if (/\s/.test(tld)) {
      return false;
    }
  } // reject numeric TLDs


  if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
    return false;
  }

  return parts.every(function (part) {
    if (part.length > 63) {
      return false;
    }

    if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
      return false;
    } // disallow full-width chars


    if (/[\uff01-\uff5e]/.test(part)) {
      return false;
    } // disallow parts starting or ending with hyphen


    if (/^-|-$/.test(part)) {
      return false;
    }

    if (!options.allow_underscores && /_/.test(part)) {
      return false;
    }

    return true;
  });
}

module.exports = exports.default;
module.exports.default = exports.default;
});

unwrapExports(isFQDN_1);

var isIP_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isIP;

var _assertString = _interopRequireDefault(assertString_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
11.3.  Examples

   The following addresses

             fe80::1234 (on the 1st link of the node)
             ff02::5678 (on the 5th link of the node)
             ff08::9abc (on the 10th organization of the node)

   would be represented as follows:

             fe80::1234%1
             ff02::5678%5
             ff08::9abc%10

   (Here we assume a natural translation from a zone index to the
   <zone_id> part, where the Nth zone of any scope is translated into
   "N".)

   If we use interface names as <zone_id>, those addresses could also be
   represented as follows:

            fe80::1234%ne0
            ff02::5678%pvc1.3
            ff08::9abc%interface10

   where the interface "ne0" belongs to the 1st link, "pvc1.3" belongs
   to the 5th link, and "interface10" belongs to the 10th organization.
 * * */
var IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
var IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';
var IPv6AddressRegExp = new RegExp('^(' + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ')(%[0-9a-zA-Z-.:]{1,})?$');

function isIP(str) {
  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  (0, _assertString.default)(str);
  version = String(version);

  if (!version) {
    return isIP(str, 4) || isIP(str, 6);
  }

  if (version === '4') {
    if (!IPv4AddressRegExp.test(str)) {
      return false;
    }

    var parts = str.split('.').sort(function (a, b) {
      return a - b;
    });
    return parts[3] <= 255;
  }

  if (version === '6') {
    return !!IPv6AddressRegExp.test(str);
  }

  return false;
}

module.exports = exports.default;
module.exports.default = exports.default;
});

unwrapExports(isIP_1);

var isURL_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isURL;

var _assertString = _interopRequireDefault(assertString_1);

var _isFQDN = _interopRequireDefault(isFQDN_1);

var _isIP = _interopRequireDefault(isIP_1);

var _merge = _interopRequireDefault(merge_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/*
options for isURL method

require_protocol - if set as true isURL will return false if protocol is not present in the URL
require_valid_protocol - isURL will check if the URL's protocol is present in the protocols option
protocols - valid protocols can be modified with this option
require_host - if set as false isURL will not check if host is present in the URL
require_port - if set as true isURL will check if port is present in the URL
allow_protocol_relative_urls - if set as true protocol relative URLs will be allowed
validate_length - if set as false isURL will skip string length validation (IE maximum is 2083)

*/
var default_url_options = {
  protocols: ['http', 'https', 'ftp'],
  require_tld: true,
  require_protocol: false,
  require_host: true,
  require_port: false,
  require_valid_protocol: true,
  allow_underscores: false,
  allow_trailing_dot: false,
  allow_protocol_relative_urls: false,
  allow_fragments: true,
  allow_query_components: true,
  validate_length: true
};
var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
}

function checkHost(host, matches) {
  for (var i = 0; i < matches.length; i++) {
    var match = matches[i];

    if (host === match || isRegExp(match) && match.test(host)) {
      return true;
    }
  }

  return false;
}

function isURL(url, options) {
  (0, _assertString.default)(url);

  if (!url || /[\s<>]/.test(url)) {
    return false;
  }

  if (url.indexOf('mailto:') === 0) {
    return false;
  }

  options = (0, _merge.default)(options, default_url_options);

  if (options.validate_length && url.length >= 2083) {
    return false;
  }

  if (!options.allow_fragments && url.includes('#')) {
    return false;
  }

  if (!options.allow_query_components && (url.includes('?') || url.includes('&'))) {
    return false;
  }

  var protocol, auth, host, hostname, port, port_str, split, ipv6;
  split = url.split('#');
  url = split.shift();
  split = url.split('?');
  url = split.shift();
  split = url.split('://');

  if (split.length > 1) {
    protocol = split.shift().toLowerCase();

    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
      return false;
    }
  } else if (options.require_protocol) {
    return false;
  } else if (url.substr(0, 2) === '//') {
    if (!options.allow_protocol_relative_urls) {
      return false;
    }

    split[0] = url.substr(2);
  }

  url = split.join('://');

  if (url === '') {
    return false;
  }

  split = url.split('/');
  url = split.shift();

  if (url === '' && !options.require_host) {
    return true;
  }

  split = url.split('@');

  if (split.length > 1) {
    if (options.disallow_auth) {
      return false;
    }

    if (split[0] === '') {
      return false;
    }

    auth = split.shift();

    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
      return false;
    }

    var _auth$split = auth.split(':'),
        _auth$split2 = _slicedToArray(_auth$split, 2),
        user = _auth$split2[0],
        password = _auth$split2[1];

    if (user === '' && password === '') {
      return false;
    }
  }

  hostname = split.join('@');
  port_str = null;
  ipv6 = null;
  var ipv6_match = hostname.match(wrapped_ipv6);

  if (ipv6_match) {
    host = '';
    ipv6 = ipv6_match[1];
    port_str = ipv6_match[2] || null;
  } else {
    split = hostname.split(':');
    host = split.shift();

    if (split.length) {
      port_str = split.join(':');
    }
  }

  if (port_str !== null && port_str.length > 0) {
    port = parseInt(port_str, 10);

    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
      return false;
    }
  } else if (options.require_port) {
    return false;
  }

  if (options.host_whitelist) {
    return checkHost(host, options.host_whitelist);
  }

  if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {
    return false;
  }

  host = host || ipv6;

  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
    return false;
  }

  return true;
}

module.exports = exports.default;
module.exports.default = exports.default;
});

var isURL = unwrapExports(isURL_1);

const getRtfImageHex = imageData => {
  const [, bliptagData = ''] = imageData.split('bliptag');
  const bracketSplit = bliptagData.split('}');

  if (bracketSplit.length < 2) {
    return null;
  }

  const [beforeBracket, afterBracket] = bracketSplit;

  if (bracketSplit.length > 2 && beforeBracket.includes('blipuid')) {
    return afterBracket.split(plateCommon.SPACE).join('');
  }

  const spaceSplit = beforeBracket.split(plateCommon.SPACE);

  if (spaceSplit.length < 2) {
    return null;
  }

  return spaceSplit.slice(1).join('');
};

const getRtfImageMimeType = imageData => {
  const [bliptagMeta] = imageData.split('bliptag');

  if (bliptagMeta.includes('pngblip')) {
    return 'image/png';
  }

  if (bliptagMeta.includes('jpegblip')) {
    return 'image/jpeg';
  }

  return null;
};

const END_OF_ID_SEQUENCE_CHARACTERS = ['\\', '{', plateCommon.CARRIAGE_RETURN, plateCommon.LINE_FEED, plateCommon.SPACE];
const getRtfImageSpid = (imageData, spidPrefix) => {
  const indexes = END_OF_ID_SEQUENCE_CHARACTERS.map(character => imageData.indexOf(character));
  const foundIndexes = indexes.filter(index => index !== -1);
  const idLength = Math.min(imageData.length, ...foundIndexes);
  const id = imageData.substring(0, idLength);
  return id ? `${spidPrefix}${id}` : null;
};

const getRtfImagesByType = (rtf, spidPrefix, type) => {
  const [, ...images] = rtf.split(type);
  return images.reduce((rtfImages, image) => {
    const [, imageData = ''] = image.split('shplid');
    const spid = getRtfImageSpid(imageData, spidPrefix);
    const mimeType = getRtfImageMimeType(imageData);
    const hex = getRtfImageHex(imageData);

    if (spid && mimeType && hex) {
      rtfImages.push({
        hex,
        mimeType,
        spid
      });
    }

    return rtfImages;
  }, []);
};

const getRtfImagesMap = rtf => {
  const rtfImagesMap = {};
  const shppictRtfImages = getRtfImagesByType(rtf, 'i', '\\shppict');

  for (const shppictRtfImage of shppictRtfImages) {
    rtfImagesMap[shppictRtfImage.spid] = shppictRtfImage;
  }

  const shpRtfImages = getRtfImagesByType(rtf, 's', '\\shp');

  for (const shpRtfImage of shpRtfImages) {
    rtfImagesMap[shpRtfImage.spid] = shpRtfImage;
  }

  return rtfImagesMap;
};

const getVShapes = document => {
  const comments = plateCommon.getHtmlComments(document);
  return comments.reduce((vShapesMap, comment) => {
    try {
      const xmlDocument = new DOMParser().parseFromString(comment, 'text/html');
      const vShapes = Array.from(xmlDocument.getElementsByTagName('V:SHAPE'));
      vShapes.forEach(vShape => {
        const {
          id
        } = vShape;
        const spid = vShape.getAttribute('o:spid');

        if (typeof id === 'string' && typeof spid === 'string') {
          vShapesMap[id] = spid;
        }
      });
    } catch (error) {// Cannot parse as XML, we're not interested in this comment
    }

    return vShapesMap;
  }, {});
};

const normalizeSpid = spid => {
  const [,, id] = spid.split('_');
  return id;
};

const getVShapeSpid = (document, element) => {
  if (element.tagName === 'IMG') {
    const vShapeId = element.getAttribute('v:shapes');
    const vShapes = getVShapes(document);

    if (!vShapeId) {
      return null;
    }

    const vShapeSpid = vShapes[vShapeId];

    if (vShapeSpid) {
      return normalizeSpid(vShapeSpid);
    }

    if (element.parentElement && element.parentElement.parentElement && element.parentElement.parentElement.innerHTML.indexOf('msEquation') >= 0) {
      return null;
    }

    return normalizeSpid(vShapeId);
  }

  if (!element.parentElement) {
    return null;
  }

  const spid = element.parentElement.getAttribute('o:spid');

  if (spid) {
    return normalizeSpid(spid);
  }

  return spid;
};

/**
 * Clean docx image elements.
 */

const cleanDocxImageElements = (document, rtf, rootNode) => {
  if (!rtf) {
    return;
  }

  plateCommon.traverseHtmlElements(rootNode, element => {
    if (!['IMG', 'V:IMAGEDATA'].includes(element.tagName)) {
      return true;
    }

    if (element.tagName === 'IMG') {
      const src = element.getAttribute('src');

      if (!src || !src.startsWith('file://')) {
        return true;
      }

      const alt = element.getAttribute('alt');

      if (typeof alt === 'string' && isURL(alt, {
        require_protocol: true
      })) {
        element.setAttribute('src', alt);
        return true;
      }
    }

    const vShapeSpid = getVShapeSpid(document, element);

    if (!vShapeSpid) {
      return true;
    }

    const rtfImagesMap = getRtfImagesMap(rtf);
    const rtfImage = rtfImagesMap[vShapeSpid];

    if (!rtfImage) {
      // We fould some kind of vshape (perhaps a drawing) that we don't know
      // how to recover from RTF. So we just skip it.
      element.remove();
      return true;
    }

    const dataUri = `data:${rtfImage.mimeType};base64,${plateCommon.hexToBase64(rtfImage.hex)}`;

    if (element.tagName === 'IMG') {
      element.setAttribute('src', dataUri);
    } else if (element.parentNode && element.parentNode.parentNode) {
      const imageElement = document.createElement('img');
      imageElement.setAttribute('src', dataUri);
      element.parentNode.parentNode.replaceChild(imageElement, element.parentNode);
    }

    return true;
  });
};

/**
 * Clean elements style mso-list to mso-list:Ignore
 */

const cleanDocxListElements = rootNode => {
  plateCommon.traverseHtmlElements(rootNode, element => {
    const styleAttribute = element.getAttribute('style');

    if (styleAttribute) {
      element.setAttribute('style', styleAttribute.replace(/mso-list:\s*Ignore/gim, 'mso-list:Ignore'));
    }

    return true;
  });
};

const getDocxListContentHtml = rootElement => {
  const clonedElement = rootElement.cloneNode(true);
  plateCommon.removeHtmlNodesBetweenComments(clonedElement, '[if !supportLists]', '[endif]');
  plateCommon.traverseHtmlElements(clonedElement, element => {
    const styleAttribute = element.getAttribute('style');

    if (styleAttribute === 'mso-list:Ignore') {
      element.remove();
    }

    return true;
  });
  return clonedElement.innerHTML;
};

const getDocxListIndent = element => {
  const styleAttribute = element.getAttribute('style') || '';
  const matches = styleAttribute.match(/level(\d+)/im);

  if (matches && matches.length >= 1) {
    const [, level] = matches;
    return parseInt(level, 10);
  }

  return 1;
};

const isDocxBookmark = element => {
  const styleAttribute = element.getAttribute('style');
  return (styleAttribute || '').startsWith('mso-bookmark') && !element.textContent;
};

const isDocxList = element => {
  const styleAttribute = element.getAttribute('style');

  if (!styleAttribute) {
    return false;
  }

  const hasMsoListInStyle = /mso-list:\s*l/gim.test(styleAttribute);

  if (!hasMsoListInStyle) {
    return false;
  }

  const hasMsoListIgnoreChild = Boolean(element.querySelector('[style="mso-list:Ignore"]'));

  if (hasMsoListIgnoreChild) {
    return true;
  }

  return element.outerHTML.includes('<!--[if !supportLists]-->');
};

const getDocxListNode = element => {
  return element.querySelector('[style="mso-list:Ignore"]') || element.querySelector('span[lang]');
};

const isDocxOl = element => {
  const listNode = getDocxListNode(element);

  if (!listNode) {
    return false;
  }

  return plateCommon.isOlSymbol(listNode.textContent || '');
};

const docxListToList = element => {
  const listLevel = getDocxListIndent(element);
  let listHtml = '';
  let nextSibling = element;

  while (nextSibling) {
    if (isDocxBookmark(nextSibling)) {
      nextSibling = nextSibling.nextElementSibling;
      continue;
    }

    if (!isDocxList(nextSibling)) {
      break;
    }

    const nextListLevel = getDocxListIndent(nextSibling);

    if (nextListLevel < listLevel) {
      // Lower level found. Current list is done.
      break;
    }

    if (nextListLevel > listLevel) {
      const nestedList = docxListToList(nextSibling);

      if (nestedList.list) {
        listHtml += nestedList.list.outerHTML;
      }

      nextSibling = nestedList.nextSibling;
      continue;
    }

    listHtml += `<li>${getDocxListContentHtml(nextSibling)}</li>`;
    const currentElement = nextSibling;
    nextSibling = currentElement.nextElementSibling;
    currentElement.remove();
  }

  const listTagName = isDocxOl(element) ? 'ol' : 'ul';
  const list = plateCommon.parseHtmlElement(`<${listTagName}>${listHtml}</${listTagName}>`);
  return {
    list,
    nextSibling
  };
};

const cleanDocxListElementsToList = rootNode => {
  plateCommon.traverseHtmlElements(rootNode, element => {
    const styleAttribute = element.getAttribute('style');

    if (styleAttribute) {
      element.setAttribute('style', styleAttribute.replace(/mso-list:\s*Ignore/gim, 'mso-list:Ignore'));
    }

    return true;
  });
  plateCommon.traverseHtmlElements(rootNode, element => {
    if (!isDocxList(element)) {
      return true;
    }

    const {
      parentElement,
      previousSibling
    } = element;

    if (!parentElement) {
      return true;
    }

    const {
      list
    } = docxListToList(element);

    if (!list) {
      return true;
    }

    const beforeElement = previousSibling ? previousSibling.nextSibling : parentElement.firstChild;

    if (beforeElement) {
      parentElement.insertBefore(list, beforeElement);
    } else {
      parentElement.appendChild(list);
    }

    return false;
  });
};

/**
 * Replace p.MsoQuote elements with blockquote.
 */

const cleanDocxQuotes = rootNode => {
  plateCommon.traverseHtmlElements(rootNode, element => {
    if (element.parentNode && element.tagName === 'P' && element.classList.contains('MsoQuote')) {
      plateCommon.replaceTagName(element, 'blockquote');
    }

    return true;
  });
};

const generateSpaces = count => Array.from({
  length: count
}, () => plateCommon.SPACE).join('');
const generateTabs = count => Array.from({
  length: count
}, () => plateCommon.TAB).join('');

/**
 * Replace the element with spaces if its style includes 'mso-spacerun: yes'.
 */

const cleanDocxSpacerun = element => {
  const styleAttribute = element.getAttribute('style');

  if (!(styleAttribute && ['mso-spacerun:yes', 'mso-spacerun: yes'].includes(styleAttribute))) {
    return;
  }

  const spacesCount = (element.textContent || '').length;
  const replacementNode = document.createTextNode(generateSpaces(spacesCount));

  if (element.parentNode) {
    element.parentNode.replaceChild(replacementNode, element);
  }
};

/**
 * Replace element with tabs if its style starts with 'mso-tab-count'.
 */

const cleanDocxTabCount = element => {
  const styleAttribute = element.getAttribute('style') || '';

  if (!styleAttribute.startsWith('mso-tab-count:')) {
    return;
  }

  const [, countString] = styleAttribute.split(':');
  const count = parseInt(countString, 10);
  const replacementNode = document.createTextNode(generateTabs(count));

  if (element.parentNode) {
    element.parentNode.replaceChild(replacementNode, element);
  }
};

/**
 * Clean docx spaceruns and tab counts.
 */

const cleanDocxSpans = rootNode => {
  plateCommon.traverseHtmlElements(rootNode, element => {
    if (element.nodeName !== 'SPAN') {
      return true;
    }

    cleanDocxSpacerun(element);
    cleanDocxTabCount(element);
    return true;
  });
};

const DOCX_INDENT_STEP = 36;
/**
 * Convert a string to floating number.
 * Negative values are ignored.
 * Values starting by "." are replaced by "0."
 */

const extractNumber = str => {
  if (str[0] === '-') return 0;
  let number = str.replace(/[^\d.,]+/, '');

  if (number[0] === '.') {
    number = `0${number}`;
  }

  return parseFloat(number);
};

const styleToIndent = (style, indentStep = DOCX_INDENT_STEP) => {
  const indent = extractNumber(style);

  if (indent) {
    if (style.includes('in')) {
      return Math.round(indent * 72 / indentStep);
    }

    return Math.round(indent / indentStep);
  }

  return 0;
};

const getDocxSpacing = (element, cssProp) => {
  const el = element;
  const spacing = el.style[cssProp];
  if (!spacing) return 0;
  return styleToIndent(spacing) || 0;
};
const getDocxIndent = element => getDocxSpacing(element, 'marginLeft');
const getDocxTextIndent = element => getDocxSpacing(element, 'textIndent');

const getTextListStyleType = text => {
  var _text$match, _text$match2, _text$match3, _text$match4, _text$match5;

  text = text.trimStart();

  if ((_text$match = text.match(/^\d+[\\.]/)) !== null && _text$match !== void 0 && _text$match[0]) {
    if (text[0] === '0') {
      return plateIndentList.ListStyleType.DecimalLeadingZero;
    }

    return plateIndentList.ListStyleType.Decimal;
  }

  if ((_text$match2 = text.match(/^[ivmcldx]+\./)) !== null && _text$match2 !== void 0 && _text$match2[0]) {
    return plateIndentList.ListStyleType.LowerRoman;
  }

  if ((_text$match3 = text.match(/^[a-z]+\./)) !== null && _text$match3 !== void 0 && _text$match3[0]) {
    return plateIndentList.ListStyleType.LowerAlpha;
  }

  if ((_text$match4 = text.match(/^[IVMCLDX]+\./)) !== null && _text$match4 !== void 0 && _text$match4[0]) {
    return plateIndentList.ListStyleType.UpperRoman;
  }

  if ((_text$match5 = text.match(/^[A-Z]+\./)) !== null && _text$match5 !== void 0 && _text$match5[0]) {
    return plateIndentList.ListStyleType.UpperAlpha;
  }
};

/**
 * Check if the element contains docx content.
 * True if one element has:
 * - style including 'mso-'
 * - className including 'Mso'
 */

const isDocxContent = body => {
  let result = false;
  plateCommon.traverseHtmlElements(body, element => {
    const styleAttribute = element.getAttribute('style') || '';
    const classList = Array.from(element.classList);
    const isMsoElement = styleAttribute.includes('mso-') || classList.some(className => className.startsWith('Mso'));
    result = result || isMsoElement;
    return !result;
  });
  return result;
};

const cleanDocx = (html, rtf) => {
  const document = new DOMParser().parseFromString(plateCommon.preCleanHtml(html), 'text/html');
  const {
    body
  } = document;

  if (!rtf && !isDocxContent(body)) {
    return html;
  }

  cleanDocxFootnotes(body);
  cleanDocxImageElements(document, rtf, body);
  plateCommon.cleanHtmlEmptyElements(body);
  cleanDocxEmptyParagraphs(body);
  cleanDocxQuotes(body);
  cleanDocxSpans(body);
  plateCommon.cleanHtmlTextNodes(body);
  cleanDocxBrComments(body);
  plateCommon.cleanHtmlBrElements(body);
  plateCommon.cleanHtmlLinkElements(body);
  plateCommon.cleanHtmlFontElements(body);
  cleanDocxListElements(body);
  plateCommon.copyBlockMarksToSpanChild(body);
  return plateCommon.postCleanHtml(body.innerHTML);
};

const KEY_DESERIALIZE_DOCX = 'deserializeDocx';

const getListNode = type => element => {
  const node = {
    type
  };

  if (isDocxList(element)) {
    var _element$textContent, _getTextListStyleType;

    node[plateIndent.KEY_INDENT] = getDocxListIndent(element);
    const text = (_element$textContent = element.textContent) !== null && _element$textContent !== void 0 ? _element$textContent : '';
    node[plateIndentList.KEY_LIST_STYLE_TYPE] = (_getTextListStyleType = getTextListStyleType(text)) !== null && _getTextListStyleType !== void 0 ? _getTextListStyleType : plateIndentList.ListStyleType.Disc;
    element.innerHTML = getDocxListContentHtml(element);
  } else {
    const indent = getDocxIndent(element);

    if (indent) {
      node[plateIndent.KEY_INDENT] = indent;
    }

    const textIndent = getDocxTextIndent(element);

    if (textIndent) {
      node[plateIndent.KEY_TEXT_INDENT] = textIndent;
    }
  }

  return node;
};

const KEYS = [plateParagraph.ELEMENT_PARAGRAPH, plateHeading.ELEMENT_H1, plateHeading.ELEMENT_H2, plateHeading.ELEMENT_H3, plateHeading.ELEMENT_H4, plateHeading.ELEMENT_H5, plateHeading.ELEMENT_H6];
const overrideByKey = {};
KEYS.forEach(key => {
  overrideByKey[key] = {
    then: (editor, {
      type
    }) => ({
      deserializeHtml: {
        getNode: getListNode(type)
      }
    })
  };
});
const createDeserializeDocxPlugin = plateCommon.createPluginFactory({
  key: KEY_DESERIALIZE_DOCX,
  inject: {
    pluginsByKey: {
      [plateCommon.KEY_DESERIALIZE_HTML]: {
        editor: {
          insertData: {
            transformData: (data, {
              dataTransfer
            }) => {
              const rtf = dataTransfer.getData('text/rtf');
              return cleanDocx(data, rtf);
            }
          }
        }
      }
    }
  },
  overrideByKey: { ...overrideByKey,
    [plateMedia.ELEMENT_IMAGE]: {
      editor: {
        insertData: {
          query: ({
            dataTransfer
          }) => {
            const data = dataTransfer.getData('text/html');
            const {
              body
            } = new DOMParser().parseFromString(data, 'text/html');
            return !isDocxContent(body);
          }
        }
      }
    }
  }
});

exports.KEY_DESERIALIZE_DOCX = KEY_DESERIALIZE_DOCX;
exports.cleanDocx = cleanDocx;
exports.cleanDocxBrComments = cleanDocxBrComments;
exports.cleanDocxEmptyParagraphs = cleanDocxEmptyParagraphs;
exports.cleanDocxFootnotes = cleanDocxFootnotes;
exports.cleanDocxImageElements = cleanDocxImageElements;
exports.cleanDocxListElements = cleanDocxListElements;
exports.cleanDocxListElementsToList = cleanDocxListElementsToList;
exports.cleanDocxQuotes = cleanDocxQuotes;
exports.cleanDocxSpacerun = cleanDocxSpacerun;
exports.cleanDocxSpans = cleanDocxSpans;
exports.cleanDocxTabCount = cleanDocxTabCount;
exports.createDeserializeDocxPlugin = createDeserializeDocxPlugin;
exports.docxListToList = docxListToList;
exports.generateSpaces = generateSpaces;
exports.generateTabs = generateTabs;
exports.getDocxIndent = getDocxIndent;
exports.getDocxListContentHtml = getDocxListContentHtml;
exports.getDocxListIndent = getDocxListIndent;
exports.getDocxListNode = getDocxListNode;
exports.getDocxSpacing = getDocxSpacing;
exports.getDocxTextIndent = getDocxTextIndent;
exports.getRtfImageHex = getRtfImageHex;
exports.getRtfImageMimeType = getRtfImageMimeType;
exports.getRtfImageSpid = getRtfImageSpid;
exports.getRtfImagesByType = getRtfImagesByType;
exports.getRtfImagesMap = getRtfImagesMap;
exports.getTextListStyleType = getTextListStyleType;
exports.getVShapeSpid = getVShapeSpid;
exports.getVShapes = getVShapes;
exports.isDocxBookmark = isDocxBookmark;
exports.isDocxContent = isDocxContent;
exports.isDocxFootnote = isDocxFootnote;
exports.isDocxList = isDocxList;
exports.isDocxOl = isDocxOl;
//# sourceMappingURL=index.js.map
