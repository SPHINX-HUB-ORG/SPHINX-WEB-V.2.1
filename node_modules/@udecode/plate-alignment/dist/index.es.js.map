{"version":3,"file":"index.es.js","sources":["../src/createAlignPlugin.ts","../src/transforms/setAlign.ts"],"sourcesContent":["import {\n  createPluginFactory,\n  ELEMENT_DEFAULT,\n  getPluginType,\n  mapInjectPropsToPlugin,\n} from '@udecode/plate-common';\n\nexport const KEY_ALIGN = 'align';\n\n/**\n * Creates a plugin that adds alignment functionality to the editor.\n */\nexport const createAlignPlugin = createPluginFactory({\n  key: KEY_ALIGN,\n  then: (editor) => ({\n    inject: {\n      props: {\n        nodeKey: KEY_ALIGN,\n        defaultNodeValue: 'left',\n        styleKey: 'textAlign',\n        validNodeValues: ['left', 'center', 'right', 'justify'],\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n      },\n    },\n    then: (_, plugin) =>\n      mapInjectPropsToPlugin(editor, plugin, {\n        deserializeHtml: {\n          getNode: (el, node) => {\n            if (el.style.textAlign) {\n              node[plugin.key] = el.style.textAlign;\n            }\n          },\n        },\n      }),\n  }),\n});\n","import {\n  ENode,\n  getPluginInjectProps,\n  isBlock,\n  PlateEditor,\n  PlatePluginKey,\n  setElements,\n  SetNodesOptions,\n  TNodeMatch,\n  unsetNodes,\n  Value,\n} from '@udecode/plate-common';\nimport { KEY_ALIGN } from '../createAlignPlugin';\nimport { Alignment } from '../types';\n\nexport const setAlign = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    key = KEY_ALIGN,\n    value,\n    setNodesOptions,\n  }: { value: Alignment; setNodesOptions?: SetNodesOptions<V> } & PlatePluginKey\n) => {\n  const { validTypes, defaultNodeValue, nodeKey } = getPluginInjectProps(\n    editor,\n    key\n  );\n\n  const match: TNodeMatch<ENode<Value>> = (n) => {\n    return (\n      isBlock(editor, n) &&\n      !!validTypes &&\n      validTypes.includes(n.type as string)\n    );\n  };\n\n  if (value === defaultNodeValue) {\n    unsetNodes(editor, nodeKey!, {\n      match,\n      ...setNodesOptions,\n    });\n  } else {\n    setElements(\n      editor,\n      { [nodeKey!]: value },\n      {\n        match: match as any,\n        ...setNodesOptions,\n      }\n    );\n  }\n};\n"],"names":["KEY_ALIGN","createAlignPlugin","createPluginFactory","key","then","editor","inject","props","nodeKey","defaultNodeValue","styleKey","validNodeValues","validTypes","getPluginType","ELEMENT_DEFAULT","_","plugin","mapInjectPropsToPlugin","deserializeHtml","getNode","el","node","style","textAlign","setAlign","value","setNodesOptions","getPluginInjectProps","match","n","isBlock","includes","type","unsetNodes","setElements"],"mappings":";;AAOO,MAAMA,SAAS,GAAG,QAAlB;AAEP;AACA;AACA;;AACaC,MAAAA,iBAAiB,GAAGC,mBAAmB,CAAC;AACnDC,EAAAA,GAAG,EAAEH,SAD8C;EAEnDI,IAAI,EAAGC,MAAD,KAAa;AACjBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAER,SADJ;AAELS,QAAAA,gBAAgB,EAAE,MAFb;AAGLC,QAAAA,QAAQ,EAAE,WAHL;QAILC,eAAe,EAAE,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,EAA4B,SAA5B,CAJZ;AAKLC,QAAAA,UAAU,EAAE,CAACC,aAAa,CAACR,MAAD,EAASS,eAAT,CAAd,CAAA;AALP,OAAA;KAFQ;IAUjBV,IAAI,EAAE,CAACW,CAAD,EAAIC,MAAJ,KACJC,sBAAsB,CAACZ,MAAD,EAASW,MAAT,EAAiB;AACrCE,MAAAA,eAAe,EAAE;AACfC,QAAAA,OAAO,EAAE,CAACC,EAAD,EAAKC,IAAL,KAAc;AACrB,UAAA,IAAID,EAAE,CAACE,KAAH,CAASC,SAAb,EAAwB;YACtBF,IAAI,CAACL,MAAM,CAACb,GAAR,CAAJ,GAAmBiB,EAAE,CAACE,KAAH,CAASC,SAA5B,CAAA;AACD,WAAA;AACF,SAAA;AALc,OAAA;KADG,CAAA;GAXpB,CAAA;AAF6C,CAAD;;ACGvCC,MAAAA,QAAQ,GAAG,CACtBnB,MADsB,EAEtB;AACEF,EAAAA,GAAG,GAAGH,SADR;EAEEyB,KAFF;AAGEC,EAAAA,eAAAA;AAHF,CAFsB,KAOnB;EACH,MAAM;IAAEd,UAAF;IAAcH,gBAAd;AAAgCD,IAAAA,OAAAA;AAAhC,GAAA,GAA4CmB,oBAAoB,CACpEtB,MADoE,EAEpEF,GAFoE,CAAtE,CAAA;;EAKA,MAAMyB,KAA+B,GAAIC,CAAD,IAAO;AAC7C,IAAA,OACEC,OAAO,CAACzB,MAAD,EAASwB,CAAT,CAAP,IACA,CAAC,CAACjB,UADF,IAEAA,UAAU,CAACmB,QAAX,CAAoBF,CAAC,CAACG,IAAtB,CAHF,CAAA;GADF,CAAA;;EAQA,IAAIP,KAAK,KAAKhB,gBAAd,EAAgC;AAC9BwB,IAAAA,UAAU,CAAC5B,MAAD,EAASG,OAAT,EAAmB;MAC3BoB,KAD2B;MAE3B,GAAGF,eAAAA;AAFwB,KAAnB,CAAV,CAAA;AAID,GALD,MAKO;IACLQ,WAAW,CACT7B,MADS,EAET;AAAE,MAAA,CAACG,OAAD,GAAYiB,KAAAA;AAAd,KAFS,EAGT;AACEG,MAAAA,KAAK,EAAEA,KADT;MAEE,GAAGF,eAAAA;AAFL,KAHS,CAAX,CAAA;AAQD,GAAA;AACF;;;;"}