import { createPluginFactory, getPluginType, ELEMENT_DEFAULT, mapInjectPropsToPlugin, getPluginInjectProps, unsetNodes, setElements, isBlock } from '@udecode/plate-common';

const KEY_ALIGN = 'align';
/**
 * Creates a plugin that adds alignment functionality to the editor.
 */

const createAlignPlugin = createPluginFactory({
  key: KEY_ALIGN,
  then: editor => ({
    inject: {
      props: {
        nodeKey: KEY_ALIGN,
        defaultNodeValue: 'left',
        styleKey: 'textAlign',
        validNodeValues: ['left', 'center', 'right', 'justify'],
        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)]
      }
    },
    then: (_, plugin) => mapInjectPropsToPlugin(editor, plugin, {
      deserializeHtml: {
        getNode: (el, node) => {
          if (el.style.textAlign) {
            node[plugin.key] = el.style.textAlign;
          }
        }
      }
    })
  })
});

const setAlign = (editor, {
  key = KEY_ALIGN,
  value,
  setNodesOptions
}) => {
  const {
    validTypes,
    defaultNodeValue,
    nodeKey
  } = getPluginInjectProps(editor, key);

  const match = n => {
    return isBlock(editor, n) && !!validTypes && validTypes.includes(n.type);
  };

  if (value === defaultNodeValue) {
    unsetNodes(editor, nodeKey, {
      match,
      ...setNodesOptions
    });
  } else {
    setElements(editor, {
      [nodeKey]: value
    }, {
      match: match,
      ...setNodesOptions
    });
  }
};

export { KEY_ALIGN, createAlignPlugin, setAlign };
//# sourceMappingURL=index.es.js.map
