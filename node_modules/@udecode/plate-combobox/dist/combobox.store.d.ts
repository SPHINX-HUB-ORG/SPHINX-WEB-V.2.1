import { StateActions, StoreApi } from '@udecode/plate-common';
import { UseVirtualFloatingOptions } from '@udecode/plate-floating';
import { Range } from 'slate';
import { ComboboxOnSelectItem, NoData, TComboboxItem } from './types';
export declare type ComboboxStateById<TData = NoData> = {
    /**
     * Combobox id.
     */
    id: string;
    /**
     * Items filter function by text.
     * @default (value) => value.text.toLowerCase().startsWith(search.toLowerCase())
     */
    filter?: (search: string) => (item: TComboboxItem<TData>) => boolean;
    /**
     * Sort filtered items before applying maxSuggestions.
     */
    sort?: (search: string) => (a: TComboboxItem<TData>, b: TComboboxItem<TData>) => number;
    /**
     * Max number of items.
     * @default items.length
     */
    maxSuggestions?: number;
    /**
     * Trigger that activates the combobox.
     */
    trigger: string;
    /**
     * Regular expression for search, for example to allow whitespace
     */
    searchPattern?: string;
    /**
     * Called when an item is selected.
     */
    onSelectItem: ComboboxOnSelectItem<TData> | null;
    /**
     * Is opening/closing the combobox controlled by the client.
     */
    controlled?: boolean;
};
export declare type ComboboxStoreById<TData = NoData> = StoreApi<string, ComboboxStateById<TData>, StateActions<ComboboxStateById<TData>>>;
export declare type ComboboxState<TData = NoData> = {
    /**
     * Active id (combobox id which is opened).
     */
    activeId: string | null;
    /**
     * Object whose keys are combobox ids and values are config stores
     * (e.g. one for tag, one for mention,...).
     */
    byId: Record<string, ComboboxStoreById>;
    /**
     * Unfiltered items.
     */
    items: TComboboxItem<TData>[];
    /**
     * Filtered items
     */
    filteredItems: TComboboxItem<TData>[];
    /**
     * Highlighted index.
     */
    highlightedIndex: number;
    /**
     * Overrides `useFloating` options.
     */
    floatingOptions: Partial<UseVirtualFloatingOptions>;
    /**
     * Range from the trigger to the cursor.
     */
    targetRange: Range | null;
    /**
     * Text after the trigger.
     */
    text: string | null;
};
export declare const comboboxStore: StoreApi<"combobox", ComboboxState<undefined>, import("@udecode/zustood").SetRecord<ComboboxState<undefined>> & {
    state: import("@udecode/zustood").SetImmerState<ComboboxState<undefined>>;
    mergeState: import("@udecode/zustood").MergeState<ComboboxState<undefined>>;
} & {
    setComboboxById: <TData = undefined>(state: ComboboxStateById<TData>) => void;
    open: (state: Pick<ComboboxState, 'activeId' | 'targetRange' | 'text'>) => void;
    reset: () => void;
}, {
    isOpen: () => boolean;
}>;
export declare const useComboboxSelectors: import("@udecode/zustood").StoreApiUse<ComboboxState<undefined>, {
    isOpen: () => boolean;
}>;
export declare const comboboxSelectors: import("@udecode/zustood").StoreApiGet<ComboboxState<undefined>, {
    isOpen: () => boolean;
}>;
export declare const comboboxActions: import("@udecode/zustood").SetRecord<ComboboxState<undefined>> & {
    state: import("@udecode/zustood").SetImmerState<ComboboxState<undefined>>;
    mergeState: import("@udecode/zustood").MergeState<ComboboxState<undefined>>;
} & {
    setComboboxById: <TData = undefined>(state: ComboboxStateById<TData>) => void;
    open: (state: Pick<ComboboxState, 'activeId' | 'targetRange' | 'text'>) => void;
    reset: () => void;
};
export declare const getComboboxStoreById: (id: string | null) => ComboboxStoreById<undefined> | null;
export declare const useActiveComboboxStore: () => ComboboxStoreById<undefined> | null;
//# sourceMappingURL=combobox.store.d.ts.map