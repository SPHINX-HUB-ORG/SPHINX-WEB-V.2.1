{"version":3,"file":"index.es.js","sources":["../src/transforms/setIndent.ts","../src/transforms/indent.ts","../src/transforms/outdent.ts","../src/onKeyDownIndent.ts","../src/withIndent.ts","../src/createIndentPlugin.ts","../src/createTextIndentPlugin.ts"],"sourcesContent":["import {\n  AnyObject,\n  getNodeEntries,\n  GetNodeEntriesOptions,\n  getPluginInjectProps,\n  PlateEditor,\n  setElements,\n  UnhangRangeOptions,\n  unsetNodes,\n  Value,\n  withoutNormalizing,\n} from '@udecode/plate-core';\nimport { KEY_INDENT } from '../createIndentPlugin';\n\nexport interface SetIndentOptions<V extends Value = Value> {\n  /**\n   * 1 to indent\n   * -1 to outdent\n   * @default 1\n   */\n  offset?: number;\n\n  /**\n   * getNodeEntries options\n   */\n  getNodesOptions?: GetNodeEntriesOptions<V> & UnhangRangeOptions;\n\n  /**\n   * Set other props than the indent one.\n   * These will be unset if indent = 0.\n   */\n  setNodesProps?: ({ indent }: { indent: number }) => AnyObject;\n\n  /**\n   * Nodes props to unset when indent = 0.\n   */\n  unsetNodesProps?: string[];\n}\n\n/**\n * Add offset to the indentation of the selected blocks.\n */\nexport const setIndent = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    offset = 1,\n    getNodesOptions,\n    setNodesProps,\n    unsetNodesProps = [],\n  }: SetIndentOptions<V>\n) => {\n  const { nodeKey } = getPluginInjectProps(editor, KEY_INDENT);\n\n  const _nodes = getNodeEntries(editor, {\n    block: true,\n    ...getNodesOptions,\n  });\n  const nodes = Array.from(_nodes);\n\n  withoutNormalizing(editor, () => {\n    nodes.forEach(([node, path]) => {\n      const blockIndent = (node[nodeKey!] as number) ?? 0;\n      const newIndent = blockIndent + offset;\n\n      const props = setNodesProps?.({ indent: newIndent }) ?? {};\n\n      if (newIndent <= 0) {\n        unsetNodes(editor, [nodeKey!, ...unsetNodesProps], {\n          at: path,\n        });\n      } else {\n        setElements(editor, { [nodeKey!]: newIndent, ...props }, { at: path });\n      }\n    });\n  });\n};\n","import { PlateEditor, Value } from '@udecode/plate-core';\nimport { setIndent, SetIndentOptions } from './setIndent';\n\n/**\n * Increase the indentation of the selected blocks.\n */\nexport const indent = <V extends Value>(\n  editor: PlateEditor<V>,\n  options?: SetIndentOptions<V>\n) => {\n  setIndent(editor, { offset: 1, ...options });\n};\n","import { PlateEditor, Value } from '@udecode/plate-core';\nimport { setIndent, SetIndentOptions } from './setIndent';\n\n/**\n * Decrease the indentation of the selected blocks.\n */\nexport const outdent = <V extends Value>(\n  editor: PlateEditor<V>,\n  options?: SetIndentOptions<V>\n) => {\n  setIndent(editor, { offset: -1, ...options });\n};\n","import {\n  Hotkeys,\n  KeyboardHandlerReturnType,\n  PlateEditor,\n  Value,\n} from '@udecode/plate-core';\nimport { indent, outdent } from './transforms/index';\n\nexport const onKeyDownIndent = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>\n>(\n  editor: E\n): KeyboardHandlerReturnType => (e) => {\n  if (Hotkeys.isTab(editor, e)) {\n    e.preventDefault();\n    indent(editor);\n  }\n\n  if (Hotkeys.isUntab(editor, e)) {\n    e.preventDefault();\n    outdent(editor);\n  }\n};\n","import {\n  PlateEditor,\n  setElements,\n  unsetNodes,\n  Value,\n  WithPlatePlugin,\n} from '@udecode/plate-core';\nimport { IndentPlugin, TIndentElement } from './types';\n\n/**\n * - `node.indent` can not exceed `indentMax`\n * - `node.indent` is unset if `node.type` is not in `types`\n */\nexport const withIndent = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>\n>(\n  editor: E,\n  {\n    inject: { props: { validTypes } = {} },\n    options: { indentMax },\n  }: WithPlatePlugin<IndentPlugin, V, E>\n) => {\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    const element = node as TIndentElement;\n    const { type } = element;\n\n    if (type) {\n      if (validTypes!.includes(type)) {\n        if (indentMax && element.indent && element.indent > indentMax) {\n          setElements(editor, { indent: indentMax }, { at: path });\n          return;\n        }\n      } else if (element.indent) {\n        unsetNodes(editor, 'indent', { at: path });\n        return;\n      }\n    }\n\n    return normalizeNode([node, path]);\n  };\n\n  return editor;\n};\n","import {\n  createPluginFactory,\n  ELEMENT_DEFAULT,\n  getPluginType,\n} from '@udecode/plate-core';\nimport { onKeyDownIndent } from './onKeyDownIndent';\nimport { IndentPlugin } from './types';\nimport { withIndent } from './withIndent';\n\nexport const KEY_INDENT = 'indent';\n\nexport const createIndentPlugin = createPluginFactory<IndentPlugin>({\n  key: KEY_INDENT,\n  withOverrides: withIndent,\n  handlers: {\n    onKeyDown: onKeyDownIndent,\n  },\n  options: {\n    offset: 24,\n    unit: 'px',\n  },\n  then: (editor, { options: { offset, unit } = {} }) => ({\n    inject: {\n      props: {\n        nodeKey: KEY_INDENT,\n        styleKey: 'marginLeft',\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n        transformNodeValue: ({ nodeValue }) => nodeValue * offset! + unit!,\n      },\n    },\n  }),\n});\n","import {\n  createPluginFactory,\n  ELEMENT_DEFAULT,\n  getPluginType,\n} from '@udecode/plate-core';\nimport { IndentPlugin } from './types';\n\nexport const KEY_TEXT_INDENT = 'textIndent';\n\nexport const createTextIndentPlugin = createPluginFactory<IndentPlugin>({\n  key: KEY_TEXT_INDENT,\n  options: {\n    offset: 24,\n    unit: 'px',\n  },\n  then: (editor, { options: { offset, unit } = {} }) => ({\n    inject: {\n      props: {\n        nodeKey: KEY_TEXT_INDENT,\n        styleKey: 'textIndent',\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n        transformNodeValue({ nodeValue }) {\n          return nodeValue * offset! + unit!;\n        },\n      },\n    },\n  }),\n});\n"],"names":["setIndent","editor","offset","getNodesOptions","setNodesProps","unsetNodesProps","nodeKey","getPluginInjectProps","KEY_INDENT","_nodes","getNodeEntries","block","nodes","Array","from","withoutNormalizing","forEach","node","path","blockIndent","newIndent","props","indent","unsetNodes","at","setElements","options","outdent","onKeyDownIndent","e","Hotkeys","isTab","preventDefault","isUntab","withIndent","inject","validTypes","indentMax","normalizeNode","element","type","includes","createIndentPlugin","createPluginFactory","key","withOverrides","handlers","onKeyDown","unit","then","styleKey","getPluginType","ELEMENT_DEFAULT","transformNodeValue","nodeValue","KEY_TEXT_INDENT","createTextIndentPlugin"],"mappings":"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"}