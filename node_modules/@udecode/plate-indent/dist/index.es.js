import { getPluginInjectProps, getNodeEntries, withoutNormalizing, unsetNodes, setElements, Hotkeys, createPluginFactory, getPluginType, ELEMENT_DEFAULT } from '@udecode/plate-common';

/**
 * Add offset to the indentation of the selected blocks.
 */
const setIndent = (editor, {
  offset = 1,
  getNodesOptions,
  setNodesProps,
  unsetNodesProps = []
}) => {
  const {
    nodeKey
  } = getPluginInjectProps(editor, KEY_INDENT);

  const _nodes = getNodeEntries(editor, {
    block: true,
    mode: 'lowest',
    ...getNodesOptions
  });

  const nodes = Array.from(_nodes);
  withoutNormalizing(editor, () => {
    nodes.forEach(([node, path]) => {
      var _ref, _setNodesProps;

      const blockIndent = (_ref = node[nodeKey]) !== null && _ref !== void 0 ? _ref : 0;
      const newIndent = blockIndent + offset;
      const props = (_setNodesProps = setNodesProps === null || setNodesProps === void 0 ? void 0 : setNodesProps({
        indent: newIndent
      })) !== null && _setNodesProps !== void 0 ? _setNodesProps : {};

      if (newIndent <= 0) {
        unsetNodes(editor, [nodeKey, ...unsetNodesProps], {
          at: path
        });
      } else {
        setElements(editor, {
          [nodeKey]: newIndent,
          ...props
        }, {
          at: path
        });
      }
    });
  });
};

/**
 * Increase the indentation of the selected blocks.
 */

const indent = (editor, options) => {
  setIndent(editor, {
    offset: 1,
    ...options
  });
};

/**
 * Decrease the indentation of the selected blocks.
 */

const outdent = (editor, options) => {
  setIndent(editor, {
    offset: -1,
    ...options
  });
};

const onKeyDownIndent = editor => e => {
  if (e.defaultPrevented) return;

  if (Hotkeys.isTab(editor, e)) {
    e.preventDefault();
    indent(editor);
  }

  if (Hotkeys.isUntab(editor, e)) {
    e.preventDefault();
    outdent(editor);
  }
};

/**
 * - `node.indent` can not exceed `indentMax`
 * - `node.indent` is unset if `node.type` is not in `types`
 */
const withIndent = (editor, {
  inject: {
    props: {
      validTypes
    } = {}
  },
  options: {
    indentMax
  }
}) => {
  const {
    normalizeNode
  } = editor;

  editor.normalizeNode = ([node, path]) => {
    const element = node;
    const {
      type
    } = element;

    if (type) {
      if (validTypes.includes(type)) {
        if (indentMax && element.indent && element.indent > indentMax) {
          setElements(editor, {
            indent: indentMax
          }, {
            at: path
          });
          return;
        }
      } else if (element.indent) {
        unsetNodes(editor, 'indent', {
          at: path
        });
        return;
      }
    }

    return normalizeNode([node, path]);
  };

  return editor;
};

const KEY_INDENT = 'indent';
const createIndentPlugin = createPluginFactory({
  key: KEY_INDENT,
  withOverrides: withIndent,
  handlers: {
    onKeyDown: onKeyDownIndent
  },
  options: {
    offset: 24,
    unit: 'px'
  },
  then: (editor, {
    options: {
      offset,
      unit
    } = {}
  }) => ({
    inject: {
      props: {
        nodeKey: KEY_INDENT,
        styleKey: 'marginLeft',
        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],
        transformNodeValue: ({
          nodeValue
        }) => nodeValue * offset + unit
      }
    }
  })
});

const KEY_TEXT_INDENT = 'textIndent';
const createTextIndentPlugin = createPluginFactory({
  key: KEY_TEXT_INDENT,
  options: {
    offset: 24,
    unit: 'px'
  },
  then: (editor, {
    options: {
      offset,
      unit
    } = {}
  }) => ({
    inject: {
      props: {
        nodeKey: KEY_TEXT_INDENT,
        styleKey: 'textIndent',
        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],

        transformNodeValue({
          nodeValue
        }) {
          return nodeValue * offset + unit;
        }

      }
    }
  })
});

export { KEY_INDENT, KEY_TEXT_INDENT, createIndentPlugin, createTextIndentPlugin, indent, onKeyDownIndent, outdent, setIndent, withIndent };
//# sourceMappingURL=index.es.js.map
