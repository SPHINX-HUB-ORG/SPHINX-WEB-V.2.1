import { PlateEditor, TDescendant, TElementEntry, TNodeEntry, Value } from '@udecode/plate-common';
import { ListPlugin } from '../types';
/**
 * Recursively get all the:
 * - block children
 * - inline children except those at excludeDepth
 */
export declare const getDeepInlineChildren: <V extends Value>(editor: PlateEditor<V>, { children, }: {
    children: TNodeEntry<TDescendant>[];
}) => TNodeEntry<TDescendant>[];
/**
 * If the list item has no child: insert an empty list item container.
 * Else: move the children that are not valid to the list item container.
 */
export declare const normalizeListItem: <V extends Value>(editor: PlateEditor<V>, { listItem, validLiChildrenTypes, }: {
    listItem: TElementEntry<import("@udecode/plate-common").TNode>;
} & ListPlugin) => boolean;
//# sourceMappingURL=normalizeListItem.d.ts.map