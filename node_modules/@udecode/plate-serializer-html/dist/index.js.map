{"version":3,"file":"index.js","sources":["../src/utils/createElementWithSlate.ts","../src/utils/stripClassNames.ts","../src/elementToHtml.ts","../src/leafToHtml.ts","../src/utils/newLinesToHtmlBr.ts","../src/utils/stripSlateDataAttributes.ts","../src/utils/trimWhitespace.ts","../src/serializeHtml.ts"],"sourcesContent":["import React, { ComponentClass, FunctionComponent } from 'react';\nimport { createTEditor, SlateProps, withTReact } from '@udecode/plate-common';\nimport { Slate } from 'slate-react';\n\n/**\n * Create a React element wrapped in a Slate provider.\n * By default, it will use an empty editor.\n * TODO: allow other providers\n */\nexport const createElementWithSlate = (\n  slateProps?: Partial<SlateProps>,\n  dndWrapper?: string | FunctionComponent | ComponentClass\n) => {\n  const {\n    editor = withTReact(createTEditor()),\n    value = [],\n    onChange = () => {},\n    children,\n    ...props\n  } = slateProps || {};\n\n  if (dndWrapper) {\n    return React.createElement(\n      dndWrapper,\n      null,\n      React.createElement(\n        Slate,\n        {\n          editor,\n          value,\n          onChange,\n          ...props,\n        } as any,\n        children\n      )\n    );\n  }\n\n  return React.createElement(\n    Slate,\n    {\n      editor,\n      value,\n      onChange,\n      ...props,\n    } as any,\n    children\n  );\n};\n","/**\n * Remove all class names that do not start with one of preserveClassNames (`slate-` by default)\n */\nexport const stripClassNames = (\n  html: string,\n  { preserveClassNames = ['slate-'] }: { preserveClassNames?: string[] }\n) => {\n  const allClasses = html.split(/(class=\"[^\"]*\")/g);\n\n  let filteredHtml = '';\n  allClasses.forEach((item, index) => {\n    if (index % 2 === 0) {\n      return (filteredHtml += item);\n    }\n    const preserveRegExp = new RegExp(\n      preserveClassNames.map((cn) => `${cn}[^\"\\\\s]*`).join('|'),\n      'g'\n    );\n    const classNames = item.split('\"')[1].match(preserveRegExp);\n    if (classNames) {\n      filteredHtml += `class=\"${classNames.join(' ')}\"`;\n    }\n  });\n\n  return filteredHtml;\n};\n","import { ComponentClass, FunctionComponent } from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport {\n  pipeInjectProps,\n  PlateEditor,\n  PlateRenderElementProps,\n  pluginRenderElement,\n  SlateProps,\n  Value,\n} from '@udecode/plate-common';\nimport { decode } from 'html-entities';\nimport { createElementWithSlate } from './utils/createElementWithSlate';\nimport { stripClassNames } from './utils/stripClassNames';\n\nexport const elementToHtml = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    props,\n    slateProps,\n    preserveClassNames,\n    dndWrapper,\n  }: {\n    props: PlateRenderElementProps<V>;\n    slateProps?: Partial<SlateProps>;\n    preserveClassNames?: string[];\n    dndWrapper?: string | FunctionComponent | ComponentClass;\n  }\n) => {\n  let html = `<div>${props.children}</div>`;\n\n  // If no type provided we wrap children with div tag\n  if (!props.element.type) {\n    return html;\n  }\n\n  props = pipeInjectProps<V>(editor, props);\n\n  // Search for matching plugin based on element type\n  editor.plugins.some((plugin) => {\n    if (\n      !plugin.isElement ||\n      plugin.serializeHtml === null ||\n      props.element.type !== plugin.type\n    )\n      return false;\n\n    // Render element using picked plugins renderElement function and ReactDOM\n    html = decode(\n      renderToStaticMarkup(\n        createElementWithSlate(\n          {\n            ...slateProps,\n\n            children:\n              plugin.serializeHtml?.(props as any) ??\n              pluginRenderElement(editor, plugin)(props),\n          },\n          dndWrapper\n        )\n      )\n    );\n\n    html = stripClassNames(html, { preserveClassNames });\n\n    return true;\n  });\n\n  return html;\n};\n","import { renderToStaticMarkup } from 'react-dom/server';\nimport {\n  pipeInjectProps,\n  PlateEditor,\n  PlateRenderLeafProps,\n  pluginRenderLeaf,\n  SlateProps,\n  Value,\n} from '@udecode/plate-common';\nimport { decode } from 'html-entities';\nimport { createElementWithSlate } from './utils/createElementWithSlate';\nimport { stripClassNames } from './utils/stripClassNames';\n\nexport const leafToHtml = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    props,\n    slateProps,\n    preserveClassNames,\n  }: {\n    props: PlateRenderLeafProps<V>;\n    slateProps?: Partial<SlateProps>;\n    preserveClassNames?: string[];\n  }\n) => {\n  const { children } = props;\n\n  return editor.plugins.reduce((result, plugin) => {\n    if (!plugin.isLeaf) return result;\n\n    props = {\n      ...pipeInjectProps<V>(editor, props),\n      children: result,\n    };\n\n    const serialized =\n      plugin.serializeHtml?.(props as any) ??\n      pluginRenderLeaf(editor, plugin)(props);\n\n    if (serialized === children) return result;\n\n    let html = decode(\n      renderToStaticMarkup(\n        createElementWithSlate({\n          ...slateProps,\n          children: serialized,\n        })\n      )\n    );\n\n    html = stripClassNames(html, { preserveClassNames });\n\n    return html;\n  }, children);\n};\n","// Convert new line characters to HTML <br /> tags\nexport const newLinesToHtmlBr = (html: string): string =>\n  html.replace(/\\n/g, '<br />');\n","// Remove redundant data attributes\nexport const stripSlateDataAttributes = (rawHtml: string): string =>\n  rawHtml\n    .replace(/( data-slate)(-node|-type|-leaf)=\"[^\"]+\"/gm, '')\n    .replace(/( data-testid)=\"[^\"]+\"/gm, '');\n","// Remove extra whitespace generated by ReactDOMServer\nexport const trimWhitespace = (rawHtml: string): string =>\n  rawHtml.replace(/(\\r\\n|\\n|\\r|\\t)/gm, '');\n","import { ComponentClass, FunctionComponent } from 'react';\nimport {\n  EDescendant,\n  EElement,\n  EText,\n  isText,\n  PlateEditor,\n  SlateProps,\n  Value,\n} from '@udecode/plate-common';\nimport { encode } from 'html-entities';\nimport { newLinesToHtmlBr } from './utils/newLinesToHtmlBr';\nimport { stripSlateDataAttributes } from './utils/stripSlateDataAttributes';\nimport { trimWhitespace } from './utils/trimWhitespace';\nimport { elementToHtml } from './elementToHtml';\nimport { leafToHtml } from './leafToHtml';\n\n/**\n * Convert Slate Nodes into HTML string\n */\nexport const serializeHtml = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    nodes,\n    slateProps,\n    stripDataAttributes = true,\n    preserveClassNames,\n    stripWhitespace = true,\n    convertNewLinesToHtmlBr = false,\n    dndWrapper,\n  }: {\n    /**\n     * Slate nodes to convert to HTML.\n     */\n    nodes: EDescendant<V>[];\n\n    /**\n     * Enable stripping data attributes\n     */\n    stripDataAttributes?: boolean;\n\n    /**\n     * List of className prefixes to preserve from being stripped out\n     */\n    preserveClassNames?: string[];\n\n    /**\n     * Slate props to provide if the rendering depends on slate hooks\n     */\n    slateProps?: Partial<SlateProps>;\n\n    /**\n     * Whether stripping whitespaces from serialized HTML\n     * @default true\n     */\n    stripWhitespace?: boolean;\n\n    /**\n     * Optionally convert new line chars (\\n) to HTML <br /> tags\n     * @default false\n     */\n    convertNewLinesToHtmlBr?: boolean;\n\n    /**\n     *  Drag and drop component\n     */\n    dndWrapper?: string | FunctionComponent | ComponentClass;\n  }\n): string => {\n  let result = nodes\n    .map((node) => {\n      if (isText(node)) {\n        const children = encode(node.text);\n\n        return leafToHtml(editor, {\n          props: {\n            leaf: node as EText<V>,\n            text: node as EText<V>,\n            children: convertNewLinesToHtmlBr\n              ? newLinesToHtmlBr(children)\n              : children,\n            attributes: { 'data-slate-leaf': true },\n            editor,\n          },\n          slateProps,\n          preserveClassNames,\n        });\n      }\n\n      return elementToHtml<V>(editor, {\n        props: {\n          element: node as EElement<V>,\n          children: serializeHtml(editor, {\n            nodes: node.children as EDescendant<V>[],\n            preserveClassNames,\n            stripWhitespace,\n            convertNewLinesToHtmlBr,\n          }),\n          attributes: { 'data-slate-node': 'element', ref: null },\n          editor,\n        },\n        slateProps,\n        preserveClassNames,\n        dndWrapper,\n      });\n    })\n    .join('');\n\n  if (stripWhitespace) {\n    result = trimWhitespace(result);\n  }\n\n  if (stripDataAttributes) {\n    result = stripSlateDataAttributes(result);\n  }\n\n  return result;\n};\n"],"names":["createElementWithSlate","slateProps","dndWrapper","editor","withTReact","createTEditor","value","onChange","children","props","React","createElement","Slate","stripClassNames","html","preserveClassNames","allClasses","split","filteredHtml","forEach","item","index","preserveRegExp","RegExp","map","cn","join","classNames","match","elementToHtml","element","type","pipeInjectProps","plugins","some","plugin","isElement","serializeHtml","decode","renderToStaticMarkup","pluginRenderElement","leafToHtml","reduce","result","isLeaf","serialized","pluginRenderLeaf","newLinesToHtmlBr","replace","stripSlateDataAttributes","rawHtml","trimWhitespace","nodes","stripDataAttributes","stripWhitespace","convertNewLinesToHtmlBr","node","isText","encode","text","leaf","attributes","ref"],"mappings":"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"}