import { Modify } from '@udecode/utils';
import { NodeElementsOptions } from 'slate';
import { ElementOf } from '../element/TElement';
import { TNode } from './TNode';
import { TElementEntry, TNodeEntry } from './TNodeEntry';
/**
 * Return a generator of all the element nodes inside a root node. Each iteration
 * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the
 * root node is an element it will be included in the iteration as well.
 */
export declare const getNodeElements: <N extends ElementOf<R>, R extends TNode = TNode>(root: R, options?: Modify<NodeElementsOptions, {
    pass?: ((node: TElementEntry<N>) => boolean) | undefined;
}> | undefined) => Generator<TNodeEntry<N>, void, undefined>;
//# sourceMappingURL=getNodeElements.d.ts.map