'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var plateCommon = require('@udecode/plate-common');

const MARK_BG_COLOR = 'backgroundColor';
const createFontBackgroundColorPlugin = plateCommon.createPluginFactory({
  key: MARK_BG_COLOR,
  inject: {
    props: {
      nodeKey: MARK_BG_COLOR
    }
  },
  then: (editor, {
    type
  }) => ({
    deserializeHtml: {
      isLeaf: true,
      getNode: element => ({
        [type]: element.style.backgroundColor
      }),
      rules: [{
        validStyle: {
          backgroundColor: '*'
        }
      }]
    }
  })
});

const MARK_COLOR = 'color';
const createFontColorPlugin = plateCommon.createPluginFactory({
  key: MARK_COLOR,
  inject: {
    props: {
      nodeKey: MARK_COLOR,
      defaultNodeValue: 'black'
    }
  },
  then: (editor, {
    type
  }) => ({
    deserializeHtml: {
      isLeaf: true,

      getNode(element) {
        if (element.style.color) {
          return {
            [type]: element.style.color
          };
        }
      },

      rules: [{
        validStyle: {
          color: '*'
        }
      }]
    }
  })
});

const MARK_FONT_FAMILY = 'fontFamily';
const createFontFamilyPlugin = plateCommon.createPluginFactory({
  key: MARK_FONT_FAMILY,
  inject: {
    props: {
      nodeKey: MARK_FONT_FAMILY
    }
  },
  then: (editor, {
    type
  }) => ({
    deserializeHtml: {
      isLeaf: true,
      getNode: element => ({
        [type]: element.style.fontFamily
      }),
      rules: [{
        validStyle: {
          fontFamily: '*'
        }
      }]
    }
  })
});

const MARK_FONT_SIZE = 'fontSize';
const createFontSizePlugin = plateCommon.createPluginFactory({
  key: MARK_FONT_SIZE,
  inject: {
    props: {
      nodeKey: MARK_FONT_SIZE
    }
  },
  then: (editor, {
    type
  }) => ({
    deserializeHtml: {
      isLeaf: true,
      getNode: element => ({
        [type]: element.style.fontSize
      }),
      rules: [{
        validStyle: {
          fontSize: '*'
        }
      }]
    }
  })
});

const MARK_FONT_WEIGHT = 'fontWeight';
const createFontWeightPlugin = plateCommon.createPluginFactory({
  key: MARK_FONT_WEIGHT,
  inject: {
    props: {
      nodeKey: MARK_FONT_WEIGHT
    }
  },
  then: (editor, {
    type
  }) => ({
    deserializeHtml: {
      isLeaf: true,
      getNode: element => ({
        [type]: element.style.fontWeight
      }),
      rules: [{
        validStyle: {
          fontWeight: '*'
        }
      }]
    }
  })
});

exports.MARK_BG_COLOR = MARK_BG_COLOR;
exports.MARK_COLOR = MARK_COLOR;
exports.MARK_FONT_FAMILY = MARK_FONT_FAMILY;
exports.MARK_FONT_SIZE = MARK_FONT_SIZE;
exports.MARK_FONT_WEIGHT = MARK_FONT_WEIGHT;
exports.createFontBackgroundColorPlugin = createFontBackgroundColorPlugin;
exports.createFontColorPlugin = createFontColorPlugin;
exports.createFontFamilyPlugin = createFontFamilyPlugin;
exports.createFontSizePlugin = createFontSizePlugin;
exports.createFontWeightPlugin = createFontWeightPlugin;
//# sourceMappingURL=index.js.map
