"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTheme = exports.mergeThemes = exports.hexToRgbStr = exports.foundations = void 0;
const deepmerge_1 = __importDefault(require("deepmerge"));
const convertCssColorNameToHex = require('convert-css-color-name-to-hex');
exports.foundations = {
    easing: 'ease',
    colors: {
        black: '#33363b',
        darkGray: '#a6a6a6',
        gray: '#eaeaea',
        lightGray: '#f0f0f0',
        white: '#ffffff',
        green: '#7ebc59',
        blue: '#368cbf',
        cerise: '#f00faa',
        red: '#ed6a5a',
        orange: '#edae49',
        yellow: '#e4ce44',
        lightRed: '#cc998d',
        darkPurple: '#303965',
    },
    type: {
        fontSize: {
            base: 24,
            remBase: 24,
            body: 13,
            bodySmaller: 12,
        },
        fontFamily: {
            default: '-apple-system, BlinkMacSystemFont, "Segoe UI", "Helvetica Neue", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
        },
    },
};
const theme = deepmerge_1.default(exports.foundations, {
    isSystem: false,
    colors: {
        primary: exports.foundations.colors.green,
        secondary: exports.foundations.colors.blue,
        bg: exports.foundations.colors.white,
        offBg: exports.foundations.colors.lightGray,
        font: exports.foundations.colors.black,
        offFont: exports.foundations.colors.darkGray,
        border: exports.foundations.colors.gray,
        offBorder: exports.foundations.colors.lightGray,
        headerBg: exports.foundations.colors.white,
    },
    shadow: {
        color: exports.foundations.colors.black,
        opacity: .1,
    },
    editor: {
        fontFamily: {
            default: 'JetBrains Mono',
        },
        fontSize: exports.foundations.type.fontSize.bodySmaller,
        colors: {
            comment: exports.foundations.colors.darkGray,
            string: exports.foundations.colors.orange,
            number: exports.foundations.colors.orange,
            variable: exports.foundations.colors.black,
            keyword: exports.foundations.colors.blue,
            atom: exports.foundations.colors.black,
            attribute: exports.foundations.colors.green,
            property: exports.foundations.colors.blue,
            punctuation: exports.foundations.colors.blue,
            definition: exports.foundations.colors.orange,
            builtin: exports.foundations.colors.orange,
            cursor: exports.foundations.colors.blue,
        },
    }
});
const colorToRGBA = (color) => {
    const fromHex = hexToRgb(color);
    if (fromHex) {
        return fromHex;
    }
    // Strip everything except the integers eg. "rgb(" and ")" and " "
    const rgbStr = color.split(/\(([^)]+)\)/)[1].replace(/ /g, '');
    // map RGB values to variables
    const r = parseInt(rgbStr.split(',')[0], 10);
    const g = parseInt(rgbStr.split(',')[1], 10);
    const b = parseInt(rgbStr.split(',')[2], 10);
    const a = typeof rgbStr.split(',')[3] !== null ? parseInt(rgbStr.split(',')[3], 10) : undefined;
    return { r, g, b, a };
};
const contrast = (color = '') => {
    // map RGB values to variables
    const { r, g, b } = colorToRGBA(color);
    // calculate contrast of color (standard grayscale algorithmic formula)
    return (Math.round(r * 299) + Math.round(g * 587) + Math.round(b * 114)) / 1000;
};
const hexToRgb = (hex) => {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(convertCssColorNameToHex(hex));
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : undefined;
};
exports.hexToRgbStr = (hex) => {
    if (!hex) {
        return '';
    }
    const rgb = hexToRgb(hex);
    if (!rgb) {
        return '';
    }
    const { r, g, b } = rgb;
    return `${r}, ${g}, ${b}`;
};
// shade one of our rgb color objects to a distance of i*10%
// ({ red: 80, green: 18, blue: 20 }, 1) => { red: 72, green: 16, blue: 18 }
const rgbShade = (rgb, i) => {
    return {
        r: rgb.r * (1 - 0.1 * i),
        g: rgb.g * (1 - 0.1 * i),
        b: rgb.b * (1 - 0.1 * i)
    };
};
// tint one of our rgb color objects to a distance of i*10%
// ({ red: 80, green: 18, blue: 20 }, 1) => { red: 98, green: 42, blue: 44 }
const rgbTint = (rgb, i) => {
    return {
        r: rgb.r + (255 - rgb.r) * i * 0.1,
        g: rgb.g + (255 - rgb.g) * i * 0.1,
        b: rgb.b + (255 - rgb.b) * i * 0.1
    };
};
exports.mergeThemes = (...customThemes) => {
    return deepmerge_1.default.all(customThemes);
};
exports.createTheme = (customTheme, extraTheme = {}) => {
    return deepmerge_1.default.all([theme, customTheme, extraTheme]);
};
