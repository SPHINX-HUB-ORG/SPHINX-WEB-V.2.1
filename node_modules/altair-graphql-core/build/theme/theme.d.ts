export declare const foundations: {
    easing: string;
    colors: {
        black: string;
        darkGray: string;
        gray: string;
        lightGray: string;
        white: string;
        green: string;
        blue: string;
        cerise: string;
        red: string;
        orange: string;
        yellow: string;
        lightRed: string;
        darkPurple: string;
    };
    type: {
        fontSize: {
            base: number;
            remBase: number;
            body: number;
            bodySmaller: number;
        };
        fontFamily: {
            default: string;
        };
    };
};
declare const theme: {
    easing: string;
    colors: {
        black: string;
        darkGray: string;
        gray: string;
        lightGray: string;
        white: string;
        green: string;
        blue: string;
        cerise: string;
        red: string;
        orange: string;
        yellow: string;
        lightRed: string;
        darkPurple: string;
    };
    type: {
        fontSize: {
            base: number;
            remBase: number;
            body: number;
            bodySmaller: number;
        };
        fontFamily: {
            default: string;
        };
    };
} & {
    isSystem: boolean;
    colors: {
        primary: string;
        secondary: string;
        bg: string;
        offBg: string;
        font: string;
        offFont: string;
        border: string;
        offBorder: string;
        headerBg: string;
    };
    shadow: {
        color: string;
        opacity: number;
    };
    editor: {
        fontFamily: {
            default: string;
        };
        fontSize: number;
        colors: {
            comment: string;
            string: string;
            number: string;
            variable: string;
            keyword: string;
            atom: string;
            attribute: string;
            property: string;
            punctuation: string;
            definition: string;
            builtin: string;
            cursor: string;
        };
    };
};
declare type RecursivePartial<T> = {
    [P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[] : T[P] extends object ? RecursivePartial<T[P]> : T[P];
};
export declare type ITheme = typeof theme;
export declare type ICustomTheme = RecursivePartial<ITheme>;
export declare const hexToRgbStr: (hex: string) => string;
export declare const mergeThemes: (...customThemes: ICustomTheme[]) => ICustomTheme;
export declare const createTheme: (customTheme: ICustomTheme, extraTheme?: ICustomTheme) => ITheme;
export {};
