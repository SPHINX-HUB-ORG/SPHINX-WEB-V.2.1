"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppSyncSubscriptionProvider = void 0;
const subscription_provider_1 = require("../subscription-provider");
const rxjs_1 = require("rxjs");
const aws_appsync_auth_link_1 = require("aws-appsync-auth-link");
const aws_appsync_subscription_link_1 = require("aws-appsync-subscription-link");
const core_1 = require("@apollo/client/core");
const graphql_1 = require("graphql");
class AppSyncSubscriptionProvider extends subscription_provider_1.SubscriptionProvider {
    /**
    {
      "aws_project_region": "us-west-2",
      "aws_appsync_graphqlEndpoint": "https://....appsync-api.us-west-2.amazonaws.com/graphql",
      "aws_appsync_region": "us-west-2",
      "aws_appsync_authenticationType": "API_KEY",
      "aws_appsync_apiKey": "..."
      "aws_appsync_jwtToken" "..."
    }
     */
    execute(options) {
        const url = this.connectionParams.aws_appsync_graphqlEndpoint;
        const region = this.connectionParams.aws_appsync_region;
        const auth = {
            type: this.connectionParams.aws_appsync_authenticationType,
            apiKey: this.connectionParams.aws_appsync_apiKey,
            jwtToken: this.connectionParams.aws_appsync_jwtToken,
        };
        const link = core_1.ApolloLink.from([
            aws_appsync_auth_link_1.createAuthLink({ url, region, auth }),
            aws_appsync_subscription_link_1.createSubscriptionHandshakeLink({ url, region, auth }),
        ]);
        const client = new core_1.ApolloClient({
            link,
            cache: new core_1.InMemoryCache()
        });
        const subscription = client.subscribe({
            query: graphql_1.parse(options.query),
            variables: options.variables
        });
        return new rxjs_1.Observable((subscriber) => {
            this.subscription = subscription.subscribe({
                next: (...args) => subscriber.next(...args),
                error: (...args) => subscriber.error(...args),
                complete: () => subscriber.complete(),
            });
        });
    }
    close() {
        if (this.subscription?.closed) {
            this.subscription?.unsubscribe();
        }
    }
}
exports.AppSyncSubscriptionProvider = AppSyncSubscriptionProvider;
