import { Observable } from 'rxjs';
import { IDictionary } from '../types/shared';
export interface SubscriptionProviderExtraOptions {
    onConnected?: (error: any, data: any) => void;
}
export interface SubscriptionProviderExecuteOptions {
    query: string;
    variables?: IDictionary;
    operationName?: string;
}
export declare type SubscriptionProviderConstructor = new (subscriptionUrl: string, connectionParams: IDictionary, extraOptions?: SubscriptionProviderExtraOptions) => SubscriptionProvider;
export declare abstract class SubscriptionProvider {
    protected subscriptionUrl: string;
    protected connectionParams: IDictionary;
    protected extraOptions?: SubscriptionProviderExtraOptions;
    constructor(subscriptionUrl: string, connectionParams: IDictionary, extraOptions?: SubscriptionProviderExtraOptions);
    abstract execute(options: SubscriptionProviderExecuteOptions): Observable<any>;
    abstract close(): void;
}
