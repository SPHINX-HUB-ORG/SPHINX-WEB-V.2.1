import { SubscriptionProviderIds } from './subscriptions';
import { IDictionary } from './types/shared';
import { IInitialEnvironments } from './types/state/environments.interfaces';
import { HttpVerb } from './types/state/query.interfaces';
import { SettingsState } from './types/state/settings.interfaces';
export interface AltairConfigOptions {
    /**
     * URL to set as the server endpoint
     */
    endpointURL?: string;
    /**
     * URL to set as the subscription endpoint
     */
    subscriptionsEndpoint?: string;
    /**
     * Initial query to be added
     */
    initialQuery?: string;
    /**
     * Initial variables to be added
     */
    initialVariables?: string;
    /**
     * Initial pre-request script to be added
     */
    initialPreRequestScript?: string;
    /**
     * Initial post-request script to be added
     */
    initialPostRequestScript?: string;
    /**
     * Initial headers object to be added
     * @example
     * {
     *  'X-GraphQL-Token': 'asd7-237s-2bdk-nsdk4'
     * }
     */
    initialHeaders?: IDictionary;
    /**
     * Initial Environments to be added
     * @example
     * {
     *   base: {
     *     title: 'Environment',
     *     variables: {}
     *   },
     *   subEnvironments: [
     *     {
     *       title: 'sub-1',
     *       variables: {}
     *     }
     *   ]
     * }
     */
    initialEnvironments?: IInitialEnvironments;
    /**
     * Namespace for storing the data for the altair instance.
     * Use this when you have multiple altair instances running on the same domain.
     * @example
     * instanceStorageNamespace: 'altair_dev_'
     */
    instanceStorageNamespace?: string;
    /**
     * Initial app settings to use
     */
    initialSettings?: Partial<SettingsState>;
    /**
     * Initial subscriptions provider
     *
     * @default "websocket"
     */
    initialSubscriptionsProvider?: SubscriptionProviderIds;
    /**
     * Initial subscriptions connection params
     */
    initialSubscriptionsPayload?: IDictionary;
    /**
     * Indicates if the state should be preserved for subsequent app loads
     *
     * @default true
     */
    preserveState?: boolean;
    /**
     * HTTP method to use for making requests
     */
    initialHttpMethod?: HttpVerb;
}
export declare class AltairConfig {
    donation: {
        url: string;
        action_count_threshold: number;
    };
    ga: string;
    add_query_depth_limit: number;
    tab_size: number;
    max_windows: number;
    default_language: string;
    languages: {
        'en-US': string;
        'fr-FR': string;
        'es-ES': string;
        'cs-CZ': string;
        'de-DE': string;
        'pt-BR': string;
        'ru-RU': string;
        'uk-UA': string;
        'zh-CN': string;
        'ja-JP': string;
        'sr-SP': string;
        'it-IT': string;
        'pl-PL': string;
        'ko-KR': string;
        'ro-RO': string;
        'vi-VN': string;
    };
    query_history_depth: number;
    defaultTheme: string;
    themes: string[];
    isTranslateMode: any;
    isWebApp: any;
    initialData: {
        url: string;
        subscriptionsEndpoint: string;
        query: string;
        variables: string;
        headers: IDictionary<any>;
        environments: IInitialEnvironments;
        preRequestScript: string;
        postRequestScript: string;
        instanceStorageNamespace: string;
        settings: Partial<SettingsState>;
        initialSubscriptionsProvider: SubscriptionProviderIds;
        initialSubscriptionsPayload: IDictionary<any>;
        initialHttpMethod: "POST" | "GET" | "PUT" | "DELETE";
        preserveState: boolean;
    };
    constructor({ endpointURL, subscriptionsEndpoint, initialQuery, initialHeaders, initialEnvironments, initialVariables, initialPreRequestScript, initialPostRequestScript, instanceStorageNamespace, initialSettings, initialSubscriptionsProvider, initialSubscriptionsPayload, initialHttpMethod, preserveState, }?: AltairConfigOptions);
}
export declare const setAltairConfig: (_config: AltairConfig) => void;
export declare const getAltairConfig: () => AltairConfig;
