import React from "react";
const TinaMarkdown = ({
  content,
  components = {}
}) => {
  if (!content) {
    return null;
  }
  const nodes = Array.isArray(content) ? content : content.children;
  if (!nodes) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, nodes.map((child, index) => {
    return /* @__PURE__ */ React.createElement(MemoNode, {
      components,
      key: index,
      child
    });
  }));
};
const Leaf = (props) => {
  if (props.bold) {
    const { bold, ...rest } = props;
    if (props.components.bold) {
      const Component = props.components.bold;
      return /* @__PURE__ */ React.createElement(Component, null, /* @__PURE__ */ React.createElement(Leaf, {
        ...rest
      }));
    }
    return /* @__PURE__ */ React.createElement("strong", null, /* @__PURE__ */ React.createElement(Leaf, {
      ...rest
    }));
  }
  if (props.italic) {
    const { italic, ...rest } = props;
    if (props.components.italic) {
      const Component = props.components.italic;
      return /* @__PURE__ */ React.createElement(Component, null, /* @__PURE__ */ React.createElement(Leaf, {
        ...rest
      }));
    }
    return /* @__PURE__ */ React.createElement("em", null, /* @__PURE__ */ React.createElement(Leaf, {
      ...rest
    }));
  }
  if (props.underline) {
    const { underline, ...rest } = props;
    if (props.components.underline) {
      const Component = props.components.underline;
      return /* @__PURE__ */ React.createElement(Component, null, /* @__PURE__ */ React.createElement(Leaf, {
        ...rest
      }));
    }
    return /* @__PURE__ */ React.createElement("u", null, /* @__PURE__ */ React.createElement(Leaf, {
      ...rest
    }));
  }
  if (props.strikethrough) {
    const { strikethrough, ...rest } = props;
    if (props.components.strikethrough) {
      const Component = props.components.strikethrough;
      return /* @__PURE__ */ React.createElement(Component, null, /* @__PURE__ */ React.createElement(Leaf, {
        ...rest
      }));
    }
    return /* @__PURE__ */ React.createElement("s", null, /* @__PURE__ */ React.createElement(Leaf, {
      ...rest
    }));
  }
  if (props.code) {
    const { code, ...rest } = props;
    if (props.components.code) {
      const Component = props.components.code;
      return /* @__PURE__ */ React.createElement(Component, null, /* @__PURE__ */ React.createElement(Leaf, {
        ...rest
      }));
    }
    return /* @__PURE__ */ React.createElement("code", null, /* @__PURE__ */ React.createElement(Leaf, {
      ...rest
    }));
  }
  if (props.components.text) {
    const Component = props.components.text;
    return /* @__PURE__ */ React.createElement(Component, null, props.text);
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, props.text);
};
const MemoNode = (props) => {
  const MNode = React.useMemo(() => /* @__PURE__ */ React.createElement(Node, {
    ...props
  }), [JSON.stringify(props)]);
  return MNode;
};
const Node = ({ components, child }) => {
  const { children, ...props } = child;
  switch (child.type) {
    case "h1":
    case "h2":
    case "h3":
    case "h4":
    case "h5":
    case "h6":
    case "p":
    case "blockquote":
    case "ol":
    case "ul":
    case "li":
      if (components[child.type]) {
        const Component2 = components[child.type];
        return /* @__PURE__ */ React.createElement(Component2, {
          ...props
        }, /* @__PURE__ */ React.createElement(TinaMarkdown, {
          components,
          content: children
        }));
      }
      return React.createElement(child.type, {
        children: /* @__PURE__ */ React.createElement(TinaMarkdown, {
          components,
          content: children
        })
      });
    case "lic":
      if (components.lic) {
        const Component2 = components.lic;
        return /* @__PURE__ */ React.createElement(Component2, {
          ...props
        }, /* @__PURE__ */ React.createElement(TinaMarkdown, {
          components,
          content: children
        }));
      }
      return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(TinaMarkdown, {
        components,
        content: child.children
      }));
    case "img":
      if (components[child.type]) {
        const Component2 = components[child.type];
        return /* @__PURE__ */ React.createElement(Component2, {
          ...props
        });
      }
      return /* @__PURE__ */ React.createElement("img", {
        src: child.url,
        alt: child.caption
      });
    case "a":
      if (components[child.type]) {
        const Component2 = components[child.type];
        return /* @__PURE__ */ React.createElement(Component2, {
          ...props
        }, /* @__PURE__ */ React.createElement(TinaMarkdown, {
          components,
          content: children
        }));
      }
      return /* @__PURE__ */ React.createElement("a", {
        href: child.url
      }, /* @__PURE__ */ React.createElement(TinaMarkdown, {
        components,
        content: children
      }));
    case "code_block":
      const value = child.value;
      if (components[child.type]) {
        const Component2 = components[child.type];
        return /* @__PURE__ */ React.createElement(Component2, {
          ...props
        });
      }
      return /* @__PURE__ */ React.createElement("pre", null, /* @__PURE__ */ React.createElement("code", null, value));
    case "hr":
      if (components[child.type]) {
        const Component2 = components[child.type];
        return /* @__PURE__ */ React.createElement(Component2, {
          ...props
        });
      }
      return /* @__PURE__ */ React.createElement("hr", null);
    case "break":
      if (components[child.type]) {
        const Component2 = components[child.type];
        return /* @__PURE__ */ React.createElement(Component2, {
          ...props
        });
      }
      return /* @__PURE__ */ React.createElement("br", null);
    case "text":
      return /* @__PURE__ */ React.createElement(Leaf, {
        components,
        ...child
      });
    case "mdxJsxTextElement":
    case "mdxJsxFlowElement":
      const Component = components[child.name];
      if (Component) {
        const props2 = child.props ? child.props : {};
        return /* @__PURE__ */ React.createElement(Component, {
          ...props2
        });
      } else {
        const ComponentMissing = components["component_missing"];
        if (ComponentMissing) {
          return /* @__PURE__ */ React.createElement(ComponentMissing, {
            name: child.name
          });
        } else {
          return /* @__PURE__ */ React.createElement("span", null, `No component provided for ${child.name}`);
        }
      }
    case "maybe_mdx":
      return null;
    case "html":
    case "html_inline":
      if (components[child.type]) {
        const Component2 = components[child.type];
        return /* @__PURE__ */ React.createElement(Component2, {
          ...props
        });
      }
      return child.value;
    case "invalid_markdown":
      return /* @__PURE__ */ React.createElement("pre", null, child.value);
    default:
      if (typeof child.text === "string") {
        return /* @__PURE__ */ React.createElement(Leaf, {
          components,
          ...child
        });
      }
  }
};
export { TinaMarkdown };
