(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("fetch-ponyfill")) : typeof define === "function" && define.amd ? define(["exports", "fetch-ponyfill"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.tinacms = {}, global.NOOP));
})(this, function(exports2, fetchPonyfill) {
  "use strict";
  function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : { "default": e };
  }
  var fetchPonyfill__default = /* @__PURE__ */ _interopDefaultLegacy(fetchPonyfill);
  const { fetch, Headers } = fetchPonyfill__default["default"]();
  const TINA_HOST = "content.tinajs.io";
  class TinaClient {
    constructor({ token, url, queries }) {
      this.apiUrl = url;
      this.readonlyToken = token == null ? void 0 : token.trim();
      this.queries = queries(this);
    }
    async request(args) {
      const headers = new Headers();
      if (this.readonlyToken) {
        headers.append("X-API-KEY", this.readonlyToken);
      }
      headers.append("Content-Type", "application/json");
      const bodyString = JSON.stringify({
        query: args.query,
        variables: (args == null ? void 0 : args.variables) || {}
      });
      const url = (args == null ? void 0 : args.url) || this.apiUrl;
      const res = await fetch(url, {
        method: "POST",
        headers,
        body: bodyString,
        redirect: "follow"
      });
      if (!res.ok) {
        let additionalInfo = "";
        if (res.status === 401) {
          additionalInfo = "Please check that your client ID, URL and read only token are configured properly.";
        }
        throw new Error(`Server responded with status code ${res.status}, ${res.statusText}. ${additionalInfo ? additionalInfo : ""} Please see our FAQ for more information: https://tina.io/docs/errors/faq/`);
      }
      const json = await res.json();
      if (json.errors) {
        throw new Error(`Unable to fetch, please see our FAQ for more information: https://tina.io/docs/errors/faq/

        Errors: 
	${json.errors.map((error) => error.message).join("\n")}`);
      }
      return {
        data: json == null ? void 0 : json.data,
        query: args.query
      };
    }
  }
  function createClient(args) {
    const client = new TinaClient(args);
    return client;
  }
  exports2.TINA_HOST = TINA_HOST;
  exports2.TinaClient = TinaClient;
  exports2.createClient = createClient;
  Object.defineProperties(exports2, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
});
