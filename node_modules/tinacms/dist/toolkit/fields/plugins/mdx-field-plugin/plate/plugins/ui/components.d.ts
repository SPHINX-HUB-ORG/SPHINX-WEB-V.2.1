/// <reference types="react" />
export declare const components: () => {
    h1: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => JSX.Element;
    h2: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => JSX.Element;
    h3: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => JSX.Element;
    h4: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => JSX.Element;
    /** Tailwind prose doesn't style h5 and h6 elements */
    h5: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => JSX.Element;
    h6: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => JSX.Element;
    p: ({ attributes, className, editor, element, ...props }: {
        [x: string]: any;
        attributes: any;
        className: any;
        editor: any;
        element: any;
    }) => JSX.Element;
    blockquote: ({ className, attributes, editor, element, ...props }: {
        [x: string]: any;
        className: any;
        attributes: any;
        editor: any;
        element: any;
    }) => JSX.Element;
    code_block: (props: any) => JSX.Element;
    html: ({ attributes, editor, element, children, className }: {
        attributes: any;
        editor: any;
        element: any;
        children: any;
        className: any;
    }) => JSX.Element;
    html_inline: ({ attributes, editor, element, children, className }: {
        attributes: any;
        editor: any;
        element: any;
        children: any;
        className: any;
    }) => JSX.Element;
    ul: ({ attributes, editor, className, element, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        className: any;
        element: any;
    }) => JSX.Element;
    ol: ({ attributes, editor, className, element, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        className: any;
        element: any;
    }) => JSX.Element;
    li: ({ attributes, className, editor, element, ...props }: {
        [x: string]: any;
        attributes: any;
        className: any;
        editor: any;
        element: any;
    }) => JSX.Element;
    /** "list item content" */
    lic: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => JSX.Element;
    a: ({ attributes, editor, element, nodeProps, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        nodeProps: any;
        className: any;
    }) => JSX.Element;
    code: ({ editor, leaf, text, attributes, className, ...props }: {
        [x: string]: any;
        editor: any;
        leaf: any;
        text: any;
        attributes: any;
        className: any;
    }) => JSX.Element;
    italic: ({ editor, leaf, text, ...props }: {
        [x: string]: any;
        editor: any;
        leaf: any;
        text: any;
    }) => JSX.Element;
    bold: ({ editor, leaf, text, ...props }: {
        [x: string]: any;
        editor: any;
        leaf: any;
        text: any;
    }) => JSX.Element;
    hr: ({ attributes, className, editor, element, children, ...props }: {
        [x: string]: any;
        attributes: any;
        className: any;
        editor: any;
        element: any;
        children: any;
    }) => JSX.Element;
};
