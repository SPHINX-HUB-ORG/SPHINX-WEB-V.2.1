import fetchPonyfill from "fetch-ponyfill";
const { fetch: fetchPonyfillFN, Headers: HeadersPonyfill } = fetchPonyfill();
const fetchDefined = typeof fetch === "undefined" ? fetchPonyfillFN : fetch;
const HeadersDefined = typeof Headers === "undefined" ? HeadersPonyfill : Headers;
const TINA_HOST = "content.tinajs.io";
class TinaClient {
  constructor({ token, url, queries }) {
    this.apiUrl = url;
    this.readonlyToken = token == null ? void 0 : token.trim();
    this.queries = queries(this);
  }
  async request(args) {
    const headers = new HeadersDefined();
    if (this.readonlyToken) {
      headers.append("X-API-KEY", this.readonlyToken);
    }
    headers.append("Content-Type", "application/json");
    const bodyString = JSON.stringify({
      query: args.query,
      variables: (args == null ? void 0 : args.variables) || {}
    });
    const url = (args == null ? void 0 : args.url) || this.apiUrl;
    const res = await fetchDefined(url, {
      method: "POST",
      headers,
      body: bodyString,
      redirect: "follow"
    });
    if (!res.ok) {
      let additionalInfo = "";
      if (res.status === 401) {
        additionalInfo = "Please check that your client ID, URL and read only token are configured properly.";
      }
      throw new Error(
        `Server responded with status code ${res.status}, ${res.statusText}. ${additionalInfo ? additionalInfo : ""} Please see our FAQ for more information: https://tina.io/docs/errors/faq/`
      );
    }
    const json = await res.json();
    if (json.errors) {
      throw new Error(
        `Unable to fetch, please see our FAQ for more information: https://tina.io/docs/errors/faq/

        Errors: 
	${json.errors.map((error) => error.message).join("\n")}`
      );
    }
    return {
      data: json == null ? void 0 : json.data,
      query: args.query
    };
  }
}
function createClient(args) {
  const client = new TinaClient(args);
  return client;
}
export {
  TINA_HOST,
  TinaClient,
  createClient
};
