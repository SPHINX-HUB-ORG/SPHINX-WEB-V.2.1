{"version":3,"file":"disclosure.js","sources":["../../node_modules/@react-hook/event/src/index.tsx","../../node_modules/@accessible/use-key/src/index.tsx","../../node_modules/@accessible/tabbable/src/index.ts","../../node_modules/@accessible/use-conditional-focus/src/index.tsx","../../node_modules/@react-hook/previous/src/index.tsx","../../node_modules/@react-hook/switch/src/index.tsx","../../node_modules/@accessible/button/src/index.tsx","../../node_modules/react-portalize/src/index.tsx","../../node_modules/clsx/dist/clsx.m.js","../../src/index.tsx","../../node_modules/@react-hook/passive-layout-effect/src/index.tsx","../../node_modules/@react-hook/latest/src/index.tsx","../../node_modules/@react-hook/merged-ref/src/index.tsx","../../node_modules/@accessible/use-id/src/index.tsx","../../node_modules/@react-hook/change/src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport useLayoutEffect from '@react-hook/passive-layout-effect'\nimport useLatest from '@react-hook/latest'\n\nfunction useEvent<\n  T extends Window = Window,\n  K extends keyof WindowEventMap = keyof WindowEventMap\n>(\n  target: Window | null,\n  type: K,\n  listener: WindowEventListener<K>,\n  cleanup?: (...args: any[]) => void\n): void\nfunction useEvent<\n  T extends Document = Document,\n  K extends keyof DocumentEventMap = keyof DocumentEventMap\n>(\n  target: Document | null,\n  type: K,\n  listener: DocumentEventListener<K>,\n  cleanup?: (...args: any[]) => void\n): void\nfunction useEvent<\n  T extends HTMLElement = HTMLElement,\n  K extends keyof HTMLElementEventMap = keyof HTMLElementEventMap\n>(\n  target: React.RefObject<T> | T | null,\n  type: K,\n  listener: ElementEventListener<K>,\n  cleanup?: (...args: any[]) => void\n): void\nfunction useEvent(target: any, type: any, listener: any, cleanup: any): void {\n  const storedListener = useLatest(listener)\n  const storedCleanup = useLatest(cleanup)\n\n  useLayoutEffect(() => {\n    const targetEl = target && 'current' in target ? target.current : target\n    if (!targetEl) return\n\n    let didUnsubscribe = 0\n    function listener(this: any, ...args: any[]) {\n      if (didUnsubscribe) return\n      storedListener.current.apply(this, args)\n    }\n\n    targetEl.addEventListener(type, listener)\n    const cleanup = storedCleanup.current\n\n    return () => {\n      didUnsubscribe = 1\n      targetEl.removeEventListener(type, listener)\n      cleanup && cleanup()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [target, type])\n}\n\nexport type ElementEventListener<\n  K extends keyof HTMLElementEventMap = keyof HTMLElementEventMap\n> = (this: HTMLElement, ev: HTMLElementEventMap[K]) => any\n\nexport type DocumentEventListener<\n  K extends keyof DocumentEventMap = keyof DocumentEventMap\n> = (this: Document, ev: DocumentEventMap[K]) => any\n\nexport type WindowEventListener<\n  K extends keyof WindowEventMap = keyof WindowEventMap\n> = (this: Document, ev: WindowEventMap[K]) => any\n\nexport default useEvent\n","import * as React from 'react'\nimport useEvent from '@react-hook/event'\n\nexport function useKey<T extends Window>(\n  target: T | null,\n  listeners: Record<string, (event: KeyboardEvent) => any>\n): void\nexport function useKey<T extends Document>(\n  target: T | null,\n  listeners: Record<string, (event: KeyboardEvent) => any>\n): void\nexport function useKey<T extends HTMLElement>(\n  target: React.RefObject<T> | T | null,\n  listeners: Record<string, (event: KeyboardEvent) => any>\n): void\nexport function useKey(\n  target: any,\n  listeners: Record<string, (event: KeyboardEvent) => any>\n) {\n  useEvent(target, 'keydown', (event): void => {\n    const listener = listeners[LEGACY_COMPAT[event.key] || event.key]\n    if (listener) listener(event)\n  })\n}\n\n// IE 11 and some versions of Edge have non-standard value\nconst LEGACY_COMPAT: Record<string, string> = {\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Left: 'ArrowLeft',\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Del: 'Delete',\n  Crsel: 'CrSel',\n  Exsel: 'ExSel',\n  Add: '+',\n  Subtract: '-',\n  Multiply: '*',\n  Divide: '/',\n  Decimal: '.',\n  Scroll: 'ScrollLock',\n}\n\nexport default useKey\n","// Credit:\n// https://github.com/davidtheclark/tabbable\nconst candidateSelector =\n  'input,select,textarea,a[href],button,[tabindex],' +\n  'audio[controls],video[controls],' +\n  '[contenteditable]:not([contenteditable=\"false\"])'\n\nexport interface Tabbables {\n  documentOrder: number\n  tabIndex: number\n  node: HTMLElement | HTMLInputElement\n}\n\nconst matches: Element['matches'] =\n  typeof Element === 'undefined'\n    ? () => false\n    : Element.prototype.matches ||\n      // @ts-ignore\n      Element.prototype.msMatchesSelector ||\n      Element.prototype.webkitMatchesSelector\n\nconst tabbable = (el: HTMLElement, includeRootNode = false): HTMLElement[] => {\n  const regularTabbables: HTMLElement[] = []\n  const orderedTabbables: Tabbables[] = []\n\n  let candidates: HTMLElement[] | NodeListOf<HTMLElement> = el.querySelectorAll(\n    candidateSelector\n  )\n\n  if (includeRootNode && matches.call(el, candidateSelector)) {\n    candidates = Array.prototype.slice.apply(candidates) as HTMLElement[]\n    candidates.unshift(el)\n  }\n\n  let i, candidate, candidateTabindex\n  for (i = 0; i < candidates.length; i++) {\n    candidate = candidates[i]\n    if (!isNodeMatchingSelectorTabbable(candidate)) continue\n    candidateTabindex = getTabindex(candidate)\n\n    if (candidateTabindex === 0) {\n      regularTabbables.push(candidate)\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        node: candidate,\n      })\n    }\n  }\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .map((a) => a.node)\n    .concat(regularTabbables)\n}\n\nconst isNodeMatchingSelectorTabbable = (node: HTMLElement) =>\n  !(\n    !isNodeMatchingSelectorFocusable(node) ||\n    (node.tagName === 'INPUT' &&\n      (node as HTMLInputElement).type === 'radio' &&\n      !isTabbableRadio(node as HTMLInputElement)) ||\n    getTabindex(node) < 0\n  )\n\nconst isNodeMatchingSelectorFocusable = (node: HTMLElement) =>\n  !(\n    (node as HTMLInputElement).disabled ||\n    (isInput(node) && (node as HTMLInputElement).type === 'hidden') ||\n    // offsetParent being null will allow detecting cases where an element\n    // is invisible or inside an invisible element,  as long as the element\n    // does not use position: fixed. For them, their visibility has to be\n    // checked directly as well.\n    node.offsetParent === null ||\n    getComputedStyle(node).visibility === 'hidden'\n  )\n\nconst getTabindex = (node: HTMLElement) => {\n  const tabindexAttr = parseInt(node.getAttribute('tabindex') || '', 10)\n  if (!isNaN(tabindexAttr)) return tabindexAttr\n  // Browsers do not return `tabIndex` correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n  if (node.contentEditable === 'true') return 0\n  return node.tabIndex\n}\n\n// @ts-ignore\nconst sortOrderedTabbables = (a: Tabbables, b: Tabbables) =>\n  a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex\n\nconst isInput = (node: HTMLElement) => node.tagName === 'INPUT'\n\nconst isTabbableRadio = (node: HTMLInputElement) => {\n  if (!node.name) return true\n  // This won't account for the edge case where you have radio groups with the\n  // same in separate forms on the same page.\n  if (node.ownerDocument) {\n    const radioSet = node.ownerDocument.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + node.name + '\"]'\n    )\n\n    for (let i = 0; i < radioSet.length; i++)\n      if ((radioSet[i] as HTMLInputElement).checked) return radioSet[i] === node\n\n    return true\n  }\n\n  return false\n}\n\nexport default tabbable\n","import * as React from 'react'\nimport tabbable from '@accessible/tabbable'\nimport useEvent from '@react-hook/event'\nimport useLatest from '@react-hook/latest'\n\nfunction useConditionalFocus<T extends Window>(\n  target: T | null,\n  shouldFocus?: boolean,\n  options?: UseConditionalFocusOptions\n): void\nfunction useConditionalFocus<T extends Document>(\n  target: T | null,\n  shouldFocus?: boolean,\n  options?: UseConditionalFocusOptions\n): void\nfunction useConditionalFocus<T extends HTMLElement>(\n  target: React.RefObject<T> | T | null,\n  shouldFocus?: boolean,\n  options?: UseConditionalFocusOptions\n): void\nfunction useConditionalFocus(\n  target: any,\n  shouldFocus = false,\n  {includeRoot, preventScroll} = defaultOptions\n) {\n  const doFocus_ = () => {\n    const element = target && 'current' in target ? target.current : target\n    if (!element || !shouldFocus) return\n    const tabbableEls = tabbable(element, includeRoot)\n    if (tabbableEls.length > 0) tabbableEls[0].focus({preventScroll})\n  }\n  const doFocus = useLatest(doFocus_)\n\n  React.useEffect(() => {\n    doFocus.current()\n  }, [doFocus, shouldFocus])\n\n  useEvent(target, 'transitionend', doFocus_)\n}\n\nconst defaultOptions: UseConditionalFocusOptions = {\n  includeRoot: false,\n  preventScroll: false,\n}\n\nexport type UseConditionalFocusOptions = {\n  includeRoot?: boolean\n  preventScroll?: boolean\n}\n\nexport default useConditionalFocus\n","import * as React from 'react'\n\nfunction usePrevious<T extends any>(value: T, initialValue: T): T\nfunction usePrevious<T extends any>(value: T): T | undefined\nfunction usePrevious<T extends any>(value: T, initialValue?: T): T | undefined {\n  const storedValue = React.useRef(initialValue)\n  React.useEffect(() => {\n    storedValue.current = value\n  }, [value])\n  return storedValue.current\n}\n\nexport default usePrevious\n","import * as React from 'react'\nimport useChange from '@react-hook/change'\n\nconst useCallback = React.useCallback\n\n/**\n * A hook for creating controlled toggles with on, off, and toggle callbacks.\n * This is extremely useful for creating controlled inputs for components like Checkbox.\n *\n * @param defaultValue Sets the default value of the switch\n * @param controlledValue Sets the controlled value of the switch, which will override\n *  the defaultValue\n * @param onChange A callback invoked whenever the value in state changes\n */\nfunction useSwitch(\n  defaultValue = false,\n  controlledValue?: boolean,\n  onChange: (value: boolean, prevValue: boolean) => any = noop\n) {\n  const [current, setCurrent] = React.useState(controlledValue ?? defaultValue)\n  useChange(current, onChange)\n\n  return [\n    controlledValue ?? current,\n    Object.assign(\n      useCallback(\n        () => setCurrent((curr) => !curr),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        emptyArr\n      ),\n      {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        on: useCallback(() => setCurrent(true), emptyArr),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        off: useCallback(() => setCurrent(false), emptyArr),\n      }\n    ),\n  ] as const\n}\n\nconst emptyArr: [] = []\nfunction noop() {}\n\nexport default useSwitch\n","import * as React from 'react'\nimport useKey from '@accessible/use-key'\nimport useEvent from '@react-hook/event'\nimport useMergedRef from '@react-hook/merged-ref'\n\nexport function useA11yButton<T extends HTMLElement>(\n  target: React.RefObject<T> | T | null,\n  onClick: (event: MouseEvent) => any\n) {\n  const clickedMouse = React.useRef(false)\n  const setClickedMouse = () => (clickedMouse.current = true)\n  useEvent(target, 'touchstart', setClickedMouse)\n  useEvent(target, 'mousedown', setClickedMouse)\n  useEvent(target, 'click', (event) => {\n    // Only fire onClick if the keyboard was not used to initiate the click\n    clickedMouse.current && onClick(event)\n    clickedMouse.current = false\n  })\n  // @ts-expect-error\n  useKey(target, {\n    Enter: onClick,\n    ' ': onClick,\n  })\n\n  return {\n    role: 'button',\n    tabIndex: 0,\n  } as const\n}\n\nexport const Button = ({children}: ButtonProps) => {\n  const ref = React.useRef(null)\n  const {props} = children\n  const {role, tabIndex} = useA11yButton(ref, props.onClick)\n\n  return React.cloneElement(children, {\n    onClick: undefined,\n    role: props.hasOwnProperty('role') ? props.role : role,\n    tabIndex: props.hasOwnProperty('tabIndex') ? props.tabIndex : tabIndex,\n    // @ts-expect-error\n    ref: useMergedRef(ref, children.ref),\n  })\n}\n\nexport interface ButtonProps {\n  children: JSX.Element | React.ReactElement\n}\n\n/* istanbul ignore next */\nif (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n  Button.displayName = 'AccessibleButton'\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\nexport const PORTALS: Record<string, React.ReactElement> = {}\nconst getContainer = (container: string) =>\n  typeof document !== 'undefined' && document.querySelectorAll(container)\n\nconst Portalize: React.FC<PortalizeProps> = ({\n  container = '#portals',\n  server = true,\n  providers,\n  children,\n}) => {\n  const [nodes, setNodes] = React.useState(getContainer(container))\n  React.useEffect(() => {\n    setNodes(getContainer(container))\n  }, [container])\n\n  if (nodes === false) {\n    // this branch only renders on the server\n    if (server) {\n      if (providers !== void 0 && providers.length > 0) {\n        children = providers.reduceRight(\n          (children, {provider, value}) =>\n            React.createElement(provider, {value}, children),\n          children\n        )\n      }\n      if (children) PORTALS[container] = children\n    }\n  } else if (nodes.length > 0) {\n    const portals: React.ReactPortal[] = []\n    for (let i = 0; i < nodes.length; i++)\n      portals.push(ReactDOM.createPortal(children, nodes[i]))\n    return <React.Fragment>{portals}</React.Fragment>\n  }\n\n  return null\n}\n\nexport interface PortalizeProvider {\n  provider: React.Provider<any>\n  value: any\n}\n\nexport interface PortalizeProps {\n  container?: string\n  providers?: PortalizeProvider[]\n  server?: boolean\n  children: React.ReactElement | null\n}\n\nexport default Portalize\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","import * as React from 'react'\nimport useKey from '@accessible/use-key'\nimport useConditionalFocus from '@accessible/use-conditional-focus'\nimport useSwitch from '@react-hook/switch'\nimport useMergedRef from '@react-hook/merged-ref'\nimport usePrevious from '@react-hook/previous'\nimport useId from '@accessible/use-id'\nimport {useA11yButton} from '@accessible/button'\nimport Portalize from 'react-portalize'\nimport type {PortalizeProps} from 'react-portalize'\nimport clsx from 'clsx'\n\nconst DisclosureContext = React.createContext<DisclosureContextValue>({\n  isOpen: false,\n  open: noop,\n  close: noop,\n  toggle: noop,\n})\n\n/**\n * This hook provides the current value of the disclosure's context object\n */\nexport function useDisclosure() {\n  return React.useContext(DisclosureContext)\n}\n\n/**\n * This component creates the context for your disclosure target and trigger\n * and contains some configuration options.\n */\nexport function Disclosure({\n  id,\n  open,\n  defaultOpen,\n  onChange = noop,\n  children,\n}: DisclosureProps) {\n  id = useId(id)\n  const [isOpen, toggle] = useSwitch(defaultOpen, open, onChange)\n\n  const context = React.useMemo(\n    () => ({\n      id,\n      open: toggle.on,\n      close: toggle.off,\n      toggle,\n      isOpen,\n    }),\n    [id, isOpen, toggle]\n  )\n\n  return (\n    <DisclosureContext.Provider value={context}>\n      {children}\n    </DisclosureContext.Provider>\n  )\n}\n\nfunction portalize(\n  Component: React.ReactElement,\n  portal: boolean | undefined | null | string | Omit<PortalizeProps, 'children'>\n) {\n  if (!portal) return Component\n  const props: PortalizeProps = {children: Component}\n  if (typeof portal === 'string') props.container = portal\n  else Object.assign(props, portal)\n  return React.createElement(Portalize, props)\n}\n\n/**\n * A React hook for creating a headless disclosure target to [WAI-ARIA authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/examples/disclosure/disclosure-faq.html).\n *\n * @param target A React ref or HTML element\n * @param options Configuration options\n */\nexport function useA11yTarget<T extends HTMLElement>(\n  target: React.RefObject<T> | T | null,\n  options: UseA11yTargetOptions = {}\n) {\n  const {\n    preventScroll,\n    closeOnEscape = true,\n    openClass,\n    closedClass,\n    openStyle,\n    closedStyle,\n  } = options\n  const {id, isOpen, close} = useDisclosure()\n  const prevOpen = usePrevious(isOpen)\n  // Provides the target focus when it is in a new open state\n  useConditionalFocus(target, !prevOpen && isOpen, {\n    includeRoot: true,\n    preventScroll,\n  })\n  // Handles closing the modal when the ESC key is pressed\n  useKey(target, {Escape: () => closeOnEscape && close()})\n\n  return {\n    'aria-hidden': !isOpen,\n    id,\n    className: isOpen ? openClass : closedClass,\n    style: Object.assign(\n      {visibility: isOpen ? 'visible' : 'hidden'} as const,\n      isOpen ? openStyle : closedStyle\n    ),\n  } as const\n}\n\n/**\n * This component wraps any React element and turns it into a\n * disclosure target.\n */\nexport function Target({\n  closeOnEscape = true,\n  portal,\n  openClass,\n  closedClass,\n  openStyle,\n  closedStyle,\n  preventScroll,\n  children,\n}: TargetProps) {\n  const ref = React.useRef<HTMLElement>(null)\n  const childProps = children.props\n  const a11yProps = useA11yTarget(ref, {\n    openClass: clsx(childProps.className, openClass) || void 0,\n    closedClass: clsx(childProps.className, closedClass) || void 0,\n    openStyle: childProps.style\n      ? Object.assign({}, childProps.style, openStyle)\n      : openStyle,\n    closedStyle: childProps.style\n      ? Object.assign({}, childProps.style, closedStyle)\n      : closedStyle,\n    closeOnEscape,\n    preventScroll,\n  })\n\n  return portalize(\n    React.cloneElement(\n      children,\n      Object.assign(a11yProps, {\n        ref: useMergedRef(\n          ref,\n          // @ts-expect-error\n          children.ref\n        ),\n      })\n    ),\n    portal\n  )\n}\n\n/**\n * A React hook for creating a headless close button to [WAI-ARIA authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/examples/disclosure/disclosure-faq.html).\n * In addition to providing accessibility props to your component, this\n * hook will add events for interoperability between actual <button> elements\n * and fake ones e.g. <a> and <div> to the target element.\n *\n * @param target A React ref or HTML element\n * @param options Configuration options\n */\nexport function useA11yCloseButton<T extends HTMLElement>(\n  target: React.RefObject<T> | T | null,\n  {onClick}: UseA11yCloseButtonOptions = {}\n) {\n  const {close, isOpen, id} = useDisclosure()\n  return Object.assign(\n    {\n      'aria-controls': id,\n      'aria-expanded': isOpen,\n      'aria-label': 'Close',\n    } as const,\n    useA11yButton<T>(target, (e) => {\n      close()\n      onClick?.(e)\n    })\n  )\n}\n\n/**\n * This is a convenience component that wraps any React element and adds\n * an onClick handler which closes the disclosure.\n */\nexport function CloseButton({children}: CloseButtonProps) {\n  const ref = React.useRef<HTMLElement>(null)\n  const childProps = children.props\n  const a11yProps = useA11yCloseButton(ref, {\n    onClick: childProps.onClick,\n  })\n\n  return React.cloneElement(\n    children,\n    Object.assign(a11yProps, {\n      onClick: undefined,\n      'aria-label': childProps.hasOwnProperty('aria-label')\n        ? childProps['aria-label']\n        : a11yProps['aria-label'],\n      ref: useMergedRef(\n        ref,\n        // @ts-expect-error\n        children.ref\n      ),\n    })\n  )\n}\n\n/**\n * A React hook for creating a headless disclosure trigger to [WAI-ARIA authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/examples/disclosure/disclosure-faq.html).\n * In addition to providing accessibility props to your component, this\n * hook will add events for interoperability between actual <button> elements\n * and fake ones e.g. <a> and <div> to the target element\n *\n * @param target A React ref or HTML element\n * @param options Configuration options\n */\nexport function useA11yTrigger<T extends HTMLElement>(\n  target: React.RefObject<T> | T | null,\n  options: UseA11yTriggerOptions = {}\n) {\n  const {openClass, closedClass, openStyle, closedStyle, onClick} = options\n  const {isOpen, id, toggle} = useDisclosure()\n  const prevOpen = usePrevious(isOpen)\n  useConditionalFocus(target, prevOpen && !isOpen, {includeRoot: true})\n\n  return Object.assign(\n    {\n      'aria-controls': id,\n      'aria-expanded': isOpen,\n      className: isOpen ? openClass : closedClass,\n      style: isOpen ? openStyle : closedStyle,\n    } as const,\n    useA11yButton<T>(target, (e) => {\n      toggle()\n      onClick?.(e)\n    })\n  )\n}\n\n/**\n * This component wraps any React element and adds an `onClick` handler\n * which toggles the open state of the disclosure target.\n */\nexport function Trigger({\n  openClass,\n  closedClass,\n  openStyle,\n  closedStyle,\n  children,\n}: TriggerProps) {\n  const ref = React.useRef<HTMLElement>(null)\n  const childProps = children.props\n  const a11yProps = useA11yTrigger(ref, {\n    openClass: clsx(childProps.className, openClass) || void 0,\n    closedClass: clsx(childProps.className, closedClass) || void 0,\n    openStyle: childProps.style\n      ? Object.assign({}, childProps.style, openStyle)\n      : openStyle,\n    closedStyle: childProps.style\n      ? Object.assign({}, childProps.style, closedStyle)\n      : closedStyle,\n    onClick: childProps.onClick,\n  })\n\n  return React.cloneElement(\n    children,\n    Object.assign(a11yProps, {\n      onClick: undefined,\n      ref: useMergedRef(\n        ref,\n        // @ts-expect-error\n        children.ref\n      ),\n    })\n  )\n}\n\nfunction noop() {}\n\nexport interface DisclosureContextValue {\n  /**\n   * The open state of the disclosure\n   */\n  isOpen: boolean\n  /**\n   * Opens the disclosure\n   */\n  open: () => void\n  /**\n   * Closes the disclosure\n   */\n  close: () => void\n  /**\n   * Toggles the open state of the disclosure\n   */\n  toggle: () => void\n  /**\n   * A unique ID for the disclosure target\n   */\n  id?: string\n}\n\nexport interface DisclosureProps {\n  /**\n   * This creates a controlled disclosure component where the open state of the\n   * disclosure is controlled by this property.\n   */\n  open?: boolean\n  /**\n   * This sets the default open state of the disclosure. By default the disclosure\n   * is closed.\n   * @default false\n   */\n  defaultOpen?: boolean\n  /**\n   * By default this component creates a unique id for you, as it is required\n   * for certain aria attributes. Supplying an id here overrides the auto id feature.\n   */\n  id?: string\n  /**\n   * This callback is invoked any time the `open` state of the disclosure changes.\n   */\n  onChange?: (open: boolean) => void\n  /**\n   * By default this component creates a unique id for you, as it is required for\n   * certain aria attributes. Supplying an id here overrides the auto id feature.\n   */\n  children: React.ReactNode\n}\n\nexport interface UseA11yTriggerOptions {\n  /**\n   * Adds this class name to props when the disclosure is open\n   */\n  openClass?: string\n  /**\n   * Adds this class name to props when the disclosure is closed\n   */\n  closedClass?: string\n  /**\n   * Adds this style to props when the disclosure is open\n   */\n  openStyle?: React.CSSProperties\n  /**\n   * Adds this style to props when the disclosure is closed\n   */\n  closedStyle?: React.CSSProperties\n  /**\n   * Adds an onClick handler in addition to the default one that\n   * toggles the disclosure's open state.\n   */\n  onClick?: (e: MouseEvent) => any\n}\n\nexport interface TriggerProps extends Omit<UseA11yTriggerOptions, 'onClick'> {\n  /**\n   * The child is cloned by this component and has aria attributes injected\n   * into its props as well as the events defined above.\n   */\n  children: JSX.Element | React.ReactElement\n}\n\nexport interface UseA11yTargetOptions {\n  /**\n   * Adds this class name to props when the disclosure is open\n   */\n  openClass?: string\n  /**\n   * Adds this class name to props when the disclosure is closed\n   */\n  closedClass?: string\n  /**\n   * Adds this style to props when the disclosure is open\n   */\n  openStyle?: React.CSSProperties\n  /**\n   * Adds this style to props when the disclosure is closed\n   */\n  closedStyle?: React.CSSProperties\n  /**\n   * Prevents the `window` from scrolling when the target is\n   * focused after opening.\n   */\n  preventScroll?: boolean\n  /**\n   * When `true`, this closes the target element when the `Escape`\n   * key is pressed.\n   * @default true\n   */\n  closeOnEscape?: boolean\n}\n\nexport interface TargetProps extends UseA11yTargetOptions {\n  /**\n   * When `true` this will render the disclosure into a React portal with the\n   * id `#portals`. You can render it into any portal by providing its query\n   * selector here, e.g. `#foobar`, `[data-portal=true]`, or `.foobar`.\n   * @default false\n   */\n  portal?:\n    | boolean\n    | undefined\n    | null\n    | string\n    | Omit<PortalizeProps, 'children'>\n  /**\n   * The child is cloned by this component and has aria attributes injected into its\n   * props as well events.\n   */\n  children: JSX.Element | React.ReactElement\n}\n\nexport interface UseA11yCloseButtonOptions {\n  /**\n   * Adds an onClick handler in addition to the default one that\n   * closes the disclosure.\n   */\n  onClick?: (e: MouseEvent) => any\n}\n\nexport interface CloseButtonProps {\n  /**\n   * The child is cloned by this component and has aria attributes injected into its\n   * props as well events.\n   */\n  children: JSX.Element | React.ReactElement\n}\n\n/* istanbul ignore next */\nif (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n  Disclosure.displayName = 'Disclosure'\n  Target.displayName = 'Target'\n  Trigger.displayName = 'Trigger'\n  CloseButton.displayName = 'CloseButton'\n}\n","import * as React from 'react'\n\nconst usePassiveLayoutEffect =\n  React[\n    typeof document !== 'undefined' && document.createElement !== void 0\n      ? 'useLayoutEffect'\n      : 'useEffect'\n  ]\n\nexport default usePassiveLayoutEffect\n","import * as React from 'react'\n\nconst useLatest = <T extends any>(current: T) => {\n  const storedValue = React.useRef(current)\n  storedValue.current = current\n  return storedValue\n}\n\nexport default useLatest\n","import * as React from 'react'\n\nconst useMergedRef = <T extends any>(\n  ...refs: React.Ref<T>[]\n): React.RefCallback<T> => (element: T) =>\n  refs.forEach((ref) => {\n    if (typeof ref === 'function') ref(element)\n    else if (ref && typeof ref === 'object')\n      (ref as React.MutableRefObject<T>).current = element\n  })\n\nexport default useMergedRef\n","import * as React from 'react'\nimport useLayoutEffect from '@react-hook/passive-layout-effect'\n\nlet ID = 0\nconst genId = (): number => ID++\nlet serverHandoffComplete = false\n\nconst useId = (\n  fallbackId?: string | null | 0 | false,\n  prefix = '🅰'\n): string | undefined => {\n  const [id, setId] = React.useState<number | undefined>(\n    serverHandoffComplete ? genId : void 0\n  )\n\n  useLayoutEffect(() => {\n    if (!serverHandoffComplete) {\n      serverHandoffComplete = true\n      setId(ID++)\n    }\n  }, [])\n\n  return fallbackId ? fallbackId : id === void 0 ? id : prefix + id\n}\n\nexport default useId\n","import * as React from 'react'\nimport usePrevious from '@react-hook/previous'\nimport useLatest from '@react-hook/latest'\n\nconst useChange = <T extends any>(\n  value: T,\n  onChange: (current: T, prev: T) => any\n) => {\n  const storedOnChange = useLatest(onChange)\n  const prevValue = usePrevious(value, value)\n  React.useEffect(() => {\n    if (value !== prevValue) storedOnChange.current(value, prevValue)\n  }, [value, prevValue, storedOnChange])\n}\n\nexport default useChange\n"],"names":["useEvent","target","type","listener","cleanup","storedListener","useLatest","storedCleanup","useLayoutEffect","didUnsubscribe","args","current","apply","this","targetEl","addEventListener","removeEventListener","useKey","listeners","event","LEGACY_COMPAT","key","a","node","useConditionalFocus","shouldFocus","defaultOptions","includeRoot","preventScroll","doFocus_","element","tabbableEls","tabbable","length","focus","doFocus","React","usePrevious","value","initialValue","storedValue","curr","noop","useA11yButton","onClick","clickedMouse","setClickedMouse","Enter","role","tabIndex","children","provider","__reactCreateElement__","toVal","mix","k","y","str","Array","isArray","tmp","x","i","arguments","useDisclosure","DisclosureContext","useA11yTarget","options","closeOnEscape","openClass","closedClass","openStyle","closedStyle","id","isOpen","close","Escape","className","style","_extends","visibility","useA11yCloseButton","e","useA11yTrigger","toggle","usePassiveLayoutEffect","document","createElement","Up","Right","Down","Left","Esc","Spacebar","Del","Crsel","Exsel","Add","Subtract","Multiply","Divide","Decimal","Scroll","candidateSelector","matches","Element","prototype","msMatchesSelector","webkitMatchesSelector","el","includeRootNode","candidate","candidateTabindex","regularTabbables","orderedTabbables","candidates","querySelectorAll","call","slice","unshift","isNodeMatchingSelectorTabbable","getTabindex","push","documentOrder","sort","sortOrderedTabbables","map","concat","isNodeMatchingSelectorFocusable","tagName","isTabbableRadio","disabled","isInput","offsetParent","getComputedStyle","tabindexAttr","parseInt","getAttribute","isNaN","contentEditable","b","name","ownerDocument","radioSet","checked","useCallback","emptyArr","useMergedRef","refs","forEach","ref","ID","genId","serverHandoffComplete","getContainer","container","Portalize","server","providers","nodes","setNodes","reduceRight","portals","ReactDOM","React.Fragment","open","childProps","props","a11yProps","undefined","hasOwnProperty","defaultOpen","onChange","fallbackId","prefix","setId","useId","defaultValue","controlledValue","setCurrent","storedOnChange","prevValue","useChange","on","off","useSwitch","context","Provider","portal","clsx","Component","portalize"],"mappings":"weA+BA,SAASA,EAASC,EAAaC,EAAWC,EAAeC,OACjDC,EAAiBC,EAAUH,GAC3BI,EAAgBD,EAAUF,GAEhCI,GAAgB,oBAKLL,QACHM,8BAD0BC,2BAAAA,kBAE9BL,EAAeM,QAAQC,MAAMC,KAAMH,QAN/BI,EAAWb,GAAU,YAAaA,EAASA,EAAOU,QAAUV,KAC7Da,OAEDL,EAAiB,EAMrBK,EAASC,iBAAiBb,EAAMC,OAC1BC,EAAUG,EAAcI,eAEvB,WACLF,EAAiB,EACjBK,EAASE,oBAAoBd,EAAMC,GACnCC,GAAWA,QAGZ,CAACH,EAAQC,ICvCP,SAASe,EACdhB,EACAiB,GAEAlB,EAASC,EAAQ,WAAW,SAACkB,OACrBhB,EAAWe,EAAUE,EAAcD,EAAME,MAAQF,EAAME,KACzDlB,GAAUA,EAASgB,MCgClB,WAACG,UAAMA,EAAEC,KCjClB,SAASC,EACPvB,EACAwB,cAAAA,IAAAA,EAAc,oBACiBC,IAA9BC,IAAAA,YAAaC,IAAAA,cAERC,EAAW,eACTC,EAAU7B,GAAU,YAAaA,EAASA,EAAOU,QAAUV,KAC5D6B,GAAYL,OACXM,EAAcC,EAASF,EAASH,GAClCI,EAAYE,OAAS,GAAGF,EAAY,GAAGG,MAAM,CAACN,cAAAA,MAE9CO,EAAU7B,EAAUuB,GAE1BO,aAAgB,WACdD,EAAQxB,YACP,CAACwB,EAASV,IAEbzB,EAASC,EAAQ,gBAAiB4B,GCjCpC,SAASQ,EAA2BC,EAAUC,OACtCC,EAAcJ,SAAaG,UACjCH,aAAgB,WACdI,EAAY7B,QAAU2B,IACrB,CAACA,IACGE,EAAY7B,QCiBI,WAAC8B,UAAUA,EAepC,SAASC,KCpCF,SAASC,EACd1C,EACA2C,OAEMC,EAAeT,SAAa,GAC5BU,EAAkB,kBAAOD,EAAalC,QAAU,UACtDX,EAASC,EAAQ,aAAc6C,GAC/B9C,EAASC,EAAQ,YAAa6C,GAC9B9C,EAASC,EAAQ,SAAS,SAACkB,GAEzB0B,EAAalC,SAAWiC,EAAQzB,GAChC0B,EAAalC,QAAU,KAGzBM,EAAOhB,EAAQ,CACb8C,MAAOH,MACFA,IAGA,CACLI,KAAM,SACNC,SAAU,GCHJ,WAACC,SAAWC,IAAAA,SAAUb,IAAAA,aACpBc,EAAoBD,EAAU,CAACb,MAAAA,GAAQY,GCxBnD,SAASG,EAAMC,OACVC,EAAGC,EAAGC,EAAI,MAEK,iBAARH,GAAmC,iBAARA,EACrCG,GAAOH,OACD,GAAmB,iBAARA,KACbI,MAAMC,QAAQL,OACZC,EAAE,EAAGA,EAAID,EAAIrB,OAAQsB,IACrBD,EAAIC,KACHC,EAAIH,EAAMC,EAAIC,OACjBE,IAAQA,GAAO,KACfA,GAAOD,YAKLD,KAAKD,EACLA,EAAIC,KACPE,IAAQA,GAAO,KACfA,GAAOF,UAMJE,EAGO,qBACLG,EAAKC,EAAVC,EAAE,EAAWL,EAAI,GACVM,UAAU9B,OAAd6B,IACFF,EAAMG,UAAUD,QACfD,EAAIR,EAAMO,MACbH,IAAQA,GAAO,KACfA,GAAOI,UAIHJ,EChBD,SAASO,WACP5B,aAAiB6B,GAoDnB,SAASC,EACdjE,EACAkE,YAAAA,IAAAA,EAAgC,UAS5BA,EANFvC,IAAAA,kBACAwC,cAAAA,aAAgB,IAChBC,IAAAA,UACAC,IAAAA,YACAC,IAAAA,UACAC,IAAAA,cAE0BR,IAArBS,IAAAA,GAAIC,IAAAA,OAAQC,IAAAA,aAGnBnD,EAAoBvB,GAFHoC,EAAYqC,IAEYA,EAAQ,CAC/C/C,YAAa,EACbC,cAAAA,IAGFX,EAAOhB,EAAQ,CAAC2E,OAAQ,kBAAMR,GAAiBO,OAExC,gBACWD,EAChBD,GAAAA,EACAI,UAAWH,EAASL,EAAYC,EAChCQ,MAAOC,EACL,CAACC,WAAYN,EAAS,UAAY,UAClCA,EAASH,EAAYC,IA0DpB,SAASS,EACdhF,SACC2C,cAAsC,MAAtCA,UAE2BoB,IAArBW,IAAAA,MAAOD,IAAAA,cACPK,EACL,mBAFoBN,mBAIDC,eACH,SAEhB/B,EAAiB1C,GAAQ,SAACiF,GACxBP,IACA/B,MAAAA,GAAAA,EAAUsC,OAyCT,SAASC,EACdlF,EACAkE,YAAAA,IAAAA,EAAiC,UAEiCA,EAA3DE,IAAAA,UAAWC,IAAAA,YAAaC,IAAAA,UAAWC,IAAAA,YAAa5B,IAAAA,UAC1BoB,IAAtBU,IAAAA,OAAQD,IAAAA,GAAIW,IAAAA,cAEnB5D,EAAoBvB,EADHoC,EAAYqC,KACYA,EAAQ,CAAC/C,YAAa,IAExDoD,EACL,iBACmBN,kBACAC,EACjBG,UAAWH,EAASL,EAAYC,EAChCQ,MAAOJ,EAASH,EAAYC,GAE9B7B,EAAiB1C,GAAQ,SAACiF,GACxBE,IACAxC,MAAAA,GAAAA,EAAUsC,OA2ChB,SAASxC,KClRT,IAAM2C,EACJjD,EACsB,oBAAbkD,eAAuD,IAA3BA,SAASC,cACxC,kBACA,aCJFjF,EAAY,SAAgBK,OAC1B6B,EAAcJ,SAAazB,UACjC6B,EAAY7B,QAAUA,EACf6B,GVqBHpB,EAAwC,CAC5CoE,GAAI,UACJC,MAAO,aACPC,KAAM,YACNC,KAAM,YACNC,IAAK,SACLC,SAAU,IACVC,IAAK,SACLC,MAAO,QACPC,MAAO,QACPC,IAAK,IACLC,SAAU,IACVC,SAAU,IACVC,OAAQ,IACRC,QAAS,IACTC,OAAQ,cCvCJC,EACJ,mIAUIC,EACe,oBAAZC,QACH,kBAAM,GACNA,QAAQC,UAAUF,SAElBC,QAAQC,UAAUC,mBAClBF,QAAQC,UAAUE,sBAElB5E,EAAW,SAAC6E,EAAiBC,YAAAA,IAAAA,EAAkB,OAa/ChD,EAAGiD,EAAWC,EAZZC,EAAkC,GAClCC,EAAgC,GAElCC,EAAsDN,EAAGO,iBAC3Db,OAGEO,GAAmBN,EAAQa,KAAKR,EAAIN,KACtCY,EAAazD,MAAMgD,UAAUY,MAAM1G,MAAMuG,IAC9BI,QAAQV,GAIhB/C,EAAI,EAAGA,EAAIqD,EAAWlF,OAAQ6B,IACjCiD,EAAYI,EAAWrD,GAClB0D,EAA+BT,KAGV,KAF1BC,EAAoBS,EAAYV,IAG9BE,EAAiBS,KAAKX,GAEtBG,EAAiBQ,KAAK,CACpBC,cAAe7D,EACfb,SAAU+D,EACVzF,KAAMwF,YAKLG,EACJU,KAAKC,GACLC,OACAC,OAAOd,IAGNO,EAAiC,SAACjG,YAEnCyG,EAAgCzG,IACf,UAAjBA,EAAK0G,SACgC,UAAnC1G,EAA0BrB,OAC1BgI,EAAgB3G,IACC,EAApBkG,EAAYlG,KAGVyG,EAAkC,SAACzG,WAEpCA,EAA0B4G,UAC1BC,EAAQ7G,IAA6C,WAAnCA,EAA0BrB,MAKvB,OAAtBqB,EAAK8G,cACiC,WAAtCC,iBAAiB/G,GAAMyD,aAGrByC,EAAc,SAAClG,OACbgH,EAAeC,SAASjH,EAAKkH,aAAa,aAAe,GAAI,WAC9DC,MAAMH,GAGkB,SAAzBhH,EAAKoH,gBAAmC,EACrCpH,EAAK0B,SAJqBsF,GAQ7BV,EAAuB,SAACvG,EAAcsH,UAC1CtH,EAAE2B,WAAa2F,EAAE3F,SACb3B,EAAEqG,cAAgBiB,EAAEjB,cACpBrG,EAAE2B,SAAW2F,EAAE3F,UAEfmF,EAAU,SAAC7G,SAAuC,UAAjBA,EAAK0G,SAEtCC,EAAkB,SAAC3G,OAClBA,EAAKsH,KAAM,OAAO,KAGnBtH,EAAKuH,cAAe,SAChBC,EAAWxH,EAAKuH,cAAc1B,iBAClC,6BAA+B7F,EAAKsH,KAAO,MAGpC/E,EAAI,EAAGA,EAAIiF,EAAS9G,OAAQ6B,OAC9BiF,EAASjF,GAAwBkF,QAAS,OAAOD,EAASjF,KAAOvC,SAEjE,SAGF,GCtEHG,EAA6C,CACjDC,YAAa,EACbC,cAAe,GEvCXqH,EAAc7G,cAqCd8G,EAAe,GOtCfC,EAAe,sCAChBC,2BAAAA,yBACsB,SAACtH,UAC1BsH,EAAKC,SAAQ,SAACC,GACO,mBAARA,EAAoBA,EAAIxH,GAC1BwH,GAAsB,iBAARA,IACpBA,EAAkC3I,QAAUmB,QCL/CyH,EAAK,EACHC,EAAQ,kBAAcD,KACxBE,EAAwB,oBNDtBC,EAAe,SAACC,SACA,oBAAbrE,UAA4BA,SAAS8B,iBAAiBuC,IAEzDC,EAAsC,oBAC1CD,UAAAA,aAAY,iBACZE,OAAAA,aAAS,IACTC,IAAAA,UACA5G,IAAAA,WAE0Bd,WAAesH,EAAaC,IAA/CI,OAAOC,UACd5H,aAAgB,WACd4H,EAASN,EAAaC,MACrB,CAACA,IAEU,GAAVI,EAEEF,QACgB,IAAdC,GAAwBA,EAAU7H,OAAS,IAC7CiB,EAAW4G,EAAUG,cAGnB/G,SAKD,GAAI6G,EAAM9H,OAAS,EAAG,SACrBiI,EAA+B,GAC5BpG,EAAI,EAAGA,EAAIiG,EAAM9H,OAAQ6B,IAChCoG,EAAQxC,KAAKyC,eAAsBjH,EAAU6G,EAAMjG,YAC9CV,EAACgH,gBAAgBF,UAGnB,wBEzBHjG,EAAoB7B,gBAA4C,CACpEsC,OAAQ,EACR2F,KAAM3H,EACNiC,MAAOjC,EACP0C,OAAQ1C,kBAuKH,gBAAsBQ,IAAAA,SACrBoG,EAAMlH,SAA0B,MAChCkI,EAAapH,EAASqH,MACtBC,EAAYvF,EAAmBqE,EAAK,CACxC1G,QAAS0H,EAAW1H,iBAGfR,eACLc,EACA6B,EAAcyF,EAAW,CACvB5H,aAAS6H,eACKH,EAAWI,eAAe,cACpCJ,EAAW,cACXE,EAAU,cACdlB,IAAKH,EACHG,EAEApG,EAASoG,sBA1KV,gBACL7E,IAAAA,GACA4F,IAAAA,KACAM,IAAAA,gBACAC,SAAAA,aAAWlI,IACXQ,IAAAA,SAEAuB,EI9BY,SACZoG,EACAC,YAAAA,IAAAA,EAAS,YAEW1I,WAClBqH,EAAwBD,OAAQ,GAD3B/E,OAAIsG,cAIXvK,GAAgB,WACTiJ,IACHA,EAAwB,EACxBsB,EAAMxB,QAEP,IAEIsB,SAAiC,IAAPpG,EAAgBA,EAAKqG,EAASrG,GJe1DuG,CAAMvG,SJvBb,SACEwG,EACAC,EACAN,YAFAK,IAAAA,EAAe,YAEfL,IAAAA,EAAwDlI,SAE1BN,WAAe8I,MAAAA,EAAAA,EAAmBD,GAAzDtK,OAASwK,cSfA,SAChB7I,EACAsI,OAEMQ,EAAiB9K,EAAUsK,GAC3BS,EAAYhJ,EAAYC,EAAOA,GACrCF,aAAgB,WACVE,IAAU+I,GAAWD,EAAezK,QAAQ2B,EAAO+I,KACtD,CAAC/I,EAAO+I,EAAWD,ITQtBE,CAAU3K,EAASiK,GAEZ,CACLM,MAAAA,EAAAA,EAAmBvK,EACnBoE,EACEkE,GACE,kBAAMkC,OAENjC,GAEF,CAEEqC,GAAItC,GAAY,kBAAMkC,EAAW,KAAOjC,GAExCsC,IAAKvC,GAAY,kBAAMkC,EAAW,KAAQjC,MIIvBuC,CAAUd,EAAaN,EAAMO,GAA/ClG,OAAQU,OAETsG,EAAUtJ,WACd,iBAAO,CACLqC,GAAAA,EACA4F,KAAMjF,EAAOmG,GACb5G,MAAOS,EAAOoG,IACdpG,OAAAA,EACAV,OAAAA,KAEF,CAACD,EAAIC,EAAQU,WAIbhC,EAACa,EAAkB0H,UAASrJ,MAAOoJ,GAChCxI,aA2DA,oBACLkB,cAAAA,aAAgB,IAChBwH,IAAAA,OACAvH,IAAAA,UACAC,IAAAA,YACAC,IAAAA,UACAC,IAAAA,YACA5C,IAAAA,cACAsB,IAAAA,SAEMoG,EAAMlH,SAA0B,MAChCkI,EAAapH,EAASqH,MACtBC,EAAYtG,EAAcoF,EAAK,CACnCjF,UAAWwH,EAAKvB,EAAWzF,UAAWR,SAAc,EACpDC,YAAauH,EAAKvB,EAAWzF,UAAWP,SAAgB,EACxDC,UAAW+F,EAAWxF,MAClBC,EAAc,GAAIuF,EAAWxF,MAAOP,GACpCA,EACJC,YAAa8F,EAAWxF,MACpBC,EAAc,GAAIuF,EAAWxF,MAAON,GACpCA,EACJJ,cAAAA,EACAxC,cAAAA,WA5EJ,SACEkK,EACAF,OAEKA,EAAQ,OAAOE,MACdvB,EAAwB,CAACrH,SAAU4I,SACnB,iBAAXF,EAAqBrB,EAAMZ,UAAYiC,EAC7C7G,EAAcwF,EAAOqB,GACnBxI,EAAoBwG,EAAWW,GAuE/BwB,CACL3J,eACEc,EACA6B,EAAcyF,EAAW,CACvBlB,IAAKH,EACHG,EAEApG,EAASoG,QAIfsC,cA8FG,gBACLvH,IAAAA,UACAC,IAAAA,YACAC,IAAAA,UACAC,IAAAA,YACAtB,IAAAA,SAEMoG,EAAMlH,SAA0B,MAChCkI,EAAapH,EAASqH,MACtBC,EAAYrF,EAAemE,EAAK,CACpCjF,UAAWwH,EAAKvB,EAAWzF,UAAWR,SAAc,EACpDC,YAAauH,EAAKvB,EAAWzF,UAAWP,SAAgB,EACxDC,UAAW+F,EAAWxF,MAClBC,EAAc,GAAIuF,EAAWxF,MAAOP,GACpCA,EACJC,YAAa8F,EAAWxF,MACpBC,EAAc,GAAIuF,EAAWxF,MAAON,GACpCA,EACJ5B,QAAS0H,EAAW1H,iBAGfR,eACLc,EACA6B,EAAcyF,EAAW,CACvB5H,aAAS6H,EACTnB,IAAKH,EACHG,EAEApG,EAASoG"}