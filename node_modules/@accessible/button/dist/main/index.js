"use strict";

exports.__esModule = true;
exports.useA11yButton = useA11yButton;
exports.Button = void 0;

var React = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _useKey = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@accessible/use-key"));

var _event = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@react-hook/event"));

var _mergedRef = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@react-hook/merged-ref"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useA11yButton(target, onClick) {
  const clickedMouse = React.useRef(false);

  const setClickedMouse = () => clickedMouse.current = true;

  (0, _event.default)(target, 'touchstart', setClickedMouse);
  (0, _event.default)(target, 'mousedown', setClickedMouse);
  (0, _event.default)(target, 'click', event => {
    // Only fire onClick if the keyboard was not used to initiate the click
    clickedMouse.current && onClick(event);
    clickedMouse.current = false;
  }); // @ts-expect-error

  (0, _useKey.default)(target, {
    Enter: onClick,
    ' ': onClick
  });
  return {
    role: 'button',
    tabIndex: 0
  };
}

const Button = ({
  children
}) => {
  const ref = React.useRef(null);
  const {
    props
  } = children;
  const {
    role,
    tabIndex
  } = useA11yButton(ref, props.onClick);
  return /*#__PURE__*/React.cloneElement(children, {
    onClick: undefined,
    role: props.hasOwnProperty('role') ? props.role : role,
    tabIndex: props.hasOwnProperty('tabIndex') ? props.tabIndex : tabIndex,
    // @ts-expect-error
    ref: (0, _mergedRef.default)(ref, children.ref)
  });
};

exports.Button = Button;

/* istanbul ignore next */
if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {
  Button.displayName = 'AccessibleButton';
}