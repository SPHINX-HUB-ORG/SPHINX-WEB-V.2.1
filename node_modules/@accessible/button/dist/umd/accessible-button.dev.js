(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
  (global = global || self, factory(global.AccessibleButton = {}, global.React));
}(this, (function (exports, React) { 'use strict';

  var usePassiveLayoutEffect = React[typeof document !== 'undefined' && document.createElement !== void 0 ? 'useLayoutEffect' : 'useEffect'];

  var useLatest = function useLatest(current) {
    var storedValue = React.useRef(current);
    storedValue.current = current;
    return storedValue;
  };

  function useEvent(target, type, listener, cleanup) {
    var storedListener = useLatest(listener);
    var storedCleanup = useLatest(cleanup);
    usePassiveLayoutEffect(function () {
      var targetEl = target && 'current' in target ? target.current : target;
      if (!targetEl) return;
      var didUnsubscribe = 0;

      function listener() {
        if (didUnsubscribe) return;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        storedListener.current.apply(this, args);
      }

      targetEl.addEventListener(type, listener);
      var cleanup = storedCleanup.current;
      return function () {
        didUnsubscribe = 1;
        targetEl.removeEventListener(type, listener);
        cleanup && cleanup();
      }; // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [target, type]);
  }

  function useKey(target, listeners) {
    useEvent(target, 'keydown', function (event) {
      var listener = listeners[LEGACY_COMPAT[event.key] || event.key];
      if (listener) listener(event);
    });
  } // IE 11 and some versions of Edge have non-standard value

  var LEGACY_COMPAT = {
    Up: 'ArrowUp',
    Right: 'ArrowRight',
    Down: 'ArrowDown',
    Left: 'ArrowLeft',
    Esc: 'Escape',
    Spacebar: ' ',
    Del: 'Delete',
    Crsel: 'CrSel',
    Exsel: 'ExSel',
    Add: '+',
    Subtract: '-',
    Multiply: '*',
    Divide: '/',
    Decimal: '.',
    Scroll: 'ScrollLock'
  };

  var useMergedRef = function useMergedRef() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }

    return function (element) {
      return refs.forEach(function (ref) {
        if (typeof ref === 'function') ref(element);else if (ref && typeof ref === 'object') ref.current = element;
      });
    };
  };

  function useA11yButton(target, onClick) {
    var clickedMouse = React.useRef(false);

    var setClickedMouse = function setClickedMouse() {
      return clickedMouse.current = true;
    };

    useEvent(target, 'touchstart', setClickedMouse);
    useEvent(target, 'mousedown', setClickedMouse);
    useEvent(target, 'click', function (event) {
      // Only fire onClick if the keyboard was not used to initiate the click
      clickedMouse.current && onClick(event);
      clickedMouse.current = false;
    }); // @ts-expect-error

    useKey(target, {
      Enter: onClick,
      ' ': onClick
    });
    return {
      role: 'button',
      tabIndex: 0
    };
  }
  var Button = function Button(_ref) {
    var children = _ref.children;
    var ref = React.useRef(null);
    var props = children.props;

    var _useA11yButton = useA11yButton(ref, props.onClick),
        role = _useA11yButton.role,
        tabIndex = _useA11yButton.tabIndex;

    return /*#__PURE__*/React.cloneElement(children, {
      onClick: undefined,
      role: props.hasOwnProperty('role') ? props.role : role,
      tabIndex: props.hasOwnProperty('tabIndex') ? props.tabIndex : tabIndex,
      // @ts-expect-error
      ref: useMergedRef(ref, children.ref)
    });
  };

  /* istanbul ignore next */
  if (typeof process !== 'undefined' && "production" !== 'production') {
    Button.displayName = 'AccessibleButton';
  }

  exports.Button = Button;
  exports.useA11yButton = useA11yButton;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=accessible-button.dev.js.map
