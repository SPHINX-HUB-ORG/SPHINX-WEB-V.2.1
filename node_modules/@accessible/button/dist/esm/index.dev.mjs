import { useRef, cloneElement } from 'react';
import useKey from '@accessible/use-key';
import useEvent from '@react-hook/event';
import useMergedRef from '@react-hook/merged-ref';

function useA11yButton(target, onClick) {
  var clickedMouse = useRef(false);

  var setClickedMouse = () => clickedMouse.current = true;

  useEvent(target, 'touchstart', setClickedMouse);
  useEvent(target, 'mousedown', setClickedMouse);
  useEvent(target, 'click', event => {
    // Only fire onClick if the keyboard was not used to initiate the click
    clickedMouse.current && onClick(event);
    clickedMouse.current = false;
  }); // @ts-expect-error

  useKey(target, {
    Enter: onClick,
    ' ': onClick
  });
  return {
    role: 'button',
    tabIndex: 0
  };
}
var Button = (_ref) => {
  var {
    children
  } = _ref;
  var ref = useRef(null);
  var {
    props
  } = children;
  var {
    role,
    tabIndex
  } = useA11yButton(ref, props.onClick);
  return /*#__PURE__*/cloneElement(children, {
    onClick: undefined,
    role: props.hasOwnProperty('role') ? props.role : role,
    tabIndex: props.hasOwnProperty('tabIndex') ? props.tabIndex : tabIndex,
    // @ts-expect-error
    ref: useMergedRef(ref, children.ref)
  });
};

/* istanbul ignore next */
if (typeof process !== 'undefined' && "production" !== 'production') {
  Button.displayName = 'AccessibleButton';
}

export { Button, useA11yButton };
//# sourceMappingURL=index.dev.mjs.map
