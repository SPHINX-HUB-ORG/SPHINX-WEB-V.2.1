import { cloneElement, createElement } from 'react';
import { useDisclosure, Disclosure, useA11yTarget as useA11yTarget$1, Target as Target$1 } from '@accessible/disclosure';
export { CloseButton, Trigger, useA11yCloseButton, useA11yTrigger } from '@accessible/disclosure';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var __reactCreateElement__ = createElement;

/**
 * This hook provides the current value of the drawer's context object
 */
function useDrawer() {
  return useDisclosure();
}
/**
 * This component creates the context for your drawer target and trigger
 * and contains some configuration options.
 */

function Drawer(props) {
  return /*#__PURE__*/__reactCreateElement__(Disclosure, _extends({}, props));
}
/**
 * A React hook for creating a headless drawer target to [WAI-ARIA authoring practices](https://www.w3.org/TR/wai-aria-practices/examples/dialog-drawer/dialog.html).
 *
 * @param target A React ref or HTML element
 * @param options Configuration options
 */

function useA11yTarget(target, options) {
  if (options === void 0) {
    options = {};
  }

  var disclosureProps = useA11yTarget$1(target, Object.assign({}, options, {
    openStyle: Object.assign(defaultOpenStyles, options.openStyle)
  }));
  return Object.assign(disclosureProps, {
    style: Object.assign(disclosureProps.style, defaultClosedStyles[options.placement || 'left'])
  });
}
/**
 * This component wraps any React element and turns it into a
 * drawer target.
 */

function Target(props) {
  var childProps = props.children.props;
  return __reactCreateElement__(Target$1, Object.assign({}, props, {
    openStyle: Object.assign({}, defaultOpenStyles, props.openStyle)
  }), /*#__PURE__*/cloneElement(props.children, {
    style: Object.assign({}, defaultClosedStyles[props.placement || 'left'], childProps.style)
  }));
}
var defaultClosedStyles = {
  top: {
    position: 'fixed',
    top: 0,
    right: 0,
    bottom: 'auto',
    left: 0,
    transform: 'translate3d(0, -100%, 0)'
  },
  right: {
    position: 'fixed',
    top: 0,
    right: 0,
    bottom: 0,
    left: 'auto',
    transform: 'translate3d(100%, 0, 0)'
  },
  bottom: {
    position: 'fixed',
    top: 'auto',
    right: 0,
    bottom: 0,
    left: 0,
    transform: 'translate3d(0, 100%, 0)'
  },
  left: {
    position: 'fixed',
    top: 0,
    right: 'auto',
    bottom: 0,
    left: 0,
    transform: 'translate3d(-100%, 0, 0)'
  }
};
var defaultOpenStyles = {
  transform: 'translate3d(0, 0, 0)'
};

/* istanbul ignore next */
if (typeof process !== 'undefined' && "production" !== 'production') {
  Drawer.displayName = 'Drawer';
  Target.displayName = 'Target';
}

export { Drawer, Target, useA11yTarget, useDrawer };
//# sourceMappingURL=index.dev.mjs.map
