import * as React from 'react';
import tabbable from '@accessible/tabbable';
import useEvent from '@react-hook/event';

function useConditionalFocus(target, shouldFocus = false, {
  includeRoot,
  preventScroll
} = defaultOptions) {
  const didFocus = React.useRef(false);
  const didFocusAfterEvent = React.useRef(false);
  React.useEffect(() => {
    const element = target && 'current' in target ? target.current : target;
    if (!element || !shouldFocus || didFocus.current) return;
    const tabbableEls = tabbable(element, includeRoot);
    if (tabbableEls.length > 0) tabbableEls[0].focus({
      preventScroll
    });
    didFocus.current = true;
  }, [target, includeRoot, preventScroll, shouldFocus]);

  function _ref() {
    didFocus.current = false;
    didFocusAfterEvent.current = false;
  }

  React.useEffect(() => {
    return _ref;
  }, [shouldFocus]);
  useEvent(target, 'transitionend', () => {
    const element = target && 'current' in target ? target.current : target;
    if (!element || !shouldFocus || didFocusAfterEvent.current) return;
    const tabbableEls = tabbable(element, includeRoot);
    if (tabbableEls.length > 0) tabbableEls[0].focus({
      preventScroll
    });
    didFocusAfterEvent.current = true;
  });
}

const defaultOptions = {
  includeRoot: false,
  preventScroll: false
};
export default useConditionalFocus;