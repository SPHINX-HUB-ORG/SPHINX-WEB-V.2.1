"use strict";

exports.__esModule = true;
exports.default = void 0;

var React = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _tabbable = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@accessible/tabbable"));

var _event = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@react-hook/event"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useConditionalFocus(target, shouldFocus = false, {
  includeRoot,
  preventScroll
} = defaultOptions) {
  const didFocus = React.useRef(false);
  const didFocusAfterEvent = React.useRef(false);
  React.useEffect(() => {
    const element = target && 'current' in target ? target.current : target;
    if (!element || !shouldFocus || didFocus.current) return;
    const tabbableEls = (0, _tabbable.default)(element, includeRoot);
    if (tabbableEls.length > 0) tabbableEls[0].focus({
      preventScroll
    });
    didFocus.current = true;
  }, [target, includeRoot, preventScroll, shouldFocus]);

  function _ref() {
    didFocus.current = false;
    didFocusAfterEvent.current = false;
  }

  React.useEffect(() => {
    return _ref;
  }, [shouldFocus]);
  (0, _event.default)(target, 'transitionend', () => {
    const element = target && 'current' in target ? target.current : target;
    if (!element || !shouldFocus || didFocusAfterEvent.current) return;
    const tabbableEls = (0, _tabbable.default)(element, includeRoot);
    if (tabbableEls.length > 0) tabbableEls[0].focus({
      preventScroll
    });
    didFocusAfterEvent.current = true;
  });
}

const defaultOptions = {
  includeRoot: false,
  preventScroll: false
};
var _default = useConditionalFocus;
exports.default = _default;