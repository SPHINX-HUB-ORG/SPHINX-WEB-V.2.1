import { useRef, useEffect } from 'react';
import tabbable from '@accessible/tabbable';
import useEvent from '@react-hook/event';

function useConditionalFocus(target, shouldFocus, _temp) {
  if (shouldFocus === void 0) {
    shouldFocus = false;
  }

  var {
    includeRoot,
    preventScroll
  } = _temp === void 0 ? defaultOptions : _temp;
  var didFocus = useRef(false);
  var didFocusAfterEvent = useRef(false);
  useEffect(() => {
    var element = target && 'current' in target ? target.current : target;
    if (!element || !shouldFocus || didFocus.current) return;
    var tabbableEls = tabbable(element, includeRoot);
    if (tabbableEls.length > 0) tabbableEls[0].focus({
      preventScroll
    });
    didFocus.current = true;
  }, [target, includeRoot, preventScroll, shouldFocus]);

  function _ref() {
    didFocus.current = false;
    didFocusAfterEvent.current = false;
  }

  useEffect(() => {
    return _ref;
  }, [shouldFocus]);
  useEvent(target, 'transitionend', () => {
    var element = target && 'current' in target ? target.current : target;
    if (!element || !shouldFocus || didFocusAfterEvent.current) return;
    var tabbableEls = tabbable(element, includeRoot);
    if (tabbableEls.length > 0) tabbableEls[0].focus({
      preventScroll
    });
    didFocusAfterEvent.current = true;
  });
}

var defaultOptions = {
  includeRoot: false,
  preventScroll: false
};

export default useConditionalFocus;
//# sourceMappingURL=index.dev.mjs.map
