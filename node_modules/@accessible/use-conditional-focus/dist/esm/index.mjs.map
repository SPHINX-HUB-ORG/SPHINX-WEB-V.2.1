{"version":3,"file":"index.mjs","sources":["../../src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport tabbable from '@accessible/tabbable'\nimport useEvent from '@react-hook/event'\n\nfunction useConditionalFocus<T extends Window>(\n  target: T | null,\n  shouldFocus?: boolean,\n  options?: UseConditionalFocusOptions\n): void\nfunction useConditionalFocus<T extends Document>(\n  target: T | null,\n  shouldFocus?: boolean,\n  options?: UseConditionalFocusOptions\n): void\nfunction useConditionalFocus<T extends HTMLElement>(\n  target: React.RefObject<T> | T | null,\n  shouldFocus?: boolean,\n  options?: UseConditionalFocusOptions\n): void\nfunction useConditionalFocus(\n  target: any,\n  shouldFocus = false,\n  {includeRoot, preventScroll} = defaultOptions\n) {\n  const didFocus = React.useRef(false)\n  const didFocusAfterEvent = React.useRef(false)\n\n  React.useEffect(() => {\n    const element = target && 'current' in target ? target.current : target\n    if (!element || !shouldFocus || didFocus.current) return\n    const tabbableEls = tabbable(element, includeRoot)\n    if (tabbableEls.length > 0) tabbableEls[0].focus({preventScroll})\n    didFocus.current = true\n  }, [target, includeRoot, preventScroll, shouldFocus])\n\n  React.useEffect(() => {\n    return () => {\n      didFocus.current = false\n      didFocusAfterEvent.current = false\n    }\n  }, [shouldFocus])\n\n  useEvent(target, 'transitionend', () => {\n    const element = target && 'current' in target ? target.current : target\n    if (!element || !shouldFocus || didFocusAfterEvent.current) return\n    const tabbableEls = tabbable(element, includeRoot)\n    if (tabbableEls.length > 0) tabbableEls[0].focus({preventScroll})\n    didFocusAfterEvent.current = true\n  })\n}\n\nconst defaultOptions: UseConditionalFocusOptions = {\n  includeRoot: false,\n  preventScroll: false,\n}\n\nexport type UseConditionalFocusOptions = {\n  includeRoot?: boolean\n  preventScroll?: boolean\n}\n\nexport default useConditionalFocus\n"],"names":["defaultOptions","includeRoot","preventScroll","target","shouldFocus","didFocus","current","didFocusAfterEvent","React","element","tabbableEls","tabbable","length","focus","useEvent"],"mappings":"mHAmDA,IAAMA,EAA6C,CACjDC,YAAa,EACbC,cAAe,kBAlCjB,SACEC,EACAC,kBAgBIC,EAASC,QAAU,EACnBC,EAAmBD,QAAU,WAjBjCF,IAAAA,EAAc,OACdH,YAACA,EAADC,cAAcA,cAAiBF,IAEzBK,EAAWG,EAAa,GACxBD,EAAqBC,EAAa,GAExCA,EAAgB,SACRC,EAAUN,GAAU,YAAaA,EAASA,EAAOG,QAAUH,KAC5DM,GAAYL,IAAeC,EAASC,aACnCI,EAAcC,EAASF,EAASR,GAClCS,EAAYE,OAAS,GAAGF,EAAY,GAAGG,MAAM,CAACX,cAAAA,IAClDG,EAASC,QAAU,IAClB,CAACH,EAAQF,EAAaC,EAAeE,IAExCI,EAAgB,MAKb,CAACJ,IAEJU,EAASX,EAAQ,gBAAiB,SAC1BM,EAAUN,GAAU,YAAaA,EAASA,EAAOG,QAAUH,KAC5DM,GAAYL,IAAeG,EAAmBD,aAC7CI,EAAcC,EAASF,EAASR,GAClCS,EAAYE,OAAS,GAAGF,EAAY,GAAGG,MAAM,CAACX,cAAAA,IAClDK,EAAmBD,QAAU"}