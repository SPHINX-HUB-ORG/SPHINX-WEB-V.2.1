import { useState, useEffect, useCallback } from 'react';
import useLatest from '@react-hook/latest';

/**
 * A hook for creating controlled toggles with on, off, and toggle callbacks.
 * This is extremely useful for creating controlled inputs for components like Checkbox.
 *
 * @param defaultValue Sets the default value of the switch
 * @param controlledValue Sets the controlled value of the switch, which will override
 *  the defaultValue
 * @param onChange A callback invoked whenever toggle callbacks that change state are invoked
 */

function useSwitch(defaultValue, controlledValue, onChange) {
  if (defaultValue === void 0) {
    defaultValue = false;
  }

  if (onChange === void 0) {
    onChange = noop;
  }

  var [current, setCurrent] = useState(controlledValue !== null && controlledValue !== void 0 ? controlledValue : defaultValue);
  var storedOnChange = useLatest(onChange);
  useEffect(() => {
    if (typeof controlledValue === 'boolean') {
      setCurrent(controlledValue);
    }
  }, [controlledValue]);
  var toggle = useCallback(() => {
    setCurrent(!current);
    storedOnChange.current(!current);
  }, [storedOnChange, current]);
  return [controlledValue !== null && controlledValue !== void 0 ? controlledValue : current, Object.assign(toggle, {
    on: useCallback(() => {
      setCurrent(true);
      if (!current) storedOnChange.current(true);
    }, [storedOnChange, current]),
    off: useCallback(() => {
      setCurrent(false);
      if (current) storedOnChange.current(false);
    }, [storedOnChange, current])
  })];
}

function noop() {}

export default useSwitch;
//# sourceMappingURL=index.dev.mjs.map
