(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
  typeof define === 'function' && define.amd ? define(['react'], factory) :
  (global = global || self, global.useSwitch = factory(global.React));
}(this, (function (React) { 'use strict';

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  var useLatest = function useLatest(current) {
    var storedValue = React.useRef(current);
    React.useEffect(function () {
      storedValue.current = current;
    });
    return storedValue;
  };

  /**
   * A hook for creating controlled toggles with on, off, and toggle callbacks.
   * This is extremely useful for creating controlled inputs for components like Checkbox.
   *
   * @param defaultValue Sets the default value of the switch
   * @param controlledValue Sets the controlled value of the switch, which will override
   *  the defaultValue
   * @param onChange A callback invoked whenever toggle callbacks that change state are invoked
   */

  function useSwitch(defaultValue, controlledValue, onChange) {
    if (defaultValue === void 0) {
      defaultValue = false;
    }

    if (onChange === void 0) {
      onChange = noop;
    }

    var _React$useState = React.useState(controlledValue !== null && controlledValue !== void 0 ? controlledValue : defaultValue),
        current = _React$useState[0],
        setCurrent = _React$useState[1];

    var storedOnChange = useLatest(onChange);
    React.useEffect(function () {
      if (typeof controlledValue === 'boolean') {
        setCurrent(controlledValue);
      }
    }, [controlledValue]);
    var toggle = React.useCallback(function () {
      setCurrent(!current);
      storedOnChange.current(!current);
    }, [storedOnChange, current]);
    return [controlledValue !== null && controlledValue !== void 0 ? controlledValue : current, _extends(toggle, {
      on: React.useCallback(function () {
        setCurrent(true);
        if (!current) storedOnChange.current(true);
      }, [storedOnChange, current]),
      off: React.useCallback(function () {
        setCurrent(false);
        if (current) storedOnChange.current(false);
      }, [storedOnChange, current])
    })];
  }

  function noop() {}

  return useSwitch;

})));
//# sourceMappingURL=use-switch.dev.js.map
