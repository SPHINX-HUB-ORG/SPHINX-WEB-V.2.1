"use strict";

exports.__esModule = true;
exports.default = void 0;

var React = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));

var _latest = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("@react-hook/latest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * A hook for creating controlled toggles with on, off, and toggle callbacks.
 * This is extremely useful for creating controlled inputs for components like Checkbox.
 *
 * @param defaultValue Sets the default value of the switch
 * @param controlledValue Sets the controlled value of the switch, which will override
 *  the defaultValue
 * @param onChange A callback invoked whenever toggle callbacks that change state are invoked
 */
function useSwitch(defaultValue = false, controlledValue, onChange = noop) {
  const [current, setCurrent] = React.useState(controlledValue !== null && controlledValue !== void 0 ? controlledValue : defaultValue);
  const storedOnChange = (0, _latest.default)(onChange);
  React.useEffect(() => {
    if (typeof controlledValue === 'boolean') {
      setCurrent(controlledValue);
    }
  }, [controlledValue]);
  const toggle = React.useCallback(() => {
    setCurrent(!current);
    storedOnChange.current(!current);
  }, [storedOnChange, current]);
  return [controlledValue !== null && controlledValue !== void 0 ? controlledValue : current, Object.assign(toggle, {
    on: React.useCallback(() => {
      setCurrent(true);
      if (!current) storedOnChange.current(true);
    }, [storedOnChange, current]),
    off: React.useCallback(() => {
      setCurrent(false);
      if (current) storedOnChange.current(false);
    }, [storedOnChange, current])
  })];
}

function noop() {}

var _default = useSwitch;
exports.default = _default;