{"version":3,"file":"useMutation.js","sourceRoot":"","sources":["../../../src/react/hooks/useMutation.ts"],"names":[],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useEffect, useRef, useState } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport {\n  MutationFunctionOptions,\n  MutationHookOptions,\n  MutationResult,\n  MutationTuple,\n} from '../types/types';\n\nimport {\n  ApolloCache,\n  DefaultContext,\n  mergeOptions,\n  OperationVariables,\n} from '../../core';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useMutation<\n  TData = any,\n  TVariables = OperationVariables,\n  TContext = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables, TContext>,\n): MutationTuple<TData, TVariables, TContext, TCache> {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(mutation, DocumentType.Mutation);\n  const [result, setResult] = useState<Omit<MutationResult, 'reset'>>({\n    called: false,\n    loading: false,\n    client,\n  });\n\n  const ref = useRef({\n    result,\n    mutationId: 0,\n    isMounted: true,\n    execute: null as null | MutationTuple<TData, TVariables, TContext, TCache>[0],\n    client,\n    mutation,\n    options,\n  });\n\n  const execute = useMemo(() => {\n    if (\n      ref.current.execute != null &&\n      ref.current.client === client &&\n      equal(options, ref.current.options) &&\n      equal(mutation, ref.current.mutation)) {\n      return ref.current.execute;\n    }\n\n    ref.current.client = client;\n    ref.current.options = options;\n    ref.current.mutation = mutation;\n    ref.current.execute = (\n      executeOptions: MutationFunctionOptions<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      > = {},\n    ) => {\n      const baseOptions = { ...options, mutation };\n      if (!ref.current.result.loading && !baseOptions.ignoreResults) {\n        setResult(ref.current.result = {\n          loading: true,\n          error: void 0,\n          data: void 0,\n          called: true,\n          client,\n        });\n      }\n\n      const mutationId = ++ref.current.mutationId;\n      const clientOptions = mergeOptions(\n        baseOptions,\n        executeOptions as any,\n      );\n\n      return client.mutate(clientOptions).then((response) =>{\n        const { data, errors } = response;\n        const error =\n          errors && errors.length > 0\n            ? new ApolloError({ graphQLErrors: errors })\n            : void 0;\n\n        if (\n          mutationId === ref.current.mutationId &&\n          !clientOptions.ignoreResults\n        ) {\n          const result = {\n            called: true,\n            loading: false,\n            data,\n            error,\n            client,\n          };\n\n          if (ref.current.isMounted && !equal(ref.current.result, result)) {\n            setResult(ref.current.result = result);\n          }\n        }\n\n        baseOptions.onCompleted?.(response.data!);\n        executeOptions.onCompleted?.(response.data!);\n        return response;\n      }).catch((error) => {\n        if (\n          mutationId === ref.current.mutationId &&\n          ref.current.isMounted\n        ) {\n          const result = {\n            loading: false,\n            error,\n            data: void 0,\n            called: true,\n            client,\n          };\n\n          if (!equal(ref.current.result, result)) {\n            setResult(ref.current.result = result);\n          }\n        }\n\n        if (baseOptions.onError || clientOptions.onError) {\n          baseOptions.onError?.(error);\n          executeOptions.onError?.(error);\n          // TODO(brian): why are we returning this here???\n          return { data: void 0, errors: error };\n        }\n\n        throw error;\n      });\n    };\n\n    return ref.current.execute;\n  }, [client, mutation, options]);\n\n  const reset = useCallback(() => {\n    setResult({ called: false, loading: false, client });\n  }, []);\n\n  useEffect(() => () => {\n    ref.current.isMounted = false;\n  }, []);\n\n  return [execute, { reset, ...result }];\n}\n"]}